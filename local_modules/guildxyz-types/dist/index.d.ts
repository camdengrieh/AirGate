import { z } from 'zod';

declare const SocialLinks$1: readonly ["TWITTER", "LENS", "YOUTUBE", "SPOTIFY", "MIRROR", "MEDIUM", "SUBSTACK", "SNAPSHOT", "SOUND", "GITHUB", "WARPCAST", "WEBSITE"];
declare const Visibility$1: readonly ["PUBLIC", "PRIVATE", "HIDDEN"];
declare const Chain$1: readonly ["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"];
declare const PlatformName$1: readonly ["DISCORD", "TELEGRAM", "GITHUB", "GOOGLE", "TWITTER", "CONTRACT_CALL", "TWITTER_V1", "UNIQUE_TEXT", "TEXT", "GUILD_PIN", "POLYGON_ID", "POINTS", "POAP", "FORM", "GATHER_TOWN", "ERC20", "WORLD_ID"];
declare const Logic$1: readonly ["AND", "OR", "ANY_OF"];
declare const ErrorMessages: {
    INVALID_GUILDPLATFORM_INDEX: string;
    EMPTY_OBJECT: string;
    INVALID_ADDRESS: string;
    REQUIRED_PLATFORM_GUILD_DATA: string;
    ADMIN_UPDATE_IS_OWNER_FALSE: string;
};
declare const GuildPinAction: readonly ["JOINED_GUILD", "IS_OWNER", "IS_ADMIN"];
declare const XPEventType: readonly ["USER_REFERRAL", "JOIN_GUILD", "GET_ROLE", "SUBMIT_FORM", "COLLECT_PIN", "COLLECT_NFT", "OWN_GUILD_VERIFIED"];
declare const PinSupportedChains: {
    [key: number]: (typeof Chain$1)[number] | "FUEL";
};
declare const PinContractAddresses: {
    readonly POLYGON: "0xff04820c36759c9f5203021fe051239ad2dcca8a";
    readonly BASE_MAINNET: "0x326f14942f8899406e3224bd63e9f250d275a52e";
    readonly ZKSYNC_ERA: "0xd1e4254fe7e56f58777ba624e7eeb3644f872b0d";
    readonly BSC: "0x807f16eba4a2c51b86cb8ec8be8eab34305c2bfd";
    readonly ARBITRUM: "0x0e6a14106497a7de36fba446628860c062e9e302";
    readonly CRONOS: "0x4205e56a69a0130a9e0828d45d0c84e45340a196";
    readonly OPTIMISM: "0x6c2c223b84724c4b8fd41ae0142c2369dfa7e319";
    readonly MANTLE: "0x4205e56a69a0130a9e0828d45d0c84e45340a196";
    readonly ONTOLOGY: "0x4205e56a69a0130a9e0828d45d0c84e45340a196";
    readonly LINEA: "0x4205e56a69a0130a9e0828d45d0c84e45340a196";
    readonly CYBER: "0x13ec6b98362e43add08f7cc4f6befd02fa52ee01";
    readonly MINT: "0x13ec6b98362e43add08f7cc4f6befd02fa52ee01";
    readonly MODE: "0x13ec6b98362e43add08f7cc4f6befd02fa52ee01";
    readonly SEPOLIA: "0xac49ee0c3bda5f851eac9a3184a21041e9afe379";
};
declare const NFTRewardSupportedChains: readonly ["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"];
declare const GuildSortType: readonly ["NEWEST", "VERIFIED", "FEATURED"];
declare const ContactType: readonly ["EMAIL", "TELEGRAM"];
declare const AuthMethod: {
    readonly EOA: "1";
    readonly KeyPair: "2";
    readonly EIP1271: "3";
};
declare const PARAMS_HEADER_NAME = "x-guild-params";
declare const SIG_HEADER_NAME = "x-guild-sig";
declare const AUTH_HEADER_NAME = "x-guild-auth";
declare const SERVICE_HEADER_NAME = "x-guild-service";
declare const PRIVILEGED_USER_ID_HEADER = "x-guild-privileged-user-id";
declare const CORRELATION_ID_HEADER_NAME = "x-correlation-id";
declare const SDK_VERSION_HEADER_NAME = "x-guild-sdk-version";
declare const SDK_PROJECT_NAME_HEADER_NAME = "x-guild-sdk-project-name";
declare const VISIBILITY_FILTERED_COUNT_HEADER_NAME = "x-guild-visibility-filtered";
declare const unimplementedRequirementTypes: readonly ["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"];
declare const UniswapV3PositionsChains: ["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"];
declare const UniswapV3PositionsAddresses: {
    readonly ETHEREUM: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
    readonly ARBITRUM: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
    readonly OPTIMISM: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
    readonly POLYGON: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
    readonly CELO: "0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A";
    readonly BSC: "0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613";
    readonly BASE_MAINNET: "0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1";
    readonly SEPOLIA: "0x1238536071E1c677A632429e3655c799b22cDA52";
    readonly BASE_SEPOLIA: "0x1238536071E1c677A632429e3655c799b22cDA52";
    readonly AVALANCHE: "0x655C406EBFa14EE2006250925e54ec43AD184f8B";
    readonly BLAST_MAINNET: "0xB218e4f7cF0533d4696fDfC419A0023D33345F28";
};
declare const UniswapV3FactoryAddresses: {
    readonly ETHEREUM: "0x1F98431c8aD98523631AE4a59f267346ea31F984";
    readonly SEPOLIA: "0x0227628f3F023bb0B980b67D528571c95c6DaC1c";
    readonly ARBITRUM: "0x1F98431c8aD98523631AE4a59f267346ea31F984";
    readonly OPTIMISM: "0x1F98431c8aD98523631AE4a59f267346ea31F984";
    readonly POLYGON: "0x1F98431c8aD98523631AE4a59f267346ea31F984";
    readonly BASE_MAINNET: "0x33128a8fC17869897dcE68Ed026d694621f6FDfD";
    readonly BASE_SEPOLIA: "0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24";
    readonly BSC: "0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7";
    readonly AVALANCHE: "0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD";
    readonly CELO: "0xAfE208a311B21f13EF87E33A90049fC17A7acDEc";
    readonly BLAST_MAINNET: "0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd";
};
declare const PaymentSupportedChains: ["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"];
declare const FeeCollectorContracts: {
    readonly ETHEREUM: "0xe4b4c6a7c6b6396032096c12adf46b7f14a70f4d";
    readonly POLYGON: "0xe4b4c6a7c6b6396032096c12adf46b7f14a70f4d";
    readonly OPTIMISM: "0xf7c2baa81feb6dd7bda0b3a03afbc1e13f955da5";
    readonly SEPOLIA: "0xc3563655d35397b77228c07a7f5301b0e0fa417d";
};

declare const consts_AUTH_HEADER_NAME: typeof AUTH_HEADER_NAME;
declare const consts_AuthMethod: typeof AuthMethod;
declare const consts_CORRELATION_ID_HEADER_NAME: typeof CORRELATION_ID_HEADER_NAME;
declare const consts_ContactType: typeof ContactType;
declare const consts_ErrorMessages: typeof ErrorMessages;
declare const consts_FeeCollectorContracts: typeof FeeCollectorContracts;
declare const consts_GuildPinAction: typeof GuildPinAction;
declare const consts_GuildSortType: typeof GuildSortType;
declare const consts_NFTRewardSupportedChains: typeof NFTRewardSupportedChains;
declare const consts_PARAMS_HEADER_NAME: typeof PARAMS_HEADER_NAME;
declare const consts_PRIVILEGED_USER_ID_HEADER: typeof PRIVILEGED_USER_ID_HEADER;
declare const consts_PaymentSupportedChains: typeof PaymentSupportedChains;
declare const consts_PinContractAddresses: typeof PinContractAddresses;
declare const consts_PinSupportedChains: typeof PinSupportedChains;
declare const consts_SDK_PROJECT_NAME_HEADER_NAME: typeof SDK_PROJECT_NAME_HEADER_NAME;
declare const consts_SDK_VERSION_HEADER_NAME: typeof SDK_VERSION_HEADER_NAME;
declare const consts_SERVICE_HEADER_NAME: typeof SERVICE_HEADER_NAME;
declare const consts_SIG_HEADER_NAME: typeof SIG_HEADER_NAME;
declare const consts_UniswapV3FactoryAddresses: typeof UniswapV3FactoryAddresses;
declare const consts_UniswapV3PositionsAddresses: typeof UniswapV3PositionsAddresses;
declare const consts_UniswapV3PositionsChains: typeof UniswapV3PositionsChains;
declare const consts_VISIBILITY_FILTERED_COUNT_HEADER_NAME: typeof VISIBILITY_FILTERED_COUNT_HEADER_NAME;
declare const consts_XPEventType: typeof XPEventType;
declare const consts_unimplementedRequirementTypes: typeof unimplementedRequirementTypes;
declare namespace consts {
  export { consts_AUTH_HEADER_NAME as AUTH_HEADER_NAME, consts_AuthMethod as AuthMethod, consts_CORRELATION_ID_HEADER_NAME as CORRELATION_ID_HEADER_NAME, Chain$1 as Chain, consts_ContactType as ContactType, consts_ErrorMessages as ErrorMessages, consts_FeeCollectorContracts as FeeCollectorContracts, consts_GuildPinAction as GuildPinAction, consts_GuildSortType as GuildSortType, Logic$1 as Logic, consts_NFTRewardSupportedChains as NFTRewardSupportedChains, consts_PARAMS_HEADER_NAME as PARAMS_HEADER_NAME, consts_PRIVILEGED_USER_ID_HEADER as PRIVILEGED_USER_ID_HEADER, consts_PaymentSupportedChains as PaymentSupportedChains, consts_PinContractAddresses as PinContractAddresses, consts_PinSupportedChains as PinSupportedChains, PlatformName$1 as PlatformName, consts_SDK_PROJECT_NAME_HEADER_NAME as SDK_PROJECT_NAME_HEADER_NAME, consts_SDK_VERSION_HEADER_NAME as SDK_VERSION_HEADER_NAME, consts_SERVICE_HEADER_NAME as SERVICE_HEADER_NAME, consts_SIG_HEADER_NAME as SIG_HEADER_NAME, SocialLinks$1 as SocialLinks, consts_UniswapV3FactoryAddresses as UniswapV3FactoryAddresses, consts_UniswapV3PositionsAddresses as UniswapV3PositionsAddresses, consts_UniswapV3PositionsChains as UniswapV3PositionsChains, consts_VISIBILITY_FILTERED_COUNT_HEADER_NAME as VISIBILITY_FILTERED_COUNT_HEADER_NAME, Visibility$1 as Visibility, consts_XPEventType as XPEventType, consts_unimplementedRequirementTypes as unimplementedRequirementTypes };
}

declare const JoinActionPayloadSchema: z.ZodObject<{
    guildId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    guildId: number;
}, {
    guildId: number;
}>;
declare const StatusUpdateActionPayloadSchema: z.ZodObject<{
    roleIds: z.ZodArray<z.ZodNumber, "many">;
    recheckAccess: z.ZodOptional<z.ZodBoolean>;
    updateMemberships: z.ZodOptional<z.ZodBoolean>;
    manageRewards: z.ZodOptional<z.ZodBoolean>;
    forceRewardActions: z.ZodOptional<z.ZodBoolean>;
    onlyForThisPlatform: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    roleIds: number[];
    recheckAccess?: boolean | undefined;
    updateMemberships?: boolean | undefined;
    manageRewards?: boolean | undefined;
    forceRewardActions?: boolean | undefined;
    onlyForThisPlatform?: boolean | undefined;
}, {
    roleIds: number[];
    recheckAccess?: boolean | undefined;
    updateMemberships?: boolean | undefined;
    manageRewards?: boolean | undefined;
    forceRewardActions?: boolean | undefined;
    onlyForThisPlatform?: boolean | undefined;
}>;

declare const AuthenticationParamsSchema: z.ZodIntersection<z.ZodObject<{
    addr: z.ZodUnion<[z.ZodString, z.ZodString]>;
    nonce: z.ZodString;
    msg: z.ZodString;
    ts: z.ZodString;
    hash: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    addr: string;
    nonce: string;
    msg: string;
    ts: string;
    hash?: string | undefined;
}, {
    addr: string;
    nonce: string;
    msg: string;
    ts: string;
    hash?: string | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    chainId: z.ZodString;
    method: z.ZodLiteral<"3">;
}, "strip", z.ZodTypeAny, {
    chainId: string;
    method: "3";
}, {
    chainId: string;
    method: "3";
}>, z.ZodObject<{
    method: z.ZodLiteral<"1">;
}, "strip", z.ZodTypeAny, {
    method: "1";
}, {
    method: "1";
}>, z.ZodObject<{
    method: z.ZodLiteral<"2">;
}, "strip", z.ZodTypeAny, {
    method: "2";
}, {
    method: "2";
}>]>>;
declare const AuthenticationSchema: z.ZodObject<{
    params: z.ZodIntersection<z.ZodObject<{
        addr: z.ZodUnion<[z.ZodString, z.ZodString]>;
        nonce: z.ZodString;
        msg: z.ZodString;
        ts: z.ZodString;
        hash: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    }, {
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        chainId: z.ZodString;
        method: z.ZodLiteral<"3">;
    }, "strip", z.ZodTypeAny, {
        chainId: string;
        method: "3";
    }, {
        chainId: string;
        method: "3";
    }>, z.ZodObject<{
        method: z.ZodLiteral<"1">;
    }, "strip", z.ZodTypeAny, {
        method: "1";
    }, {
        method: "1";
    }>, z.ZodObject<{
        method: z.ZodLiteral<"2">;
    }, "strip", z.ZodTypeAny, {
        method: "2";
    }, {
        method: "2";
    }>]>>;
    sig: z.ZodString;
}, "strip", z.ZodTypeAny, {
    params: ({
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    } & {
        chainId: string;
        method: "3";
    }) | ({
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    } & {
        method: "1";
    }) | ({
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    } & {
        method: "2";
    });
    sig: string;
}, {
    params: ({
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    } & {
        chainId: string;
        method: "3";
    }) | ({
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    } & {
        method: "1";
    }) | ({
        addr: string;
        nonce: string;
        msg: string;
        ts: string;
        hash?: string | undefined;
    } & {
        method: "2";
    });
    sig: string;
}>;

declare const GuildContactCreationPayloadSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"EMAIL">;
    contact: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL";
    contact: string;
}, {
    type: "EMAIL";
    contact: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"TELEGRAM">;
    contact: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "TELEGRAM";
    contact: string;
}, {
    type: "TELEGRAM";
    contact: string;
}>]>;
declare const GuildContactUpdatePayloadSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"EMAIL">;
    contact: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL";
    contact: string;
}, {
    type: "EMAIL";
    contact: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"TELEGRAM">;
    contact: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "TELEGRAM";
    contact: string;
}, {
    type: "TELEGRAM";
    contact: string;
}>]>;

declare const InputSourceSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
    roleId: z.ZodNumber;
    requirementId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "REQUIREMENT_AMOUNT";
    roleId: number;
    requirementId: number;
}, {
    type: "REQUIREMENT_AMOUNT";
    roleId: number;
    requirementId: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
    roleId: z.ZodNumber;
    requirementId: z.ZodNumber;
    value: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "REQUIREMENT_ACCESS";
    value: number;
    roleId: number;
    requirementId: number;
}, {
    type: "REQUIREMENT_ACCESS";
    roleId: number;
    requirementId: number;
    value?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"POINTS">;
    guildId: z.ZodNumber;
    guildPlatformId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    guildId: number;
    type: "POINTS";
    guildPlatformId: number;
}, {
    guildId: number;
    type: "POINTS";
    guildPlatformId: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"STATIC">;
    value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "STATIC";
    value: number;
}, {
    type: "STATIC";
    value: number;
}>]>;
type InputSource = z.input<typeof InputSourceSchema>;
declare const DynamicAmountSchema: z.ZodObject<{
    operation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"LINEAR">;
        params: z.ZodDefault<z.ZodObject<{
            multiplier: z.ZodDefault<z.ZodNumber>;
            addition: z.ZodDefault<z.ZodNumber>;
            shouldFloorResult: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            multiplier: number;
            addition: number;
            shouldFloorResult?: boolean | undefined;
        }, {
            multiplier?: number | undefined;
            addition?: number | undefined;
            shouldFloorResult?: boolean | undefined;
        }>>;
        input: z.ZodEffects<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
            roleId: z.ZodNumber;
            requirementId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }, {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
            roleId: z.ZodNumber;
            requirementId: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        }, {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"POINTS">;
            guildId: z.ZodNumber;
            guildPlatformId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }, {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STATIC">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "STATIC";
            value: number;
        }, {
            type: "STATIC";
            value: number;
        }>]>, z.ZodTuple<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
            roleId: z.ZodNumber;
            requirementId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }, {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
            roleId: z.ZodNumber;
            requirementId: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        }, {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"POINTS">;
            guildId: z.ZodNumber;
            guildPlatformId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }, {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STATIC">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "STATIC";
            value: number;
        }, {
            type: "STATIC";
            value: number;
        }>]>], null>]>, [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }], {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        } | [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]>;
    }, "strip", z.ZodTypeAny, {
        params: {
            multiplier: number;
            addition: number;
            shouldFloorResult?: boolean | undefined;
        };
        type: "LINEAR";
        input: [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }];
    }, {
        type: "LINEAR";
        input: {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        } | [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] | ({
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ({
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ({
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ({
            type: "STATIC";
            value: number;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        }) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            type: "STATIC";
            value: number;
        });
        params?: {
            multiplier?: number | undefined;
            addition?: number | undefined;
            shouldFloorResult?: boolean | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"SUM">;
        input: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
            roleId: z.ZodNumber;
            requirementId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }, {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
            roleId: z.ZodNumber;
            requirementId: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        }, {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"POINTS">;
            guildId: z.ZodNumber;
            guildPlatformId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }, {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STATIC">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "STATIC";
            value: number;
        }, {
            type: "STATIC";
            value: number;
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "SUM";
        input: ({
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        })[];
    }, {
        type: "SUM";
        input: ({
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        })[];
    }>]>;
}, "strip", z.ZodTypeAny, {
    operation: {
        params: {
            multiplier: number;
            addition: number;
            shouldFloorResult?: boolean | undefined;
        };
        type: "LINEAR";
        input: [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }];
    } | {
        type: "SUM";
        input: ({
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            value: number;
            roleId: number;
            requirementId: number;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        })[];
    };
}, {
    operation: {
        type: "LINEAR";
        input: {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        } | [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] | ({
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ({
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ({
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ({
            type: "STATIC";
            value: number;
        } & [{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }]) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        }) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        }) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        }) | ([{
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        }] & {
            type: "STATIC";
            value: number;
        });
        params?: {
            multiplier?: number | undefined;
            addition?: number | undefined;
            shouldFloorResult?: boolean | undefined;
        } | undefined;
    } | {
        type: "SUM";
        input: ({
            type: "REQUIREMENT_AMOUNT";
            roleId: number;
            requirementId: number;
        } | {
            type: "REQUIREMENT_ACCESS";
            roleId: number;
            requirementId: number;
            value?: number | undefined;
        } | {
            guildId: number;
            type: "POINTS";
            guildPlatformId: number;
        } | {
            type: "STATIC";
            value: number;
        })[];
    };
}>;
type DynamicAmountToCreate = z.input<typeof DynamicAmountSchema>;
type DynamicAmount = z.output<typeof DynamicAmountSchema> & {
    amount?: number;
};
type DynamicAmountOperations = DynamicAmount["operation"]["type"];

declare const FieldCreationPayloadSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    question: z.ZodString;
    isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<["SHORT_TEXT", "LONG_TEXT", "NUMBER"]>;
}, "strip", z.ZodTypeAny, {
    type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
    question: string;
    isRequired: boolean;
    id?: string | undefined;
}, {
    type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
    question: string;
    id?: string | undefined;
    isRequired?: boolean | undefined;
}>, z.ZodObject<{
    options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    id: z.ZodOptional<z.ZodString>;
    question: z.ZodString;
    isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<["SINGLE_CHOICE", "MULTIPLE_CHOICE"]>;
    allowOther: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    options: (string | number)[];
    type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
    question: string;
    isRequired: boolean;
    allowOther: boolean;
    id?: string | undefined;
}, {
    options: (string | number)[];
    type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
    question: string;
    id?: string | undefined;
    isRequired?: boolean | undefined;
    allowOther?: boolean | undefined;
}>, z.ZodObject<{
    options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    id: z.ZodOptional<z.ZodString>;
    question: z.ZodString;
    isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<["RATE"]>;
    worstLabel: z.ZodOptional<z.ZodString>;
    bestLabel: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    options: (string | number)[];
    type: "RATE";
    question: string;
    isRequired: boolean;
    id?: string | undefined;
    worstLabel?: string | undefined;
    bestLabel?: string | undefined;
}, {
    options: (string | number)[];
    type: "RATE";
    question: string;
    id?: string | undefined;
    isRequired?: boolean | undefined;
    worstLabel?: string | undefined;
    bestLabel?: string | undefined;
}>]>;
declare const FieldSchema: z.ZodIntersection<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    question: z.ZodString;
    isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<["SHORT_TEXT", "LONG_TEXT", "NUMBER"]>;
}, "strip", z.ZodTypeAny, {
    type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
    question: string;
    isRequired: boolean;
    id?: string | undefined;
}, {
    type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
    question: string;
    id?: string | undefined;
    isRequired?: boolean | undefined;
}>, z.ZodObject<{
    options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    id: z.ZodOptional<z.ZodString>;
    question: z.ZodString;
    isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<["SINGLE_CHOICE", "MULTIPLE_CHOICE"]>;
    allowOther: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    options: (string | number)[];
    type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
    question: string;
    isRequired: boolean;
    allowOther: boolean;
    id?: string | undefined;
}, {
    options: (string | number)[];
    type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
    question: string;
    id?: string | undefined;
    isRequired?: boolean | undefined;
    allowOther?: boolean | undefined;
}>, z.ZodObject<{
    options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    id: z.ZodOptional<z.ZodString>;
    question: z.ZodString;
    isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<["RATE"]>;
    worstLabel: z.ZodOptional<z.ZodString>;
    bestLabel: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    options: (string | number)[];
    type: "RATE";
    question: string;
    isRequired: boolean;
    id?: string | undefined;
    worstLabel?: string | undefined;
    bestLabel?: string | undefined;
}, {
    options: (string | number)[];
    type: "RATE";
    question: string;
    id?: string | undefined;
    isRequired?: boolean | undefined;
    worstLabel?: string | undefined;
    bestLabel?: string | undefined;
}>]>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
}, {
    id?: string | undefined;
}>>;
declare const FormCreationPayloadSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    isEditable: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    fields: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        question: z.ZodString;
        isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        type: z.ZodEnum<["SHORT_TEXT", "LONG_TEXT", "NUMBER"]>;
    }, "strip", z.ZodTypeAny, {
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
    }, {
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
    }>, z.ZodObject<{
        options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
        id: z.ZodOptional<z.ZodString>;
        question: z.ZodString;
        isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        type: z.ZodEnum<["SINGLE_CHOICE", "MULTIPLE_CHOICE"]>;
        allowOther: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        isRequired: boolean;
        allowOther: boolean;
        id?: string | undefined;
    }, {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        allowOther?: boolean | undefined;
    }>, z.ZodObject<{
        options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
        id: z.ZodOptional<z.ZodString>;
        question: z.ZodString;
        isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        type: z.ZodEnum<["RATE"]>;
        worstLabel: z.ZodOptional<z.ZodString>;
        bestLabel: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        options: (string | number)[];
        type: "RATE";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    }, {
        options: (string | number)[];
        type: "RATE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    isEditable: boolean;
    fields: ({
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
    } | {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        isRequired: boolean;
        allowOther: boolean;
        id?: string | undefined;
    } | {
        options: (string | number)[];
        type: "RATE";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    })[];
    description?: string | undefined;
}, {
    name: string;
    fields: ({
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
    } | {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        allowOther?: boolean | undefined;
    } | {
        options: (string | number)[];
        type: "RATE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    })[];
    description?: string | undefined;
    isEditable?: boolean | undefined;
}>;
declare const FormSchema: z.ZodNullable<z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    isEditable: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    id: z.ZodNumber;
    creatorUserId: z.ZodNullable<z.ZodNumber>;
    guildId: z.ZodNumber;
    fields: z.ZodArray<z.ZodIntersection<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        question: z.ZodString;
        isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        type: z.ZodEnum<["SHORT_TEXT", "LONG_TEXT", "NUMBER"]>;
    }, "strip", z.ZodTypeAny, {
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
    }, {
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
    }>, z.ZodObject<{
        options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
        id: z.ZodOptional<z.ZodString>;
        question: z.ZodString;
        isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        type: z.ZodEnum<["SINGLE_CHOICE", "MULTIPLE_CHOICE"]>;
        allowOther: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        isRequired: boolean;
        allowOther: boolean;
        id?: string | undefined;
    }, {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        allowOther?: boolean | undefined;
    }>, z.ZodObject<{
        options: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
        id: z.ZodOptional<z.ZodString>;
        question: z.ZodString;
        isRequired: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        type: z.ZodEnum<["RATE"]>;
        worstLabel: z.ZodOptional<z.ZodString>;
        bestLabel: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        options: (string | number)[];
        type: "RATE";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    }, {
        options: (string | number)[];
        type: "RATE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    }>]>, z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
    }, {
        id?: string | undefined;
    }>>, "many">;
    submissionCount: z.ZodOptional<z.ZodNumber>;
    createdAt: z.ZodUnion<[z.ZodDate, z.ZodString]>;
    updatedAt: z.ZodUnion<[z.ZodDate, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    guildId: number;
    id: number;
    name: string;
    isEditable: boolean;
    fields: (({
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
    } | {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        isRequired: boolean;
        allowOther: boolean;
        id?: string | undefined;
    } | {
        options: (string | number)[];
        type: "RATE";
        question: string;
        isRequired: boolean;
        id?: string | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    }) & {
        id?: string | undefined;
    })[];
    creatorUserId: number | null;
    createdAt: (string | Date) & (string | Date | undefined);
    updatedAt: (string | Date) & (string | Date | undefined);
    description?: string | undefined;
    submissionCount?: number | undefined;
}, {
    guildId: number;
    id: number;
    name: string;
    fields: (({
        type: "SHORT_TEXT" | "LONG_TEXT" | "NUMBER";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
    } | {
        options: (string | number)[];
        type: "SINGLE_CHOICE" | "MULTIPLE_CHOICE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        allowOther?: boolean | undefined;
    } | {
        options: (string | number)[];
        type: "RATE";
        question: string;
        id?: string | undefined;
        isRequired?: boolean | undefined;
        worstLabel?: string | undefined;
        bestLabel?: string | undefined;
    }) & {
        id?: string | undefined;
    })[];
    creatorUserId: number | null;
    createdAt: (string | Date) & (string | Date | undefined);
    updatedAt: (string | Date) & (string | Date | undefined);
    description?: string | undefined;
    isEditable?: boolean | undefined;
    submissionCount?: number | undefined;
}>>;
declare const SubmissionCreationAnswerSchema: z.ZodObject<{
    fieldId: z.ZodString;
    value: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>>>, string | number | null | undefined, string | number | (string | number)[] | null | undefined>;
}, "strip", z.ZodTypeAny, {
    fieldId: string;
    value?: string | number | null | undefined;
}, {
    fieldId: string;
    value?: string | number | (string | number)[] | null | undefined;
}>;
declare const SubmissionAnswerSchema: z.ZodObject<{
    fieldId: z.ZodString;
    userSubmissionId: z.ZodNumber;
    value: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>>, string | number | undefined, string | number | null | undefined>;
}, "strip", z.ZodTypeAny, {
    fieldId: string;
    userSubmissionId: number;
    value?: string | number | undefined;
}, {
    fieldId: string;
    userSubmissionId: number;
    value?: string | number | null | undefined;
}>;
declare const UserSubmissionCreationSchema: z.ZodObject<{
    submissionAnswers: z.ZodArray<z.ZodObject<{
        fieldId: z.ZodString;
        value: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>>>, string | number | null | undefined, string | number | (string | number)[] | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        fieldId: string;
        value?: string | number | null | undefined;
    }, {
        fieldId: string;
        value?: string | number | (string | number)[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    submissionAnswers: {
        fieldId: string;
        value?: string | number | null | undefined;
    }[];
}, {
    submissionAnswers: {
        fieldId: string;
        value?: string | number | (string | number)[] | null | undefined;
    }[];
}>;
declare const UserSubmissionSchema: z.ZodNullable<z.ZodObject<{
    id: z.ZodNumber;
    formId: z.ZodNumber;
    createdAt: z.ZodUnion<[z.ZodDate, z.ZodString]>;
    submissionAnswers: z.ZodArray<z.ZodObject<{
        fieldId: z.ZodString;
        userSubmissionId: z.ZodNumber;
        value: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>>, string | number | undefined, string | number | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        fieldId: string;
        userSubmissionId: number;
        value?: string | number | undefined;
    }, {
        fieldId: string;
        userSubmissionId: number;
        value?: string | number | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    createdAt: (string | Date) & (string | Date | undefined);
    submissionAnswers: {
        fieldId: string;
        userSubmissionId: number;
        value?: string | number | undefined;
    }[];
    formId: number;
}, {
    id: number;
    createdAt: (string | Date) & (string | Date | undefined);
    submissionAnswers: {
        fieldId: string;
        userSubmissionId: number;
        value?: string | number | null | undefined;
    }[];
    formId: number;
}>>;
declare const UserSubmissionsSchema: z.ZodDefault<z.ZodArray<z.ZodObject<{
    userId: z.ZodNumber;
    formId: z.ZodNumber;
    platformUsers: z.ZodDefault<z.ZodArray<z.ZodObject<{
        platformId: z.ZodNumber;
        platformUserId: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        platformId: number;
        platformUserId: string;
        username: string | null;
    }, {
        platformId: number;
        platformUserId: string;
        username: string | null;
    }>, "many">>;
    addresses: z.ZodArray<z.ZodString, "many">;
    submittedAt: z.ZodDate;
    submissionAnswers: z.ZodArray<z.ZodObject<{
        fieldId: z.ZodString;
        value: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>>>, string | number | null | undefined, string | number | (string | number)[] | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        fieldId: string;
        value?: string | number | null | undefined;
    }, {
        fieldId: string;
        value?: string | number | (string | number)[] | null | undefined;
    }>, "many">;
    isShared: z.ZodNullable<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    submissionAnswers: {
        fieldId: string;
        value?: string | number | null | undefined;
    }[];
    formId: number;
    userId: number;
    platformUsers: {
        platformId: number;
        platformUserId: string;
        username: string | null;
    }[];
    addresses: string[];
    submittedAt: Date;
    isShared: boolean | null;
}, {
    submissionAnswers: {
        fieldId: string;
        value?: string | number | (string | number)[] | null | undefined;
    }[];
    formId: number;
    userId: number;
    addresses: string[];
    submittedAt: Date;
    isShared: boolean | null;
    platformUsers?: {
        platformId: number;
        platformUserId: string;
        username: string | null;
    }[] | undefined;
}>, "many">>;

declare const GuildCreationPayloadSchema: z.ZodEffects<z.ZodIntersection<z.ZodObject<{
    name: z.ZodString;
    urlName: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    imageUrl: z.ZodOptional<z.ZodString>;
    showMembers: z.ZodOptional<z.ZodBoolean>;
    hideFromExplorer: z.ZodOptional<z.ZodBoolean>;
    socialLinks: z.ZodOptional<z.ZodRecord<z.ZodEnum<["TWITTER", "LENS", "YOUTUBE", "SPOTIFY", "MIRROR", "MEDIUM", "SUBSTACK", "SNAPSHOT", "SOUND", "GITHUB", "WARPCAST", "WEBSITE"]>, z.ZodString>>;
    onboardingComplete: z.ZodOptional<z.ZodBoolean>;
    theme: z.ZodOptional<z.ZodObject<{
        mode: z.ZodOptional<z.ZodEnum<["DARK", "LIGHT"]>>;
        color: z.ZodOptional<z.ZodString>;
        backgroundImage: z.ZodOptional<z.ZodString>;
        backgroundCss: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    }, {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    urlName: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
}, {
    name: string;
    urlName: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    guildPlatforms: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodIntersection<z.ZodDiscriminatedUnion<"platformName", [z.ZodObject<{
        platformName: z.ZodLiteral<"DISCORD">;
        platformGuildData: z.ZodDefault<z.ZodObject<{
            inviteChannel: z.ZodOptional<z.ZodString>;
            invite: z.ZodOptional<z.ZodString>;
            joinButton: z.ZodOptional<z.ZodBoolean>;
            needCaptcha: z.ZodOptional<z.ZodBoolean>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        }, {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        platformName: "DISCORD";
        platformGuildData: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        };
    }, {
        platformName: "DISCORD";
        platformGuildData?: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"TELEGRAM">;
    }, "strip", z.ZodTypeAny, {
        platformName: "TELEGRAM";
    }, {
        platformName: "TELEGRAM";
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GITHUB">;
        platformGuildData: z.ZodDefault<z.ZodObject<{
            platformUserId: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            platformUserId?: number | undefined;
        }, {
            platformUserId?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GITHUB";
        platformGuildData: {
            platformUserId?: number | undefined;
        };
    }, {
        platformName: "GITHUB";
        platformGuildData?: {
            platformUserId?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GOOGLE">;
        platformGuildData: z.ZodObject<{
            role: z.ZodDefault<z.ZodOptional<z.ZodEnum<["reader", "commenter", "writer"]>>>;
            mimeType: z.ZodString;
            iconLink: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            role: "reader" | "commenter" | "writer";
            mimeType: string;
            iconLink: string;
        }, {
            mimeType: string;
            iconLink: string;
            role?: "reader" | "commenter" | "writer" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GOOGLE";
        platformGuildData: {
            role: "reader" | "commenter" | "writer";
            mimeType: string;
            iconLink: string;
        };
    }, {
        platformName: "GOOGLE";
        platformGuildData: {
            mimeType: string;
            iconLink: string;
            role?: "reader" | "commenter" | "writer" | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"CONTRACT_CALL">;
        platformGuildData: z.ZodObject<{
            chain: z.ZodEnum<["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"]>;
            contractAddress: z.ZodString;
            function: z.ZodEnum<["function claim(address payToken, address receiver, bytes calldata signature) payable", "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable"]>;
            argsToSign: z.ZodArray<z.ZodString, "many">;
            name: z.ZodOptional<z.ZodString>;
            symbol: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        }, {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    }, {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"UNIQUE_TEXT">;
        platformGuildData: z.ZodObject<{
            texts: z.ZodArray<z.ZodString, "many">;
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"TEXT">;
        platformGuildData: z.ZodObject<{
            text: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GUILD_PIN">;
        platformGuildData: z.ZodObject<{
            pinChain: z.ZodEnum<["BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL", ...("BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL")[]]>;
            contractAddress: z.ZodUnion<[z.ZodString, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        }, {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    }, {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"POLYGON_ID">;
    }, "strip", z.ZodTypeAny, {
        platformName: "POLYGON_ID";
    }, {
        platformName: "POLYGON_ID";
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"POINTS">;
        platformGuildData: z.ZodDefault<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        platformName: "POINTS";
        platformGuildData: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "POINTS";
        platformGuildData?: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"POAP">;
        platformGuildData: z.ZodObject<{
            fancyId: z.ZodString;
            eventId: z.ZodNumber;
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"FORM">;
        platformGuildData: z.ZodObject<{
            formId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            formId: number;
        }, {
            formId: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    }, {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GATHER_TOWN">;
        platformGuildData: z.ZodObject<{
            name: z.ZodString;
            gatherSpaceId: z.ZodString;
            gatherApiKey: z.ZodString;
            gatherAffiliation: z.ZodString;
            gatherRole: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        }, {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    }, {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"ERC20">;
        platformGuildData: z.ZodObject<{
            poolId: z.ZodNumber;
            chain: z.ZodEnum<["BASE_MAINNET", "BSC", "MANTLE", "OPTIMISM", "POLYGON", "SEPOLIA"]>;
            contractAddress: z.ZodString;
            name: z.ZodString;
            imageUrl: z.ZodString;
            description: z.ZodString;
            tokenAddress: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        }, {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }, {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }>]>, z.ZodObject<{
        platformGuildId: z.ZodEffects<z.ZodString, string, string>;
    }, "strip", z.ZodTypeAny, {
        platformGuildId: string;
    }, {
        platformGuildId: string;
    }>>, z.ZodObject<{
        roleIds: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        roleIds?: number[] | undefined;
    }, {
        roleIds?: number[] | undefined;
    }>>, "many">>;
    roles: z.ZodArray<z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
        logic: z.ZodOptional<z.ZodEnum<["AND", "OR", "ANY_OF"]>>;
        visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
        anyOfNum: z.ZodOptional<z.ZodNumber>;
        hideFromEyes: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | undefined;
        imageUrl?: string | undefined;
        logic?: "AND" | "OR" | "ANY_OF" | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        anyOfNum?: number | undefined;
        hideFromEyes?: boolean | undefined;
    }, {
        name: string;
        description?: string | undefined;
        imageUrl?: string | undefined;
        logic?: "AND" | "OR" | "ANY_OF" | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        anyOfNum?: number | undefined;
        hideFromEyes?: boolean | undefined;
    }>, z.ZodObject<{
        requirements: z.ZodArray<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            isNegated: z.ZodDefault<z.ZodBoolean>;
            visibility: z.ZodDefault<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
            visibilityRoleId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            isNegated: boolean;
            visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
            visibilityRoleId?: number | null | undefined;
        }, {
            isNegated?: boolean | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            visibilityRoleId?: number | null | undefined;
        }>, z.ZodObject<{
            chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodString]>>>;
        }, "strip", z.ZodTypeAny, {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        }, {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        }>>, z.ZodIntersection<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"FREE">;
            data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        }, "strip", z.ZodTypeAny, {
            type: "FREE";
            data: {};
        }, {
            type: "FREE";
            data?: {} | undefined;
        }>, ...(z.ZodObject<{
            type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
            chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
            data: z.ZodObject<{
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
            }, {
                maxAmount: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        }, {
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
            chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            data: z.ZodObject<{
                txCount: z.ZodNumber;
                maxAmount: z.ZodOptional<z.ZodNumber>;
                minAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            }, {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        }, {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
            chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            data: z.ZodObject<{
                txValue: z.ZodNumber;
                maxAmount: z.ZodOptional<z.ZodNumber>;
                minAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            }, {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        }, {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"ALLOWLIST">;
            data: z.ZodDefault<z.ZodObject<{
                addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
                fileId: z.ZodOptional<z.ZodString>;
                hideAllowlist: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            }, {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "ALLOWLIST";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        }, {
            type: "ALLOWLIST";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
            data: z.ZodDefault<z.ZodObject<{
                addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
                hideAllowlist: z.ZodOptional<z.ZodBoolean>;
                fileId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                addresses: string[];
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            }, {
                addresses?: string[] | undefined;
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "ALLOWLIST_EMAIL";
            data: {
                addresses: string[];
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            };
        }, {
            type: "ALLOWLIST_EMAIL";
            data?: {
                addresses?: string[] | undefined;
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"CAPTCHA">;
            data: z.ZodDefault<z.ZodObject<{
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxAmount?: number | undefined;
            }, {
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "CAPTCHA";
            data: {
                maxAmount?: number | undefined;
            };
        }, {
            type: "CAPTCHA";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"COIN">;
            chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                maxAmount?: number | undefined;
            }, {
                minAmount: number;
                maxAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        }, {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        }> | z.ZodObject<{
            type: z.ZodLiteral<"CONTRACT">;
            data: z.ZodObject<{
                id: z.ZodString;
                resultIndex: z.ZodOptional<z.ZodNumber>;
                params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
                resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
                expected: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            }, {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            }>;
            address: z.ZodString;
            chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
        }, "strip", z.ZodTypeAny, {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        }, {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        }> | z.ZodObject<{
            type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
            chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
            data: z.ZodDefault<z.ZodObject<{
                timestamps: z.ZodDefault<z.ZodObject<{
                    minAmount: z.ZodOptional<z.ZodNumber>;
                    maxAmount: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
            }, {
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            data: {
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        }, {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            data?: {
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
            chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            data: z.ZodObject<{
                txCount: z.ZodNumber;
                maxAmount: z.ZodOptional<z.ZodNumber>;
                minAmount: z.ZodOptional<z.ZodNumber>;
                timestamps: z.ZodDefault<z.ZodObject<{
                    minAmount: z.ZodOptional<z.ZodNumber>;
                    maxAmount: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                txCount: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            }, {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        }, {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
            chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            data: z.ZodObject<{
                txValue: z.ZodNumber;
                maxAmount: z.ZodOptional<z.ZodNumber>;
                minAmount: z.ZodOptional<z.ZodNumber>;
                timestamps: z.ZodDefault<z.ZodObject<{
                    minAmount: z.ZodOptional<z.ZodNumber>;
                    maxAmount: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                txValue: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            }, {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        }, {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"DISCORD_ROLE">;
            data: z.ZodObject<{
                serverId: z.ZodString;
                roleId: z.ZodString;
                serverName: z.ZodOptional<z.ZodString>;
                roleName: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            }, {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        }, {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
            data: z.ZodObject<{
                memberSince: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                memberSince: number;
            }, {
                memberSince: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        }, {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
            data: z.ZodObject<{
                serverId: z.ZodString;
                serverName: z.ZodOptional<z.ZodString>;
                memberSince: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            }, {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        }, {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
            chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
            data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                schemaId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                schemaId: string;
            }, {
                schemaId: string;
            }>, z.ZodUnion<[z.ZodObject<{
                key: z.ZodString;
                val: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                key: string;
                val: string;
            }, {
                key: string;
                val: string;
            }>, z.ZodEffects<z.ZodObject<{
                key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
                val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
            }, "strip", z.ZodTypeAny, {
                key?: "" | undefined;
                val?: "" | undefined;
            }, {
                key?: "" | undefined;
                val?: "" | undefined;
            }>, {
                key: undefined;
                val: undefined;
            }, {
                key?: "" | undefined;
                val?: "" | undefined;
            }>]>>, z.ZodObject<{
                attester: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                attester: string;
            }, {
                attester: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                attester: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                attester: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        }, {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        }> | z.ZodObject<{
            chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
            type: z.ZodLiteral<"EAS_ATTEST">;
            data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
                schemaId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                schemaId: string;
            }, {
                schemaId: string;
            }>, z.ZodUnion<[z.ZodObject<{
                key: z.ZodString;
                val: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                key: string;
                val: string;
            }, {
                key: string;
                val: string;
            }>, z.ZodEffects<z.ZodObject<{
                key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
                val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
            }, "strip", z.ZodTypeAny, {
                key?: "" | undefined;
                val?: "" | undefined;
            }, {
                key?: "" | undefined;
                val?: "" | undefined;
            }>, {
                key: undefined;
                val: undefined;
            }, {
                key?: "" | undefined;
                val?: "" | undefined;
            }>]>>, z.ZodObject<{
                recipient: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                recipient: string;
            }, {
                recipient: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "EAS_ATTEST";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                recipient: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                recipient: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        }, {
            type: "EAS_ATTEST";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"EMAIL_DOMAIN">;
            data: z.ZodObject<{
                domain: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                domain: string;
            }, {
                domain: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        }, {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"EMAIL_VERIFIED">;
            data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        }, "strip", z.ZodTypeAny, {
            type: "EMAIL_VERIFIED";
            data: {};
        }, {
            type: "EMAIL_VERIFIED";
            data?: {} | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
            data: z.ZodUnion<[z.ZodObject<{
                hash: z.ZodString;
                url: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                url?: undefined;
            }, {
                hash: string;
                url?: undefined;
            }>, z.ZodObject<{
                url: z.ZodString;
                hash: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                url: string;
                hash?: undefined;
            }, {
                url: string;
                hash?: undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        }, {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
            data: z.ZodObject<{
                id: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: number;
            }, {
                id: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        }, {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
            data: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        }, {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
            data: z.ZodObject<{
                min: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                min: number;
            }, {
                min: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        }, {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"FARCASTER_PROFILE">;
            data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        }, "strip", z.ZodTypeAny, {
            type: "FARCASTER_PROFILE";
            data: {};
        }, {
            type: "FARCASTER_PROFILE";
            data?: {} | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"FORM_SUBMISSION">;
            data: z.ZodObject<{
                id: z.ZodNumber;
                guildId: z.ZodNumber;
                answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    fieldId: z.ZodString;
                    value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    value: string | number;
                    fieldId: string;
                }, {
                    value: string | number;
                    fieldId: string;
                }>, z.ZodIntersection<z.ZodObject<{
                    fieldId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    fieldId: string;
                }, {
                    fieldId: string;
                }>, z.ZodEffects<z.ZodObject<{
                    minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
                    maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
                }, "strip", z.ZodTypeAny, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }, {
                    minAmount?: string | number | undefined;
                    maxAmount?: string | number | undefined;
                }>, {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }, {
                    minAmount?: string | number | undefined;
                    maxAmount?: string | number | undefined;
                }>>, z.ZodIntersection<z.ZodObject<{
                    fieldId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    fieldId: string;
                }, {
                    fieldId: string;
                }>, z.ZodEffects<z.ZodObject<{
                    acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }, {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }>, {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }, {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }>>]>, "many">>;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            }, {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: string | number | undefined;
                    maxAmount?: string | number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        }, {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: string | number | undefined;
                    maxAmount?: string | number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"FORM_APPROVAL">;
            data: z.ZodDefault<z.ZodObject<{
                addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
                fileId: z.ZodOptional<z.ZodString>;
                hideAllowlist: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            }, {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "FORM_APPROVAL";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        }, {
            type: "FORM_APPROVAL";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"FUEL_BALANCE">;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                maxAmount?: number | undefined;
            }, {
                minAmount: number;
                maxAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        }, {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
            data: z.ZodObject<{
                id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }, {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
            data: z.ZodObject<{
                galaxyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                galaxyId: string;
            }, {
                galaxyId: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        }, {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GITCOIN_PASS">;
            data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        }, "strip", z.ZodTypeAny, {
            type: "GITCOIN_PASS";
            data: {};
        }, {
            type: "GITCOIN_PASS";
            data?: {} | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GITCOIN_STAMP">;
            data: z.ZodDefault<z.ZodObject<{
                stamp: z.ZodOptional<z.ZodString>;
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
                credType: z.ZodOptional<z.ZodString>;
                issuer: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            }, {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "GITCOIN_STAMP";
            data: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            };
        }, {
            type: "GITCOIN_STAMP";
            data?: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GITCOIN_SCORE">;
            data: z.ZodObject<{
                id: z.ZodString;
                score: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: string;
                score: number;
            }, {
                id: string;
                score: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        }, {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GITHUB_STARRING">;
            data: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        }, {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
            data: z.ZodDefault<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }, {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
            data: z.ZodObject<{
                id: z.ZodNumber;
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }, {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GUILD_MEMBER">;
            data: z.ZodObject<{
                guildId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
            }, {
                guildId: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        }, {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GUILD_ROLE">;
            data: z.ZodObject<{
                guildId: z.ZodNumber;
                roleId: z.ZodNumber;
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }, {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
            data: z.ZodObject<{
                guildId: z.ZodNumber;
                roleId: z.ZodNumber;
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }, {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GUILD_ADMIN">;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
            }, {
                minAmount: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        }, {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GUILD_USER_SINCE">;
            data: z.ZodObject<{
                creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
            }, "strip", z.ZodTypeAny, {
                creationDate: Date;
            }, {
                creationDate: (string | number | Date) & (string | number | Date | undefined);
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: Date;
            };
        }, {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: (string | number | Date) & (string | number | Date | undefined);
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GUILD_MINGUILDS">;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
            }, {
                minAmount: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        }, {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"GUILD_SNAPSHOT">;
            data: z.ZodDefault<z.ZodObject<{
                snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    key: string;
                }, {
                    value: number;
                    key: string;
                }>, "many">>;
                fileId: z.ZodOptional<z.ZodString>;
                isHidden: z.ZodDefault<z.ZodBoolean>;
                guildPlatformId: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                snapshot: {
                    value: number;
                    key: string;
                }[];
                isHidden: boolean;
                fileId?: string | undefined;
                guildPlatformId?: number | undefined;
            }, {
                snapshot?: {
                    value: number;
                    key: string;
                }[] | undefined;
                fileId?: string | undefined;
                isHidden?: boolean | undefined;
                guildPlatformId?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "GUILD_SNAPSHOT";
            data: {
                snapshot: {
                    value: number;
                    key: string;
                }[];
                isHidden: boolean;
                fileId?: string | undefined;
                guildPlatformId?: number | undefined;
            };
        }, {
            type: "GUILD_SNAPSHOT";
            data?: {
                snapshot?: {
                    value: number;
                    key: string;
                }[] | undefined;
                fileId?: string | undefined;
                isHidden?: boolean | undefined;
                guildPlatformId?: number | undefined;
            } | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"LENS_PROFILE">;
            data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        }, "strip", z.ZodTypeAny, {
            type: "LENS_PROFILE";
            data: {};
        }, {
            type: "LENS_PROFILE";
            data?: {} | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
            data: z.ZodObject<{
                min: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                min: number;
            }, {
                min: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        }, {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
            data: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        }, {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"LENS_REACT">;
            data: z.ZodObject<{
                id: z.ZodString;
                reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            }, {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        }, {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"LENS_ACTION">;
            data: z.ZodObject<{
                id: z.ZodString;
                action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
                publishedOn: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            }, {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        }, {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"PAYMENT">;
            data: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
            chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
            address: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        }, {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        }> | z.ZodObject<{
            type: z.ZodEnum<["POAP", "GITPOAP"]>;
            data: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        }, {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
            data: z.ZodIntersection<z.ZodObject<{
                guildId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
            }, {
                guildId: number;
            }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                maxAmount?: undefined;
            }, {
                minAmount: number;
                maxAmount?: undefined;
            }>, z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount?: undefined;
            }, {
                maxAmount: number;
                minAmount?: undefined;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>, {
                minAmount: number;
                maxAmount: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        }, {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        }> | z.ZodObject<{
            type: z.ZodLiteral<"POINTS_AMOUNT">;
            data: z.ZodIntersection<z.ZodObject<{
                guildPlatformId: z.ZodNumber;
                guildId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                guildPlatformId: number;
            }, {
                guildId: number;
                guildPlatformId: number;
            }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                maxAmount?: undefined;
            }, {
                minAmount: number;
                maxAmount?: undefined;
            }>, z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount?: undefined;
            }, {
                maxAmount: number;
                minAmount?: undefined;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>, {
                minAmount: number;
                maxAmount: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        }, {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        }> | z.ZodObject<{
            type: z.ZodLiteral<"POINTS_RANK">;
            data: z.ZodIntersection<z.ZodObject<{
                guildPlatformId: z.ZodNumber;
                guildId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                guildPlatformId: number;
            }, {
                guildId: number;
                guildPlatformId: number;
            }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                maxAmount?: undefined;
            }, {
                minAmount: number;
                maxAmount?: undefined;
            }>, z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount?: undefined;
            }, {
                maxAmount: number;
                minAmount?: undefined;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>, {
                minAmount: number;
                maxAmount: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        }, {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        }> | z.ZodObject<{
            type: z.ZodLiteral<"POLYGON_ID_QUERY">;
            data: z.ZodObject<{
                query: z.ZodArray<z.ZodAny, "many">;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                query: any[];
                maxAmount?: number | undefined;
            }, {
                query: any[];
                maxAmount?: number | undefined;
            }>;
            chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        }, "strip", z.ZodTypeAny, {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        }, {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        }> | z.ZodObject<{
            type: z.ZodLiteral<"POLYGON_ID_BASIC">;
            data: z.ZodDefault<z.ZodObject<{
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxAmount?: number | undefined;
            }, {
                maxAmount?: number | undefined;
            }>>;
            chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        }, "strip", z.ZodTypeAny, {
            type: "POLYGON_ID_BASIC";
            data: {
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        }, {
            type: "POLYGON_ID_BASIC";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
            data: z.ZodObject<{
                space: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                space: string;
            }, {
                space: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        }, {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
            data: z.ZodObject<{
                space: z.ZodString;
                since: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                space: string;
                since: number;
            }, {
                space: string;
                since: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        }, {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
            data: z.ZodObject<{
                since: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                since: number;
            }, {
                since: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        }, {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
            data: z.ZodObject<{
                minRatio: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minRatio: number;
            }, {
                minRatio: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        }, {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"SNAPSHOT_VOTES">;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
                space: z.ZodOptional<z.ZodString>;
                proposal: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            }, {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        }, {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
                space: z.ZodOptional<z.ZodString>;
                state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
                successfulOnly: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            }, {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        }, {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
            chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
            data: z.ZodObject<{
                block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
                strategies: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    params: z.ZodOptional<z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    params?: any;
                }, {
                    name: string;
                    params?: any;
                }>, "many">;
                space: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            }, {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        }, {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        }> | z.ZodObject<{
            type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
            data: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        }, {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
            }, {
                minAmount: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        }, {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        }> | z.ZodObject<{
            type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
            data: z.ZodObject<{
                minAmount: z.ZodNumber;
                fromNow: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                fromNow?: boolean | undefined;
            }, {
                minAmount: number;
                fromNow?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        }, {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
            data: z.ZodObject<{
                id: z.ZodEnum<["any", "blue", "business", "government"]>;
            }, "strip", z.ZodTypeAny, {
                id: "any" | "blue" | "business" | "government";
            }, {
                id: "any" | "blue" | "business" | "government";
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        }, {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
            data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        }, "strip", z.ZodTypeAny, {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data: {};
        }, {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data?: {} | undefined;
        }> | z.ZodObject<{
            type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
            data: z.ZodObject<{
                id: z.ZodString;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                maxAmount?: number | undefined;
            }, {
                id: string;
                maxAmount?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        }, {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        }> | z.ZodObject<{
            type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
            data: z.ZodObject<{
                app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
            }, "strip", z.ZodTypeAny, {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            }, {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        }, {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        }>)[], z.ZodObject<{
            type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
            data: z.ZodIntersection<z.ZodObject<{
                token0: z.ZodString;
                token1: z.ZodString;
                baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
                countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
                defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
            }, "strip", z.ZodTypeAny, {
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            }, {
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount: number;
                maxAmount?: undefined;
            }, {
                minAmount: number;
                maxAmount?: undefined;
            }>, z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount?: undefined;
            }, {
                maxAmount: number;
                minAmount?: undefined;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodNumber;
                maxAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>, {
                maxAmount: number;
                minAmount: number;
            }, {
                maxAmount: number;
                minAmount: number;
            }>]>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodUndefined;
                maxAmount: z.ZodUndefined;
            }, "strip", z.ZodTypeAny, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>, {
                minAmount: number;
                maxAmount: undefined;
            }, {
                minAmount?: undefined;
                maxAmount?: undefined;
            }>]>>;
            chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
        }, "strip", z.ZodTypeAny, {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        }, {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
            data: z.ZodObject<{
                verificationLevel: z.ZodEnum<["device", "orb"]>;
            }, "strip", z.ZodTypeAny, {
                verificationLevel: "device" | "orb";
            }, {
                verificationLevel: "device" | "orb";
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        }, {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        }>]>, z.ZodObject<{
            type: z.ZodEnum<["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"]>;
            data: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }, {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }>]>, z.ZodObject<{
            data: z.ZodOptional<z.ZodObject<{
                customName: z.ZodOptional<z.ZodString>;
                customImage: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                customName?: string | undefined;
                customImage?: string | undefined;
            }, {
                customName?: string | undefined;
                customImage?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }, {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }>>>, "many">;
        rolePlatforms: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodObject<{
            platformRoleId: z.ZodOptional<z.ZodString>;
            visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
            platformRoleData: z.ZodOptional<z.ZodOptional<z.ZodAny>>;
            dynamicAmount: z.ZodOptional<z.ZodOptional<z.ZodObject<{
                operation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"LINEAR">;
                    params: z.ZodDefault<z.ZodObject<{
                        multiplier: z.ZodDefault<z.ZodNumber>;
                        addition: z.ZodDefault<z.ZodNumber>;
                        shouldFloorResult: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        multiplier: number;
                        addition: number;
                        shouldFloorResult?: boolean | undefined;
                    }, {
                        multiplier?: number | undefined;
                        addition?: number | undefined;
                        shouldFloorResult?: boolean | undefined;
                    }>>;
                    input: z.ZodEffects<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                        roleId: z.ZodNumber;
                        requirementId: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }, {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                        roleId: z.ZodNumber;
                        requirementId: z.ZodNumber;
                        value: z.ZodDefault<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    }, {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"POINTS">;
                        guildId: z.ZodNumber;
                        guildPlatformId: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }, {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"STATIC">;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: "STATIC";
                        value: number;
                    }, {
                        type: "STATIC";
                        value: number;
                    }>]>, z.ZodTuple<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                        roleId: z.ZodNumber;
                        requirementId: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }, {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                        roleId: z.ZodNumber;
                        requirementId: z.ZodNumber;
                        value: z.ZodDefault<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    }, {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"POINTS">;
                        guildId: z.ZodNumber;
                        guildPlatformId: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }, {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"STATIC">;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: "STATIC";
                        value: number;
                    }, {
                        type: "STATIC";
                        value: number;
                    }>]>], null>]>, [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }], {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    } | [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]>;
                }, "strip", z.ZodTypeAny, {
                    params: {
                        multiplier: number;
                        addition: number;
                        shouldFloorResult?: boolean | undefined;
                    };
                    type: "LINEAR";
                    input: [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }];
                }, {
                    type: "LINEAR";
                    input: {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    } | [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] | ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "STATIC";
                        value: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "STATIC";
                        value: number;
                    });
                    params?: {
                        multiplier?: number | undefined;
                        addition?: number | undefined;
                        shouldFloorResult?: boolean | undefined;
                    } | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"SUM">;
                    input: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                        roleId: z.ZodNumber;
                        requirementId: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }, {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                        roleId: z.ZodNumber;
                        requirementId: z.ZodNumber;
                        value: z.ZodDefault<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    }, {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"POINTS">;
                        guildId: z.ZodNumber;
                        guildPlatformId: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }, {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"STATIC">;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: "STATIC";
                        value: number;
                    }, {
                        type: "STATIC";
                        value: number;
                    }>]>, "many">;
                }, "strip", z.ZodTypeAny, {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                }, {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                }>]>;
            }, "strip", z.ZodTypeAny, {
                operation: {
                    params: {
                        multiplier: number;
                        addition: number;
                        shouldFloorResult?: boolean | undefined;
                    };
                    type: "LINEAR";
                    input: [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }];
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            }, {
                operation: {
                    type: "LINEAR";
                    input: {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    } | [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] | ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "STATIC";
                        value: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "STATIC";
                        value: number;
                    });
                    params?: {
                        multiplier?: number | undefined;
                        addition?: number | undefined;
                        shouldFloorResult?: boolean | undefined;
                    } | undefined;
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            }>>>;
        }, "strip", z.ZodTypeAny, {
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    params: {
                        multiplier: number;
                        addition: number;
                        shouldFloorResult?: boolean | undefined;
                    };
                    type: "LINEAR";
                    input: [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }];
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        }, {
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    type: "LINEAR";
                    input: {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    } | [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] | ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "STATIC";
                        value: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "STATIC";
                        value: number;
                    });
                    params?: {
                        multiplier?: number | undefined;
                        addition?: number | undefined;
                        shouldFloorResult?: boolean | undefined;
                    } | undefined;
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        }>, z.ZodObject<{
            guildPlatformIndex: z.ZodNumber;
            guildPlatformId: z.ZodUndefined;
            guildPlatform: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        }, {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        }>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        requirements: ({
            isNegated: boolean;
            visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
            visibilityRoleId?: number | null | undefined;
        } & {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } & (({
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        } | {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        } | {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        } | {
            type: "ALLOWLIST";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        } | {
            type: "ALLOWLIST_EMAIL";
            data: {
                addresses: string[];
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            };
        } | {
            type: "CAPTCHA";
            data: {
                maxAmount?: number | undefined;
            };
        } | {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        } | {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            data: {
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        } | {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        } | {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        } | {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        } | {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        } | {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                attester: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                attester: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        } | {
            type: "EAS_ATTEST";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                recipient: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                recipient: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        } | {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        } | {
            type: "EMAIL_VERIFIED";
            data: {};
        } | {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        } | {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        } | {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        } | {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "FARCASTER_PROFILE";
            data: {};
        } | {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        } | {
            type: "FORM_APPROVAL";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        } | {
            type: "FREE";
            data: {};
        } | {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        } | {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        } | {
            type: "GITCOIN_PASS";
            data: {};
        } | {
            type: "GITCOIN_STAMP";
            data: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            };
        } | {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        } | {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        } | {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        } | {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: Date;
            };
        } | {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_SNAPSHOT";
            data: {
                snapshot: {
                    value: number;
                    key: string;
                }[];
                isHidden: boolean;
                fileId?: string | undefined;
                guildPlatformId?: number | undefined;
            };
        } | {
            type: "LENS_PROFILE";
            data: {};
        } | {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        } | {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        } | {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        } | {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        } | {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        } | {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "POLYGON_ID_BASIC";
            data: {
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        } | {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        } | {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        } | {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        } | {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        } | {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        } | {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        } | {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        } | {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        } | {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        } | {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data: {};
        } | {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        } | {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        } | {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        } | {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        } | {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }) & {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }))[];
        rolePlatforms?: ({
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    params: {
                        multiplier: number;
                        addition: number;
                        shouldFloorResult?: boolean | undefined;
                    };
                    type: "LINEAR";
                    input: [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }];
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        } & {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        })[] | undefined;
    }, {
        requirements: ({
            isNegated?: boolean | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            visibilityRoleId?: number | null | undefined;
        } & {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } & (({
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        } | {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        } | {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        } | {
            type: "ALLOWLIST";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        } | {
            type: "ALLOWLIST_EMAIL";
            data?: {
                addresses?: string[] | undefined;
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            } | undefined;
        } | {
            type: "CAPTCHA";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
        } | {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        } | {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            data?: {
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            } | undefined;
        } | {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } | {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } | {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        } | {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        } | {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        } | {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        } | {
            type: "EAS_ATTEST";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        } | {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        } | {
            type: "EMAIL_VERIFIED";
            data?: {} | undefined;
        } | {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        } | {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        } | {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        } | {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "FARCASTER_PROFILE";
            data?: {} | undefined;
        } | {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: string | number | undefined;
                    maxAmount?: string | number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        } | {
            type: "FORM_APPROVAL";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        } | {
            type: "FREE";
            data?: {} | undefined;
        } | {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        } | {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        } | {
            type: "GITCOIN_PASS";
            data?: {} | undefined;
        } | {
            type: "GITCOIN_STAMP";
            data?: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            } | undefined;
        } | {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        } | {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        } | {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        } | {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        } | {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: (string | number | Date) & (string | number | Date | undefined);
            };
        } | {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_SNAPSHOT";
            data?: {
                snapshot?: {
                    value: number;
                    key: string;
                }[] | undefined;
                fileId?: string | undefined;
                isHidden?: boolean | undefined;
                guildPlatformId?: number | undefined;
            } | undefined;
        } | {
            type: "LENS_PROFILE";
            data?: {} | undefined;
        } | {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        } | {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        } | {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        } | {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        } | {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        } | {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "POLYGON_ID_BASIC";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        } | {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        } | {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        } | {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        } | {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        } | {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        } | {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        } | {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        } | {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        } | {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        } | {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data?: {} | undefined;
        } | {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        } | {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        } | {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        } | {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        } | {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }) & {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }))[];
        rolePlatforms?: ({
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    type: "LINEAR";
                    input: {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    } | [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] | ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "STATIC";
                        value: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "STATIC";
                        value: number;
                    });
                    params?: {
                        multiplier?: number | undefined;
                        addition?: number | undefined;
                        shouldFloorResult?: boolean | undefined;
                    } | undefined;
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        } & {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        })[] | undefined;
    }>>, "many">;
    contacts: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"EMAIL">;
        contact: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "EMAIL";
        contact: string;
    }, {
        type: "EMAIL";
        contact: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"TELEGRAM">;
        contact: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "TELEGRAM";
        contact: string;
    }, {
        type: "TELEGRAM";
        contact: string;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    roles: ({
        name: string;
        description?: string | undefined;
        imageUrl?: string | undefined;
        logic?: "AND" | "OR" | "ANY_OF" | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        anyOfNum?: number | undefined;
        hideFromEyes?: boolean | undefined;
    } & {
        requirements: ({
            isNegated: boolean;
            visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
            visibilityRoleId?: number | null | undefined;
        } & {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } & (({
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        } | {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        } | {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        } | {
            type: "ALLOWLIST";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        } | {
            type: "ALLOWLIST_EMAIL";
            data: {
                addresses: string[];
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            };
        } | {
            type: "CAPTCHA";
            data: {
                maxAmount?: number | undefined;
            };
        } | {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        } | {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            data: {
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        } | {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        } | {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        } | {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        } | {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        } | {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                attester: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                attester: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        } | {
            type: "EAS_ATTEST";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                recipient: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                recipient: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        } | {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        } | {
            type: "EMAIL_VERIFIED";
            data: {};
        } | {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        } | {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        } | {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        } | {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "FARCASTER_PROFILE";
            data: {};
        } | {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        } | {
            type: "FORM_APPROVAL";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        } | {
            type: "FREE";
            data: {};
        } | {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        } | {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        } | {
            type: "GITCOIN_PASS";
            data: {};
        } | {
            type: "GITCOIN_STAMP";
            data: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            };
        } | {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        } | {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        } | {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        } | {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: Date;
            };
        } | {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_SNAPSHOT";
            data: {
                snapshot: {
                    value: number;
                    key: string;
                }[];
                isHidden: boolean;
                fileId?: string | undefined;
                guildPlatformId?: number | undefined;
            };
        } | {
            type: "LENS_PROFILE";
            data: {};
        } | {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        } | {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        } | {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        } | {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        } | {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        } | {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "POLYGON_ID_BASIC";
            data: {
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        } | {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        } | {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        } | {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        } | {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        } | {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        } | {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        } | {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        } | {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        } | {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        } | {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data: {};
        } | {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        } | {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        } | {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        } | {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        } | {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }) & {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }))[];
        rolePlatforms?: ({
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    params: {
                        multiplier: number;
                        addition: number;
                        shouldFloorResult?: boolean | undefined;
                    };
                    type: "LINEAR";
                    input: [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }];
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        } & {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        })[] | undefined;
    })[];
    contacts: ({
        type: "EMAIL";
        contact: string;
    } | {
        type: "TELEGRAM";
        contact: string;
    })[];
    guildPlatforms?: ((({
        platformName: "DISCORD";
        platformGuildData: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        };
    } | {
        platformName: "TELEGRAM";
    } | {
        platformName: "GITHUB";
        platformGuildData: {
            platformUserId?: number | undefined;
        };
    } | {
        platformName: "GOOGLE";
        platformGuildData: {
            role: "reader" | "commenter" | "writer";
            mimeType: string;
            iconLink: string;
        };
    } | {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    } | {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    } | {
        platformName: "POLYGON_ID";
    } | {
        platformName: "POINTS";
        platformGuildData: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    } | {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    } | {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }) & {
        platformGuildId: string;
    }) & {
        roleIds?: number[] | undefined;
    })[] | undefined;
}, {
    roles: ({
        name: string;
        description?: string | undefined;
        imageUrl?: string | undefined;
        logic?: "AND" | "OR" | "ANY_OF" | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        anyOfNum?: number | undefined;
        hideFromEyes?: boolean | undefined;
    } & {
        requirements: ({
            isNegated?: boolean | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            visibilityRoleId?: number | null | undefined;
        } & {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } & (({
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        } | {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        } | {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        } | {
            type: "ALLOWLIST";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        } | {
            type: "ALLOWLIST_EMAIL";
            data?: {
                addresses?: string[] | undefined;
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            } | undefined;
        } | {
            type: "CAPTCHA";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
        } | {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        } | {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            data?: {
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            } | undefined;
        } | {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } | {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } | {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        } | {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        } | {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        } | {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        } | {
            type: "EAS_ATTEST";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        } | {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        } | {
            type: "EMAIL_VERIFIED";
            data?: {} | undefined;
        } | {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        } | {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        } | {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        } | {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "FARCASTER_PROFILE";
            data?: {} | undefined;
        } | {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: string | number | undefined;
                    maxAmount?: string | number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        } | {
            type: "FORM_APPROVAL";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        } | {
            type: "FREE";
            data?: {} | undefined;
        } | {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        } | {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        } | {
            type: "GITCOIN_PASS";
            data?: {} | undefined;
        } | {
            type: "GITCOIN_STAMP";
            data?: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            } | undefined;
        } | {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        } | {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        } | {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        } | {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        } | {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: (string | number | Date) & (string | number | Date | undefined);
            };
        } | {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_SNAPSHOT";
            data?: {
                snapshot?: {
                    value: number;
                    key: string;
                }[] | undefined;
                fileId?: string | undefined;
                isHidden?: boolean | undefined;
                guildPlatformId?: number | undefined;
            } | undefined;
        } | {
            type: "LENS_PROFILE";
            data?: {} | undefined;
        } | {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        } | {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        } | {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        } | {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        } | {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        } | {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "POLYGON_ID_BASIC";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        } | {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        } | {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        } | {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        } | {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        } | {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        } | {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        } | {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        } | {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        } | {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        } | {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data?: {} | undefined;
        } | {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        } | {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        } | {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        } | {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        } | {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }) & {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }))[];
        rolePlatforms?: ({
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    type: "LINEAR";
                    input: {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    } | [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] | ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "STATIC";
                        value: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "STATIC";
                        value: number;
                    });
                    params?: {
                        multiplier?: number | undefined;
                        addition?: number | undefined;
                        shouldFloorResult?: boolean | undefined;
                    } | undefined;
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        } & {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        })[] | undefined;
    })[];
    contacts: ({
        type: "EMAIL";
        contact: string;
    } | {
        type: "TELEGRAM";
        contact: string;
    })[];
    guildPlatforms?: ((({
        platformName: "DISCORD";
        platformGuildData?: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        } | undefined;
    } | {
        platformName: "TELEGRAM";
    } | {
        platformName: "GITHUB";
        platformGuildData?: {
            platformUserId?: number | undefined;
        } | undefined;
    } | {
        platformName: "GOOGLE";
        platformGuildData: {
            mimeType: string;
            iconLink: string;
            role?: "reader" | "commenter" | "writer" | undefined;
        };
    } | {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    } | {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    } | {
        platformName: "POLYGON_ID";
    } | {
        platformName: "POINTS";
        platformGuildData?: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        } | undefined;
    } | {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    } | {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    } | {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }) & {
        platformGuildId: string;
    }) & {
        roleIds?: number[] | undefined;
    })[] | undefined;
}>>, {
    name: string;
    urlName: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
} & {
    roles: ({
        name: string;
        description?: string | undefined;
        imageUrl?: string | undefined;
        logic?: "AND" | "OR" | "ANY_OF" | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        anyOfNum?: number | undefined;
        hideFromEyes?: boolean | undefined;
    } & {
        requirements: ({
            isNegated: boolean;
            visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
            visibilityRoleId?: number | null | undefined;
        } & {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } & (({
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        } | {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        } | {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
            address?: string | null | undefined;
        } | {
            type: "ALLOWLIST";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        } | {
            type: "ALLOWLIST_EMAIL";
            data: {
                addresses: string[];
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            };
        } | {
            type: "CAPTCHA";
            data: {
                maxAmount?: number | undefined;
            };
        } | {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        } | {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            data: {
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        } | {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                timestamps: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                };
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address?: string | null | undefined;
        } | {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        } | {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        } | {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        } | {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                attester: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                attester: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        } | {
            type: "EAS_ATTEST";
            data: ({
                schemaId: string;
            } & {
                key: string;
                val: string;
            } & {
                recipient: string;
            }) | ({
                schemaId: string;
            } & {
                key: undefined;
                val: undefined;
            } & {
                recipient: string;
            });
            chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
        } | {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        } | {
            type: "EMAIL_VERIFIED";
            data: {};
        } | {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        } | {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        } | {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        } | {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "FARCASTER_PROFILE";
            data: {};
        } | {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        } | {
            type: "FORM_APPROVAL";
            data: {
                addresses: string[];
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            };
        } | {
            type: "FREE";
            data: {};
        } | {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        } | {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        } | {
            type: "GITCOIN_PASS";
            data: {};
        } | {
            type: "GITCOIN_STAMP";
            data: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            };
        } | {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        } | {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        } | {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        } | {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: Date;
            };
        } | {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_SNAPSHOT";
            data: {
                snapshot: {
                    value: number;
                    key: string;
                }[];
                isHidden: boolean;
                fileId?: string | undefined;
                guildPlatformId?: number | undefined;
            };
        } | {
            type: "LENS_PROFILE";
            data: {};
        } | {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        } | {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        } | {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        } | {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        } | {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        } | {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
        } | {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "POLYGON_ID_BASIC";
            data: {
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        } | {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        } | {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        } | {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        } | {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        } | {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        } | {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        } | {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        } | {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        } | {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        } | {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data: {};
        } | {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        } | {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency: "token0" | "token1";
                countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount: undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        } | {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        } | {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        } | {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }) & {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }))[];
        rolePlatforms?: ({
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    params: {
                        multiplier: number;
                        addition: number;
                        shouldFloorResult?: boolean | undefined;
                    };
                    type: "LINEAR";
                    input: [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }];
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        value: number;
                        roleId: number;
                        requirementId: number;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        } & {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        })[] | undefined;
    })[];
    contacts: ({
        type: "EMAIL";
        contact: string;
    } | {
        type: "TELEGRAM";
        contact: string;
    })[];
    guildPlatforms?: ((({
        platformName: "DISCORD";
        platformGuildData: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        };
    } | {
        platformName: "TELEGRAM";
    } | {
        platformName: "GITHUB";
        platformGuildData: {
            platformUserId?: number | undefined;
        };
    } | {
        platformName: "GOOGLE";
        platformGuildData: {
            role: "reader" | "commenter" | "writer";
            mimeType: string;
            iconLink: string;
        };
    } | {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    } | {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    } | {
        platformName: "POLYGON_ID";
    } | {
        platformName: "POINTS";
        platformGuildData: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    } | {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    } | {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }) & {
        platformGuildId: string;
    }) & {
        roleIds?: number[] | undefined;
    })[] | undefined;
}, {
    name: string;
    urlName: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
} & {
    roles: ({
        name: string;
        description?: string | undefined;
        imageUrl?: string | undefined;
        logic?: "AND" | "OR" | "ANY_OF" | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        anyOfNum?: number | undefined;
        hideFromEyes?: boolean | undefined;
    } & {
        requirements: ({
            isNegated?: boolean | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            visibilityRoleId?: number | null | undefined;
        } & {
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } & (({
            type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
            data: {
                maxAmount: number;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        } | {
            type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        } | {
            type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
            };
            chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
            address?: string | null | undefined;
        } | {
            type: "ALLOWLIST";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        } | {
            type: "ALLOWLIST_EMAIL";
            data?: {
                addresses?: string[] | undefined;
                hideAllowlist?: boolean | undefined;
                fileId?: string | undefined;
            } | undefined;
        } | {
            type: "CAPTCHA";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
        } | {
            type: "COIN";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "CONTRACT";
            data: {
                params: (string | number | boolean)[];
                expected: string;
                id: string;
                resultMatch: "=" | ">" | "<" | ">=" | "<=";
                resultIndex?: number | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
            address: string;
        } | {
            type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            data?: {
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            } | undefined;
        } | {
            type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
            data: {
                txCount: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } | {
            type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
            data: {
                txValue: number;
                maxAmount?: number | undefined;
                minAmount?: number | undefined;
                timestamps?: {
                    minAmount?: number | undefined;
                    maxAmount?: number | undefined;
                } | undefined;
            };
            chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
            address?: string | null | undefined;
        } | {
            type: "DISCORD_ROLE";
            data: {
                roleId: string;
                serverId: string;
                serverName?: string | undefined;
                roleName?: string | undefined;
            };
        } | {
            type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
            data: {
                memberSince: number;
            };
        } | {
            type: "DISCORD_MEMBER_SINCE";
            data: {
                serverId: string;
                serverName?: string | undefined;
                memberSince?: number | undefined;
            };
        } | {
            type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                attester: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        } | {
            type: "EAS_ATTEST";
            data: (({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) & ((({
                schemaId: string;
            } & ({
                key: string;
                val: string;
            } | {
                key?: "" | undefined;
                val?: "" | undefined;
            })) & {
                recipient: string;
            }) | undefined);
            chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
        } | {
            type: "EMAIL_DOMAIN";
            data: {
                domain: string;
            };
        } | {
            type: "EMAIL_VERIFIED";
            data?: {} | undefined;
        } | {
            type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
            data: {
                hash: string;
                url?: undefined;
            } | {
                url: string;
                hash?: undefined;
            };
        } | {
            type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
            data: {
                id: number;
            };
        } | {
            type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
            data: {
                id: string;
            };
        } | {
            type: "FARCASTER_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "FARCASTER_PROFILE";
            data?: {} | undefined;
        } | {
            type: "FORM_SUBMISSION";
            data: {
                guildId: number;
                id: number;
                answers?: ({
                    value: string | number;
                    fieldId: string;
                } | ({
                    fieldId: string;
                } & {
                    minAmount?: string | number | undefined;
                    maxAmount?: string | number | undefined;
                }) | ({
                    fieldId: string;
                } & {
                    acceptedAnswers?: string[] | undefined;
                    rejectedAnswers?: string[] | undefined;
                }))[] | undefined;
            };
        } | {
            type: "FORM_APPROVAL";
            data?: {
                addresses?: string[] | undefined;
                fileId?: string | undefined;
                hideAllowlist?: boolean | undefined;
            } | undefined;
        } | {
            type: "FREE";
            data?: {} | undefined;
        } | {
            type: "FUEL_BALANCE";
            data: {
                minAmount: number;
                maxAmount?: number | undefined;
            };
        } | {
            type: "FUEL_TRANSACTIONS";
            data: {
                id?: "script" | "mint" | "create" | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GALAXY" | "GALAXY_PARTICIPATION";
            data: {
                galaxyId: string;
            };
        } | {
            type: "GITCOIN_PASS";
            data?: {} | undefined;
        } | {
            type: "GITCOIN_STAMP";
            data?: {
                stamp?: string | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                credType?: string | undefined;
                issuer?: string | undefined;
            } | undefined;
        } | {
            type: "GITCOIN_SCORE";
            data: {
                id: string;
                score: number;
            };
        } | {
            type: "GITHUB_STARRING";
            data: {
                id: string;
            };
        } | {
            type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
            data?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        } | {
            type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
            data: {
                id: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_MEMBER";
            data: {
                guildId: number;
            };
        } | {
            type: "GUILD_ROLE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ROLE_RELATIVE";
            data: {
                guildId: number;
                roleId: number;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        } | {
            type: "GUILD_ADMIN";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_USER_SINCE";
            data: {
                creationDate: (string | number | Date) & (string | number | Date | undefined);
            };
        } | {
            type: "GUILD_MINGUILDS";
            data: {
                minAmount: number;
            };
        } | {
            type: "GUILD_SNAPSHOT";
            data?: {
                snapshot?: {
                    value: number;
                    key: string;
                }[] | undefined;
                fileId?: string | undefined;
                isHidden?: boolean | undefined;
                guildPlatformId?: number | undefined;
            } | undefined;
        } | {
            type: "LENS_PROFILE";
            data?: {} | undefined;
        } | {
            type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
            data: {
                min: number;
            };
        } | {
            type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
            data: {
                id: string;
            };
        } | {
            type: "LENS_REACT";
            data: {
                id: string;
                reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
            };
        } | {
            type: "LENS_ACTION";
            data: {
                id: string;
                action: "MIRROR" | "QUOTE" | "COMMENT";
                publishedOn?: string | undefined;
            };
        } | {
            type: "PAYMENT";
            data: {
                id: string;
            };
            chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
            address: string;
        } | {
            type: "POAP" | "GITPOAP";
            data: {
                id: string;
            };
        } | {
            type: "POINTS_TOTAL_AMOUNT";
            data: ({
                guildId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_AMOUNT";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POINTS_RANK";
            data: ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                guildId: number;
                guildPlatformId: number;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
        } | {
            type: "POLYGON_ID_QUERY";
            data: {
                query: any[];
                maxAmount?: number | undefined;
            };
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "POLYGON_ID_BASIC";
            data?: {
                maxAmount?: number | undefined;
            } | undefined;
            chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        } | {
            type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
            data: {
                space: string;
            };
        } | {
            type: "SNAPSHOT_FOLLOW_SINCE";
            data: {
                space: string;
                since: number;
            };
        } | {
            type: "SNAPSHOT_USER_SINCE";
            data: {
                since: number;
            };
        } | {
            type: "SNAPSHOT_MAJORITY_VOTES";
            data: {
                minRatio: number;
            };
        } | {
            type: "SNAPSHOT_VOTES";
            data: {
                minAmount: number;
                space?: string | undefined;
                proposal?: string | undefined;
            };
        } | {
            type: "SNAPSHOT_PROPOSALS";
            data: {
                minAmount: number;
                space?: string | undefined;
                state?: "active" | "pending" | "closed" | undefined;
                successfulOnly?: boolean | undefined;
            };
        } | {
            type: "SNAPSHOT_STRATEGY";
            data: {
                block: number | "latest";
                strategies: {
                    name: string;
                    params?: any;
                }[];
                space?: string | undefined;
            };
            chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        } | {
            type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
            data: {
                id: string;
            };
        } | {
            type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
            data: {
                minAmount: number;
            };
        } | {
            type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
            data: {
                minAmount: number;
                fromNow?: boolean | undefined;
            };
        } | {
            type: "TWITTER_ACCOUNT_VERIFIED";
            data: {
                id: "any" | "blue" | "business" | "government";
            };
        } | {
            type: "TWITTER_ACCOUNT_PROTECTED";
            data?: {} | undefined;
        } | {
            type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
            data: {
                id: string;
                maxAmount?: number | undefined;
            };
        } | {
            type: "UNISWAP_V3_POSITIONS";
            data: ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount: number;
                maxAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount?: undefined;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                maxAmount: number;
                minAmount: number;
            }) | ({
                token0: string;
                token1: string;
                baseCurrency?: "token0" | "token1" | undefined;
                countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
                defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
            } & {
                minAmount?: undefined;
                maxAmount?: undefined;
            });
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
        } | {
            type: "WEB3INBOX_SUBSCRIBERS";
            data: {
                app: "GUILD" | "WEB3INBOX" | "SHEFI";
            };
        } | {
            type: "WORLD_ID_VERIFICATION";
            data: {
                verificationLevel: "device" | "orb";
            };
        } | {
            type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
            data?: any;
        }) & {
            data?: {
                customName?: string | undefined;
                customImage?: string | undefined;
            } | undefined;
        }))[];
        rolePlatforms?: ({
            platformRoleId?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
            platformRoleData?: any;
            dynamicAmount?: {
                operation: {
                    type: "LINEAR";
                    input: {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    } | [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] | ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ({
                        type: "STATIC";
                        value: number;
                    } & [{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }]) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    }) | ([{
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    }] & {
                        type: "STATIC";
                        value: number;
                    });
                    params?: {
                        multiplier?: number | undefined;
                        addition?: number | undefined;
                        shouldFloorResult?: boolean | undefined;
                    } | undefined;
                } | {
                    type: "SUM";
                    input: ({
                        type: "REQUIREMENT_AMOUNT";
                        roleId: number;
                        requirementId: number;
                    } | {
                        type: "REQUIREMENT_ACCESS";
                        roleId: number;
                        requirementId: number;
                        value?: number | undefined;
                    } | {
                        guildId: number;
                        type: "POINTS";
                        guildPlatformId: number;
                    } | {
                        type: "STATIC";
                        value: number;
                    })[];
                };
            } | undefined;
        } & {
            guildPlatformIndex: number;
            guildPlatformId?: undefined;
            guildPlatform?: undefined;
        })[] | undefined;
    })[];
    contacts: ({
        type: "EMAIL";
        contact: string;
    } | {
        type: "TELEGRAM";
        contact: string;
    })[];
    guildPlatforms?: ((({
        platformName: "DISCORD";
        platformGuildData?: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        } | undefined;
    } | {
        platformName: "TELEGRAM";
    } | {
        platformName: "GITHUB";
        platformGuildData?: {
            platformUserId?: number | undefined;
        } | undefined;
    } | {
        platformName: "GOOGLE";
        platformGuildData: {
            mimeType: string;
            iconLink: string;
            role?: "reader" | "commenter" | "writer" | undefined;
        };
    } | {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    } | {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    } | {
        platformName: "POLYGON_ID";
    } | {
        platformName: "POINTS";
        platformGuildData?: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        } | undefined;
    } | {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } | {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    } | {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    } | {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }) & {
        platformGuildId: string;
    }) & {
        roleIds?: number[] | undefined;
    })[] | undefined;
}>;
declare const GuildUpdatePayloadSchema: z.ZodEffects<z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    urlName: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    imageUrl: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    showMembers: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    hideFromExplorer: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    socialLinks: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodEnum<["TWITTER", "LENS", "YOUTUBE", "SPOTIFY", "MIRROR", "MEDIUM", "SUBSTACK", "SNAPSHOT", "SOUND", "GITHUB", "WARPCAST", "WEBSITE"]>, z.ZodString>>>;
    onboardingComplete: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    theme: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        mode: z.ZodOptional<z.ZodEnum<["DARK", "LIGHT"]>>;
        color: z.ZodOptional<z.ZodString>;
        backgroundImage: z.ZodOptional<z.ZodString>;
        backgroundCss: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    }, {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    urlName?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
}, {
    name?: string | undefined;
    urlName?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
}>, {
    name?: string | undefined;
    urlName?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
}, {
    name?: string | undefined;
    urlName?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    showMembers?: boolean | undefined;
    hideFromExplorer?: boolean | undefined;
    socialLinks?: Partial<Record<"TWITTER" | "LENS" | "YOUTUBE" | "SPOTIFY" | "MIRROR" | "MEDIUM" | "SUBSTACK" | "SNAPSHOT" | "SOUND" | "GITHUB" | "WARPCAST" | "WEBSITE", string>> | undefined;
    onboardingComplete?: boolean | undefined;
    theme?: {
        mode?: "DARK" | "LIGHT" | undefined;
        color?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundCss?: string | undefined;
    } | undefined;
}>;
declare const GuildSearchQueryParamsSchema: z.ZodObject<{
    order: z.ZodOptional<z.ZodEnum<["NEWEST", "VERIFIED", "FEATURED"]>>;
    search: z.ZodOptional<z.ZodString>;
    limit: z.ZodNumber;
    offset: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    limit: number;
    offset: number;
    order?: "NEWEST" | "VERIFIED" | "FEATURED" | undefined;
    search?: string | undefined;
}, {
    limit: number;
    offset: number;
    order?: "NEWEST" | "VERIFIED" | "FEATURED" | undefined;
    search?: string | undefined;
}>;
declare const GuildGetManyQueryParamsSchema: z.ZodObject<{
    guildIds: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    guildIds: string;
}, {
    guildIds: string;
}>;

declare const GuildAdminCreationPayloadSchema: z.ZodObject<{
    address: z.ZodUnion<[z.ZodString, z.ZodString]>;
    isOwner: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    address: string;
    isOwner?: boolean | undefined;
}, {
    address: string;
    isOwner?: boolean | undefined;
}>;
declare const GuildAdminUpdatePayloadSchema: z.ZodObject<{
    isOwner: z.ZodEffects<z.ZodBoolean, boolean, boolean>;
}, "strip", z.ZodTypeAny, {
    isOwner: boolean;
}, {
    isOwner: boolean;
}>;

declare const IssueGuildPinPayloadSchema: z.ZodObject<{
    userAddress: z.ZodUnion<[z.ZodString, z.ZodString]>;
    guildAction: z.ZodEnum<["JOINED_GUILD", "IS_OWNER", "IS_ADMIN"]>;
    chainId: z.ZodNumber;
    contractAddress: z.ZodUnion<[z.ZodString, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    chainId: number;
    contractAddress: string;
    userAddress: string;
    guildAction: "JOINED_GUILD" | "IS_OWNER" | "IS_ADMIN";
}, {
    chainId: number;
    contractAddress: string;
    userAddress: string;
    guildAction: "JOINED_GUILD" | "IS_OWNER" | "IS_ADMIN";
}>;

declare const ContractCallGuildRewardSchema: z.ZodObject<{
    platformName: z.ZodLiteral<"CONTRACT_CALL">;
    platformGuildData: z.ZodObject<{
        chain: z.ZodEnum<["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"]>;
        contractAddress: z.ZodString;
        function: z.ZodEnum<["function claim(address payToken, address receiver, bytes calldata signature) payable", "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable"]>;
        argsToSign: z.ZodArray<z.ZodString, "many">;
        name: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    }, {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "CONTRACT_CALL";
    platformGuildData: {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    };
}, {
    platformName: "CONTRACT_CALL";
    platformGuildData: {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    };
}>;
declare const GuildRewardSchema: z.ZodIntersection<z.ZodIntersection<z.ZodDiscriminatedUnion<"platformName", [z.ZodObject<{
    platformName: z.ZodLiteral<"DISCORD">;
    platformGuildData: z.ZodDefault<z.ZodObject<{
        inviteChannel: z.ZodOptional<z.ZodString>;
        invite: z.ZodOptional<z.ZodString>;
        joinButton: z.ZodOptional<z.ZodBoolean>;
        needCaptcha: z.ZodOptional<z.ZodBoolean>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    }, {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    platformName: "DISCORD";
    platformGuildData: {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    };
}, {
    platformName: "DISCORD";
    platformGuildData?: {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"TELEGRAM">;
}, "strip", z.ZodTypeAny, {
    platformName: "TELEGRAM";
}, {
    platformName: "TELEGRAM";
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GITHUB">;
    platformGuildData: z.ZodDefault<z.ZodObject<{
        platformUserId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        platformUserId?: number | undefined;
    }, {
        platformUserId?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    platformName: "GITHUB";
    platformGuildData: {
        platformUserId?: number | undefined;
    };
}, {
    platformName: "GITHUB";
    platformGuildData?: {
        platformUserId?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GOOGLE">;
    platformGuildData: z.ZodObject<{
        role: z.ZodDefault<z.ZodOptional<z.ZodEnum<["reader", "commenter", "writer"]>>>;
        mimeType: z.ZodString;
        iconLink: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "reader" | "commenter" | "writer";
        mimeType: string;
        iconLink: string;
    }, {
        mimeType: string;
        iconLink: string;
        role?: "reader" | "commenter" | "writer" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "GOOGLE";
    platformGuildData: {
        role: "reader" | "commenter" | "writer";
        mimeType: string;
        iconLink: string;
    };
}, {
    platformName: "GOOGLE";
    platformGuildData: {
        mimeType: string;
        iconLink: string;
        role?: "reader" | "commenter" | "writer" | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"CONTRACT_CALL">;
    platformGuildData: z.ZodObject<{
        chain: z.ZodEnum<["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"]>;
        contractAddress: z.ZodString;
        function: z.ZodEnum<["function claim(address payToken, address receiver, bytes calldata signature) payable", "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable"]>;
        argsToSign: z.ZodArray<z.ZodString, "many">;
        name: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    }, {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "CONTRACT_CALL";
    platformGuildData: {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    };
}, {
    platformName: "CONTRACT_CALL";
    platformGuildData: {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"UNIQUE_TEXT">;
    platformGuildData: z.ZodObject<{
        texts: z.ZodArray<z.ZodString, "many">;
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "UNIQUE_TEXT";
    platformGuildData: {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "UNIQUE_TEXT";
    platformGuildData: {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"TEXT">;
    platformGuildData: z.ZodObject<{
        text: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "TEXT";
    platformGuildData: {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "TEXT";
    platformGuildData: {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GUILD_PIN">;
    platformGuildData: z.ZodObject<{
        pinChain: z.ZodEnum<["BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL", ...("BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL")[]]>;
        contractAddress: z.ZodUnion<[z.ZodString, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    }, {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "GUILD_PIN";
    platformGuildData: {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    };
}, {
    platformName: "GUILD_PIN";
    platformGuildData: {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"POLYGON_ID">;
}, "strip", z.ZodTypeAny, {
    platformName: "POLYGON_ID";
}, {
    platformName: "POLYGON_ID";
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"POINTS">;
    platformGuildData: z.ZodDefault<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    platformName: "POINTS";
    platformGuildData: {
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "POINTS";
    platformGuildData?: {
        name?: string | undefined;
        imageUrl?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"POAP">;
    platformGuildData: z.ZodObject<{
        fancyId: z.ZodString;
        eventId: z.ZodNumber;
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "POAP";
    platformGuildData: {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "POAP";
    platformGuildData: {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"FORM">;
    platformGuildData: z.ZodObject<{
        formId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        formId: number;
    }, {
        formId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "FORM";
    platformGuildData: {
        formId: number;
    };
}, {
    platformName: "FORM";
    platformGuildData: {
        formId: number;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GATHER_TOWN">;
    platformGuildData: z.ZodObject<{
        name: z.ZodString;
        gatherSpaceId: z.ZodString;
        gatherApiKey: z.ZodString;
        gatherAffiliation: z.ZodString;
        gatherRole: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    }, {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "GATHER_TOWN";
    platformGuildData: {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    };
}, {
    platformName: "GATHER_TOWN";
    platformGuildData: {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"ERC20">;
    platformGuildData: z.ZodObject<{
        poolId: z.ZodNumber;
        chain: z.ZodEnum<["BASE_MAINNET", "BSC", "MANTLE", "OPTIMISM", "POLYGON", "SEPOLIA"]>;
        contractAddress: z.ZodString;
        name: z.ZodString;
        imageUrl: z.ZodString;
        description: z.ZodString;
        tokenAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    }, {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "ERC20";
    platformGuildData: {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    };
}, {
    platformName: "ERC20";
    platformGuildData: {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    };
}>]>, z.ZodObject<{
    platformGuildId: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    platformGuildId: string;
}, {
    platformGuildId: string;
}>>, z.ZodObject<{
    platformGuildName: z.ZodOptional<z.ZodString>;
    invite: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    platformGuildName?: string | undefined;
    invite?: string | undefined;
    name?: string | undefined;
}, {
    platformGuildName?: string | undefined;
    invite?: string | undefined;
    name?: string | undefined;
}>>;
declare const GuildRewardCreationSchema: z.ZodIntersection<z.ZodIntersection<z.ZodDiscriminatedUnion<"platformName", [z.ZodObject<{
    platformName: z.ZodLiteral<"DISCORD">;
    platformGuildData: z.ZodDefault<z.ZodObject<{
        inviteChannel: z.ZodOptional<z.ZodString>;
        invite: z.ZodOptional<z.ZodString>;
        joinButton: z.ZodOptional<z.ZodBoolean>;
        needCaptcha: z.ZodOptional<z.ZodBoolean>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    }, {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    platformName: "DISCORD";
    platformGuildData: {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    };
}, {
    platformName: "DISCORD";
    platformGuildData?: {
        inviteChannel?: string | undefined;
        invite?: string | undefined;
        joinButton?: boolean | undefined;
        needCaptcha?: boolean | undefined;
        name?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"TELEGRAM">;
}, "strip", z.ZodTypeAny, {
    platformName: "TELEGRAM";
}, {
    platformName: "TELEGRAM";
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GITHUB">;
    platformGuildData: z.ZodDefault<z.ZodObject<{
        platformUserId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        platformUserId?: number | undefined;
    }, {
        platformUserId?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    platformName: "GITHUB";
    platformGuildData: {
        platformUserId?: number | undefined;
    };
}, {
    platformName: "GITHUB";
    platformGuildData?: {
        platformUserId?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GOOGLE">;
    platformGuildData: z.ZodObject<{
        role: z.ZodDefault<z.ZodOptional<z.ZodEnum<["reader", "commenter", "writer"]>>>;
        mimeType: z.ZodString;
        iconLink: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "reader" | "commenter" | "writer";
        mimeType: string;
        iconLink: string;
    }, {
        mimeType: string;
        iconLink: string;
        role?: "reader" | "commenter" | "writer" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "GOOGLE";
    platformGuildData: {
        role: "reader" | "commenter" | "writer";
        mimeType: string;
        iconLink: string;
    };
}, {
    platformName: "GOOGLE";
    platformGuildData: {
        mimeType: string;
        iconLink: string;
        role?: "reader" | "commenter" | "writer" | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"CONTRACT_CALL">;
    platformGuildData: z.ZodObject<{
        chain: z.ZodEnum<["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"]>;
        contractAddress: z.ZodString;
        function: z.ZodEnum<["function claim(address payToken, address receiver, bytes calldata signature) payable", "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable"]>;
        argsToSign: z.ZodArray<z.ZodString, "many">;
        name: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    }, {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "CONTRACT_CALL";
    platformGuildData: {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    };
}, {
    platformName: "CONTRACT_CALL";
    platformGuildData: {
        function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
        contractAddress: string;
        argsToSign: string[];
        name?: string | undefined;
        symbol?: string | undefined;
        imageUrl?: string | undefined;
        description?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"UNIQUE_TEXT">;
    platformGuildData: z.ZodObject<{
        texts: z.ZodArray<z.ZodString, "many">;
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "UNIQUE_TEXT";
    platformGuildData: {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "UNIQUE_TEXT";
    platformGuildData: {
        texts: string[];
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"TEXT">;
    platformGuildData: z.ZodObject<{
        text: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "TEXT";
    platformGuildData: {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "TEXT";
    platformGuildData: {
        text: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GUILD_PIN">;
    platformGuildData: z.ZodObject<{
        pinChain: z.ZodEnum<["BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL", ...("BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL")[]]>;
        contractAddress: z.ZodUnion<[z.ZodString, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    }, {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "GUILD_PIN";
    platformGuildData: {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    };
}, {
    platformName: "GUILD_PIN";
    platformGuildData: {
        contractAddress: string;
        pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"POLYGON_ID">;
}, "strip", z.ZodTypeAny, {
    platformName: "POLYGON_ID";
}, {
    platformName: "POLYGON_ID";
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"POINTS">;
    platformGuildData: z.ZodDefault<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    platformName: "POINTS";
    platformGuildData: {
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "POINTS";
    platformGuildData?: {
        name?: string | undefined;
        imageUrl?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"POAP">;
    platformGuildData: z.ZodObject<{
        fancyId: z.ZodString;
        eventId: z.ZodNumber;
        name: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }, {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "POAP";
    platformGuildData: {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}, {
    platformName: "POAP";
    platformGuildData: {
        fancyId: string;
        eventId: number;
        name?: string | undefined;
        imageUrl?: string | undefined;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"FORM">;
    platformGuildData: z.ZodObject<{
        formId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        formId: number;
    }, {
        formId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "FORM";
    platformGuildData: {
        formId: number;
    };
}, {
    platformName: "FORM";
    platformGuildData: {
        formId: number;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"GATHER_TOWN">;
    platformGuildData: z.ZodObject<{
        name: z.ZodString;
        gatherSpaceId: z.ZodString;
        gatherApiKey: z.ZodString;
        gatherAffiliation: z.ZodString;
        gatherRole: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    }, {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "GATHER_TOWN";
    platformGuildData: {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    };
}, {
    platformName: "GATHER_TOWN";
    platformGuildData: {
        name: string;
        gatherSpaceId: string;
        gatherApiKey: string;
        gatherAffiliation: string;
        gatherRole: string;
    };
}>, z.ZodObject<{
    platformName: z.ZodLiteral<"ERC20">;
    platformGuildData: z.ZodObject<{
        poolId: z.ZodNumber;
        chain: z.ZodEnum<["BASE_MAINNET", "BSC", "MANTLE", "OPTIMISM", "POLYGON", "SEPOLIA"]>;
        contractAddress: z.ZodString;
        name: z.ZodString;
        imageUrl: z.ZodString;
        description: z.ZodString;
        tokenAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    }, {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    platformName: "ERC20";
    platformGuildData: {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    };
}, {
    platformName: "ERC20";
    platformGuildData: {
        name: string;
        description: string;
        chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
        contractAddress: string;
        imageUrl: string;
        poolId: number;
        tokenAddress: string;
    };
}>]>, z.ZodObject<{
    platformGuildId: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    platformGuildId: string;
}, {
    platformGuildId: string;
}>>, z.ZodObject<{
    roleIds: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
}, "strip", z.ZodTypeAny, {
    roleIds?: number[] | undefined;
}, {
    roleIds?: number[] | undefined;
}>>;
declare const GuildRewardUpdateSchema: z.ZodEffects<z.ZodObject<{
    platformGuildData: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    platformGuildData?: any;
}, {
    platformGuildData?: any;
}>, {
    platformGuildData?: any;
}, {
    platformGuildData?: any;
}>;

declare const PlatformUserCreationSchema: z.ZodObject<{
    platformName: z.ZodEnum<["DISCORD", "TELEGRAM", "GITHUB", "GOOGLE", "TWITTER", "CONTRACT_CALL", "TWITTER_V1", "UNIQUE_TEXT", "TEXT", "GUILD_PIN", "POLYGON_ID", "POINTS", "POAP", "FORM", "GATHER_TOWN", "ERC20", "WORLD_ID"]>;
    authData: z.ZodAny;
    disconnectFromExistingUser: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    platformName: "TWITTER" | "GITHUB" | "DISCORD" | "TELEGRAM" | "GOOGLE" | "CONTRACT_CALL" | "TWITTER_V1" | "UNIQUE_TEXT" | "TEXT" | "GUILD_PIN" | "POLYGON_ID" | "POINTS" | "POAP" | "FORM" | "GATHER_TOWN" | "ERC20" | "WORLD_ID";
    authData?: any;
    disconnectFromExistingUser?: boolean | undefined;
}, {
    platformName: "TWITTER" | "GITHUB" | "DISCORD" | "TELEGRAM" | "GOOGLE" | "CONTRACT_CALL" | "TWITTER_V1" | "UNIQUE_TEXT" | "TEXT" | "GUILD_PIN" | "POLYGON_ID" | "POINTS" | "POAP" | "FORM" | "GATHER_TOWN" | "ERC20" | "WORLD_ID";
    authData?: any;
    disconnectFromExistingUser?: boolean | undefined;
}>;

declare const ProfileUsernameSchema: z.ZodEffects<z.ZodString, string, string>;
declare const ProfileCreationSchema: z.ZodObject<{
    username: z.ZodEffects<z.ZodString, string, string>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bio: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    profileImageUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    backgroundImageUrl: z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodString>>, z.ZodString]>;
    referrerUserId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    username: string;
    referrerUserId: number;
    name?: string | null | undefined;
    bio?: string | null | undefined;
    profileImageUrl?: string | null | undefined;
    backgroundImageUrl?: string | null | undefined;
}, {
    username: string;
    referrerUserId: number;
    name?: string | null | undefined;
    bio?: string | null | undefined;
    profileImageUrl?: string | null | undefined;
    backgroundImageUrl?: string | null | undefined;
}>;
declare const ProfileUpdateSchema: z.ZodObject<Omit<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bio: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    profileImageUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    backgroundImageUrl: z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodString>>, z.ZodString]>;
    referrerUserId: z.ZodNumber;
    username: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "referrerUserId">, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    username?: string | undefined;
    bio?: string | null | undefined;
    profileImageUrl?: string | null | undefined;
    backgroundImageUrl?: string | null | undefined;
}, {
    name?: string | null | undefined;
    username?: string | undefined;
    bio?: string | null | undefined;
    profileImageUrl?: string | null | undefined;
    backgroundImageUrl?: string | null | undefined;
}>;
declare const ProfileSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodEffects<z.ZodString, string, string>;
    bio: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    profileImageUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    backgroundImageUrl: z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodString>>, z.ZodString]>;
    referrerUserId: z.ZodNumber;
    userId: z.ZodNumber;
    createdAt: z.ZodUnion<[z.ZodDate, z.ZodString]>;
    updatedAt: z.ZodUnion<[z.ZodDate, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    createdAt: (string | Date) & (string | Date | undefined);
    updatedAt: (string | Date) & (string | Date | undefined);
    userId: number;
    username: string;
    referrerUserId: number;
    name?: string | null | undefined;
    bio?: string | null | undefined;
    profileImageUrl?: string | null | undefined;
    backgroundImageUrl?: string | null | undefined;
}, {
    createdAt: (string | Date) & (string | Date | undefined);
    updatedAt: (string | Date) & (string | Date | undefined);
    userId: number;
    username: string;
    referrerUserId: number;
    name?: string | null | undefined;
    bio?: string | null | undefined;
    profileImageUrl?: string | null | undefined;
    backgroundImageUrl?: string | null | undefined;
}>;
declare const ContributionCreationSchema: z.ZodObject<{
    guildId: z.ZodNumber;
    roleId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    guildId: number;
    roleId: number;
}, {
    guildId: number;
    roleId: number;
}>;
declare const ContributionUpdateSchema: z.ZodObject<{
    guildId: z.ZodOptional<z.ZodNumber>;
    roleId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    guildId?: number | undefined;
    roleId?: number | undefined;
}, {
    guildId?: number | undefined;
    roleId?: number | undefined;
}>;
declare const ContributionSchema: z.ZodObject<{
    guildId: z.ZodNumber;
    roleId: z.ZodNumber;
    id: z.ZodNumber;
    userId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    guildId: number;
    roleId: number;
    id: number;
    userId: number;
}, {
    guildId: number;
    roleId: number;
    id: number;
    userId: number;
}>;
declare const ContributionCollectionSchema: z.ZodObject<{
    contributionId: z.ZodNumber;
    guildId: z.ZodNumber;
    NFTs: z.ZodArray<z.ZodObject<{
        userRewardId: z.ZodNumber;
        data: z.ZodObject<{
            chain: z.ZodEnum<["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"]>;
            contractAddress: z.ZodString;
            function: z.ZodEnum<["function claim(address payToken, address receiver, bytes calldata signature) payable", "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable"]>;
            argsToSign: z.ZodArray<z.ZodString, "many">;
            name: z.ZodOptional<z.ZodString>;
            symbol: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        }, {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        data: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
        userRewardId: number;
    }, {
        data: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
        userRewardId: number;
    }>, "many">;
    pins: z.ZodArray<z.ZodObject<{
        action: z.ZodEnum<["JOINED_GUILD", "IS_OWNER", "IS_ADMIN"]>;
        minted: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        action: "JOINED_GUILD" | "IS_OWNER" | "IS_ADMIN";
        minted: boolean;
    }, {
        action: "JOINED_GUILD" | "IS_OWNER" | "IS_ADMIN";
        minted: boolean;
    }>, "many">;
    points: z.ZodArray<z.ZodObject<{
        guildId: z.ZodNumber;
        guildPlatformId: z.ZodNumber;
        totalPoints: z.ZodNumber;
        rank: z.ZodNumber;
        roleIds: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleIds: number[];
        guildPlatformId: number;
        totalPoints: number;
        rank: number;
    }, {
        guildId: number;
        roleIds: number[];
        guildPlatformId: number;
        totalPoints: number;
        rank: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    guildId: number;
    contributionId: number;
    NFTs: {
        data: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
        userRewardId: number;
    }[];
    pins: {
        action: "JOINED_GUILD" | "IS_OWNER" | "IS_ADMIN";
        minted: boolean;
    }[];
    points: {
        guildId: number;
        roleIds: number[];
        guildPlatformId: number;
        totalPoints: number;
        rank: number;
    }[];
}, {
    guildId: number;
    contributionId: number;
    NFTs: {
        data: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
        userRewardId: number;
    }[];
    pins: {
        action: "JOINED_GUILD" | "IS_OWNER" | "IS_ADMIN";
        minted: boolean;
    }[];
    points: {
        guildId: number;
        roleIds: number[];
        guildPlatformId: number;
        totalPoints: number;
        rank: number;
    }[];
}>;
declare const ExperienceSchema: z.ZodObject<{
    id: z.ZodNumber;
    userId: z.ZodNumber;
    auditLogId: z.ZodNumber;
    eventType: z.ZodEnum<["USER_REFERRAL", "JOIN_GUILD", "GET_ROLE", "SUBMIT_FORM", "COLLECT_PIN", "COLLECT_NFT", "OWN_GUILD_VERIFIED"]>;
    amount: z.ZodNumber;
    createdAt: z.ZodUnion<[z.ZodDate, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    id: number;
    createdAt: (string | Date) & (string | Date | undefined);
    userId: number;
    auditLogId: number;
    eventType: "USER_REFERRAL" | "JOIN_GUILD" | "GET_ROLE" | "SUBMIT_FORM" | "COLLECT_PIN" | "COLLECT_NFT" | "OWN_GUILD_VERIFIED";
    amount: number;
}, {
    id: number;
    createdAt: (string | Date) & (string | Date | undefined);
    userId: number;
    auditLogId: number;
    eventType: "USER_REFERRAL" | "JOIN_GUILD" | "GET_ROLE" | "SUBMIT_FORM" | "COLLECT_PIN" | "COLLECT_NFT" | "OWN_GUILD_VERIFIED";
    amount: number;
}>;

declare const RequirementTypeAndDataSchema: z.ZodIntersection<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"FREE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FREE";
    data: {};
}, {
    type: "FREE";
    data?: {} | undefined;
}>, ...(z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    data: z.ZodObject<{
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
    }, {
        maxAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
}, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "ALLOWLIST";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        fileId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }, {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST_EMAIL";
    data: {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    };
}, {
    type: "ALLOWLIST_EMAIL";
    data?: {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"CAPTCHA">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "CAPTCHA";
    data: {
        maxAmount?: number | undefined;
    };
}, {
    type: "CAPTCHA";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"COIN">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodLiteral<"CONTRACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        resultIndex: z.ZodOptional<z.ZodNumber>;
        params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
        resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
        expected: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }>;
    address: z.ZodString;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
}, "strip", z.ZodTypeAny, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    data: z.ZodDefault<z.ZodObject<{
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    data: {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    data?: {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_ROLE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        roleId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        roleName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
    data: z.ZodObject<{
        memberSince: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        memberSince: number;
    }, {
        memberSince: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        memberSince: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        attester: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        attester: string;
    }, {
        attester: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        attester: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        attester: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    type: z.ZodLiteral<"EAS_ATTEST">;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        recipient: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        recipient: string;
    }, {
        recipient: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTEST";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        recipient: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        recipient: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTEST";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_DOMAIN">;
    data: z.ZodObject<{
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
    }, {
        domain: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_VERIFIED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_VERIFIED";
    data: {};
}, {
    type: "EMAIL_VERIFIED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
    data: z.ZodUnion<[z.ZodObject<{
        hash: z.ZodString;
        url: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        url?: undefined;
    }, {
        hash: string;
        url?: undefined;
    }>, z.ZodObject<{
        url: z.ZodString;
        hash: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        url: string;
        hash?: undefined;
    }, {
        url: string;
        hash?: undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
    }, {
        id: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_PROFILE";
    data: {};
}, {
    type: "FARCASTER_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_SUBMISSION">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        guildId: z.ZodNumber;
        answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            fieldId: z.ZodString;
            value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        }, "strict", z.ZodTypeAny, {
            value: string | number;
            fieldId: string;
        }, {
            value: string | number;
            fieldId: string;
        }>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
            maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_APPROVAL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_APPROVAL";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "FORM_APPROVAL";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_BALANCE">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
    data: z.ZodObject<{
        galaxyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        galaxyId: string;
    }, {
        galaxyId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_PASS">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_PASS";
    data: {};
}, {
    type: "GITCOIN_PASS";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_STAMP">;
    data: z.ZodDefault<z.ZodObject<{
        stamp: z.ZodOptional<z.ZodString>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        credType: z.ZodOptional<z.ZodString>;
        issuer: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_STAMP";
    data: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    };
}, {
    type: "GITCOIN_STAMP";
    data?: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_SCORE">;
    data: z.ZodObject<{
        id: z.ZodString;
        score: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        score: number;
    }, {
        id: string;
        score: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITHUB_STARRING">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
    data: z.ZodDefault<z.ZodObject<{
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data?: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MEMBER">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ADMIN">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_USER_SINCE">;
    data: z.ZodObject<{
        creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        creationDate: Date;
    }, {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: Date;
    };
}, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MINGUILDS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_SNAPSHOT">;
    data: z.ZodDefault<z.ZodObject<{
        snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            key: string;
        }, {
            value: number;
            key: string;
        }>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        isHidden: z.ZodDefault<z.ZodBoolean>;
        guildPlatformId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    }, {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_SNAPSHOT";
    data: {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    };
}, {
    type: "GUILD_SNAPSHOT";
    data?: {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_PROFILE";
    data: {};
}, {
    type: "LENS_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_REACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_ACTION">;
    data: z.ZodObject<{
        id: z.ZodString;
        action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
        publishedOn: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"PAYMENT">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["POAP", "GITPOAP"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_RANK">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_QUERY">;
    data: z.ZodObject<{
        query: z.ZodArray<z.ZodAny, "many">;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        query: any[];
        maxAmount?: number | undefined;
    }, {
        query: any[];
        maxAmount?: number | undefined;
    }>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_BASIC">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_BASIC";
    data: {
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_BASIC";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
    data: z.ZodObject<{
        space: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        space: string;
    }, {
        space: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
    data: z.ZodObject<{
        space: z.ZodString;
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        space: string;
        since: number;
    }, {
        space: string;
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
    data: z.ZodObject<{
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        since: number;
    }, {
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
    data: z.ZodObject<{
        minRatio: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minRatio: number;
    }, {
        minRatio: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_VOTES">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        proposal: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
        successfulOnly: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
        strategies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            params: z.ZodOptional<z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            params?: any;
        }, {
            name: string;
            params?: any;
        }>, "many">;
        space: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        fromNow: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
    data: z.ZodObject<{
        id: z.ZodEnum<["any", "blue", "business", "government"]>;
    }, "strip", z.ZodTypeAny, {
        id: "any" | "blue" | "business" | "government";
    }, {
        id: "any" | "blue" | "business" | "government";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data: {};
}, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        maxAmount?: number | undefined;
    }, {
        id: string;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
    data: z.ZodObject<{
        app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
    }, "strip", z.ZodTypeAny, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}>)[], z.ZodObject<{
    type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
    data: z.ZodIntersection<z.ZodObject<{
        token0: z.ZodString;
        token1: z.ZodString;
        baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
        countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
        defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
    }, "strip", z.ZodTypeAny, {
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }, {
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
    chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
}, "strip", z.ZodTypeAny, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}>, z.ZodObject<{
    type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
    data: z.ZodObject<{
        verificationLevel: z.ZodEnum<["device", "orb"]>;
    }, "strip", z.ZodTypeAny, {
        verificationLevel: "device" | "orb";
    }, {
        verificationLevel: "device" | "orb";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}>]>, z.ZodObject<{
    type: z.ZodEnum<["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"]>;
    data: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}>]>, z.ZodObject<{
    data: z.ZodOptional<z.ZodObject<{
        customName: z.ZodOptional<z.ZodString>;
        customImage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}>>;
declare const RequirementCreationPayloadSchema: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    isNegated: z.ZodDefault<z.ZodBoolean>;
    visibility: z.ZodDefault<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    visibilityRoleId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    isNegated: boolean;
    visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
    visibilityRoleId?: number | null | undefined;
}, {
    isNegated?: boolean | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    visibilityRoleId?: number | null | undefined;
}>, z.ZodObject<{
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodString]>>>;
}, "strip", z.ZodTypeAny, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}>>, z.ZodIntersection<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"FREE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FREE";
    data: {};
}, {
    type: "FREE";
    data?: {} | undefined;
}>, ...(z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    data: z.ZodObject<{
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
    }, {
        maxAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
}, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "ALLOWLIST";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        fileId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }, {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST_EMAIL";
    data: {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    };
}, {
    type: "ALLOWLIST_EMAIL";
    data?: {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"CAPTCHA">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "CAPTCHA";
    data: {
        maxAmount?: number | undefined;
    };
}, {
    type: "CAPTCHA";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"COIN">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodLiteral<"CONTRACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        resultIndex: z.ZodOptional<z.ZodNumber>;
        params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
        resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
        expected: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }>;
    address: z.ZodString;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
}, "strip", z.ZodTypeAny, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    data: z.ZodDefault<z.ZodObject<{
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    data: {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    data?: {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_ROLE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        roleId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        roleName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
    data: z.ZodObject<{
        memberSince: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        memberSince: number;
    }, {
        memberSince: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        memberSince: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        attester: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        attester: string;
    }, {
        attester: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        attester: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        attester: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    type: z.ZodLiteral<"EAS_ATTEST">;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        recipient: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        recipient: string;
    }, {
        recipient: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTEST";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        recipient: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        recipient: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTEST";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_DOMAIN">;
    data: z.ZodObject<{
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
    }, {
        domain: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_VERIFIED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_VERIFIED";
    data: {};
}, {
    type: "EMAIL_VERIFIED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
    data: z.ZodUnion<[z.ZodObject<{
        hash: z.ZodString;
        url: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        url?: undefined;
    }, {
        hash: string;
        url?: undefined;
    }>, z.ZodObject<{
        url: z.ZodString;
        hash: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        url: string;
        hash?: undefined;
    }, {
        url: string;
        hash?: undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
    }, {
        id: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_PROFILE";
    data: {};
}, {
    type: "FARCASTER_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_SUBMISSION">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        guildId: z.ZodNumber;
        answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            fieldId: z.ZodString;
            value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        }, "strict", z.ZodTypeAny, {
            value: string | number;
            fieldId: string;
        }, {
            value: string | number;
            fieldId: string;
        }>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
            maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_APPROVAL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_APPROVAL";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "FORM_APPROVAL";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_BALANCE">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
    data: z.ZodObject<{
        galaxyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        galaxyId: string;
    }, {
        galaxyId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_PASS">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_PASS";
    data: {};
}, {
    type: "GITCOIN_PASS";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_STAMP">;
    data: z.ZodDefault<z.ZodObject<{
        stamp: z.ZodOptional<z.ZodString>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        credType: z.ZodOptional<z.ZodString>;
        issuer: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_STAMP";
    data: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    };
}, {
    type: "GITCOIN_STAMP";
    data?: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_SCORE">;
    data: z.ZodObject<{
        id: z.ZodString;
        score: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        score: number;
    }, {
        id: string;
        score: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITHUB_STARRING">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
    data: z.ZodDefault<z.ZodObject<{
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data?: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MEMBER">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ADMIN">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_USER_SINCE">;
    data: z.ZodObject<{
        creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        creationDate: Date;
    }, {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: Date;
    };
}, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MINGUILDS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_SNAPSHOT">;
    data: z.ZodDefault<z.ZodObject<{
        snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            key: string;
        }, {
            value: number;
            key: string;
        }>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        isHidden: z.ZodDefault<z.ZodBoolean>;
        guildPlatformId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    }, {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_SNAPSHOT";
    data: {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    };
}, {
    type: "GUILD_SNAPSHOT";
    data?: {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_PROFILE";
    data: {};
}, {
    type: "LENS_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_REACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_ACTION">;
    data: z.ZodObject<{
        id: z.ZodString;
        action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
        publishedOn: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"PAYMENT">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["POAP", "GITPOAP"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_RANK">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_QUERY">;
    data: z.ZodObject<{
        query: z.ZodArray<z.ZodAny, "many">;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        query: any[];
        maxAmount?: number | undefined;
    }, {
        query: any[];
        maxAmount?: number | undefined;
    }>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_BASIC">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_BASIC";
    data: {
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_BASIC";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
    data: z.ZodObject<{
        space: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        space: string;
    }, {
        space: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
    data: z.ZodObject<{
        space: z.ZodString;
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        space: string;
        since: number;
    }, {
        space: string;
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
    data: z.ZodObject<{
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        since: number;
    }, {
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
    data: z.ZodObject<{
        minRatio: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minRatio: number;
    }, {
        minRatio: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_VOTES">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        proposal: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
        successfulOnly: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
        strategies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            params: z.ZodOptional<z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            params?: any;
        }, {
            name: string;
            params?: any;
        }>, "many">;
        space: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        fromNow: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
    data: z.ZodObject<{
        id: z.ZodEnum<["any", "blue", "business", "government"]>;
    }, "strip", z.ZodTypeAny, {
        id: "any" | "blue" | "business" | "government";
    }, {
        id: "any" | "blue" | "business" | "government";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data: {};
}, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        maxAmount?: number | undefined;
    }, {
        id: string;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
    data: z.ZodObject<{
        app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
    }, "strip", z.ZodTypeAny, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}>)[], z.ZodObject<{
    type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
    data: z.ZodIntersection<z.ZodObject<{
        token0: z.ZodString;
        token1: z.ZodString;
        baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
        countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
        defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
    }, "strip", z.ZodTypeAny, {
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }, {
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
    chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
}, "strip", z.ZodTypeAny, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}>, z.ZodObject<{
    type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
    data: z.ZodObject<{
        verificationLevel: z.ZodEnum<["device", "orb"]>;
    }, "strip", z.ZodTypeAny, {
        verificationLevel: "device" | "orb";
    }, {
        verificationLevel: "device" | "orb";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}>]>, z.ZodObject<{
    type: z.ZodEnum<["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"]>;
    data: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}>]>, z.ZodObject<{
    data: z.ZodOptional<z.ZodObject<{
        customName: z.ZodOptional<z.ZodString>;
        customImage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}>>>;
declare const RequirementUpdatePayloadSchema: z.ZodEffects<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    isNegated: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    visibility: z.ZodOptional<z.ZodDefault<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>>;
    visibilityRoleId: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNumber>>>;
}, "strip", z.ZodTypeAny, {
    isNegated?: boolean | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    visibilityRoleId?: number | null | undefined;
}, {
    isNegated?: boolean | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    visibilityRoleId?: number | null | undefined;
}>, z.ZodObject<{
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodString]>>>;
}, "strip", z.ZodTypeAny, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}>>, z.ZodObject<{
    data: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    data?: any;
}, {
    data?: any;
}>>, {
    isNegated?: boolean | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    visibilityRoleId?: number | null | undefined;
} & {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
} & {
    data?: any;
}, {
    isNegated?: boolean | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    visibilityRoleId?: number | null | undefined;
} & {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
} & {
    data?: any;
}>;
declare const RequirementSchema: z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    isNegated: z.ZodDefault<z.ZodBoolean>;
    visibility: z.ZodDefault<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    visibilityRoleId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    isNegated: boolean;
    visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
    visibilityRoleId?: number | null | undefined;
}, {
    isNegated?: boolean | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    visibilityRoleId?: number | null | undefined;
}>, z.ZodIntersection<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"FREE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FREE";
    data: {};
}, {
    type: "FREE";
    data?: {} | undefined;
}>, ...(z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    data: z.ZodObject<{
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
    }, {
        maxAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
}, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "ALLOWLIST";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        fileId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }, {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST_EMAIL";
    data: {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    };
}, {
    type: "ALLOWLIST_EMAIL";
    data?: {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"CAPTCHA">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "CAPTCHA";
    data: {
        maxAmount?: number | undefined;
    };
}, {
    type: "CAPTCHA";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"COIN">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodLiteral<"CONTRACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        resultIndex: z.ZodOptional<z.ZodNumber>;
        params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
        resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
        expected: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }>;
    address: z.ZodString;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
}, "strip", z.ZodTypeAny, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    data: z.ZodDefault<z.ZodObject<{
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    data: {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    data?: {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_ROLE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        roleId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        roleName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
    data: z.ZodObject<{
        memberSince: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        memberSince: number;
    }, {
        memberSince: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        memberSince: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        attester: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        attester: string;
    }, {
        attester: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        attester: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        attester: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    type: z.ZodLiteral<"EAS_ATTEST">;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        recipient: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        recipient: string;
    }, {
        recipient: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTEST";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        recipient: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        recipient: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTEST";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_DOMAIN">;
    data: z.ZodObject<{
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
    }, {
        domain: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_VERIFIED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_VERIFIED";
    data: {};
}, {
    type: "EMAIL_VERIFIED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
    data: z.ZodUnion<[z.ZodObject<{
        hash: z.ZodString;
        url: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        url?: undefined;
    }, {
        hash: string;
        url?: undefined;
    }>, z.ZodObject<{
        url: z.ZodString;
        hash: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        url: string;
        hash?: undefined;
    }, {
        url: string;
        hash?: undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
    }, {
        id: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_PROFILE";
    data: {};
}, {
    type: "FARCASTER_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_SUBMISSION">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        guildId: z.ZodNumber;
        answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            fieldId: z.ZodString;
            value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        }, "strict", z.ZodTypeAny, {
            value: string | number;
            fieldId: string;
        }, {
            value: string | number;
            fieldId: string;
        }>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
            maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_APPROVAL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_APPROVAL";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "FORM_APPROVAL";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_BALANCE">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
    data: z.ZodObject<{
        galaxyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        galaxyId: string;
    }, {
        galaxyId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_PASS">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_PASS";
    data: {};
}, {
    type: "GITCOIN_PASS";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_STAMP">;
    data: z.ZodDefault<z.ZodObject<{
        stamp: z.ZodOptional<z.ZodString>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        credType: z.ZodOptional<z.ZodString>;
        issuer: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_STAMP";
    data: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    };
}, {
    type: "GITCOIN_STAMP";
    data?: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_SCORE">;
    data: z.ZodObject<{
        id: z.ZodString;
        score: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        score: number;
    }, {
        id: string;
        score: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITHUB_STARRING">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
    data: z.ZodDefault<z.ZodObject<{
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data?: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MEMBER">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ADMIN">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_USER_SINCE">;
    data: z.ZodObject<{
        creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        creationDate: Date;
    }, {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: Date;
    };
}, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MINGUILDS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_SNAPSHOT">;
    data: z.ZodDefault<z.ZodObject<{
        snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            key: string;
        }, {
            value: number;
            key: string;
        }>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        isHidden: z.ZodDefault<z.ZodBoolean>;
        guildPlatformId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    }, {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_SNAPSHOT";
    data: {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    };
}, {
    type: "GUILD_SNAPSHOT";
    data?: {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_PROFILE";
    data: {};
}, {
    type: "LENS_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_REACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_ACTION">;
    data: z.ZodObject<{
        id: z.ZodString;
        action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
        publishedOn: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"PAYMENT">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["POAP", "GITPOAP"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_RANK">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_QUERY">;
    data: z.ZodObject<{
        query: z.ZodArray<z.ZodAny, "many">;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        query: any[];
        maxAmount?: number | undefined;
    }, {
        query: any[];
        maxAmount?: number | undefined;
    }>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_BASIC">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_BASIC";
    data: {
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_BASIC";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
    data: z.ZodObject<{
        space: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        space: string;
    }, {
        space: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
    data: z.ZodObject<{
        space: z.ZodString;
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        space: string;
        since: number;
    }, {
        space: string;
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
    data: z.ZodObject<{
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        since: number;
    }, {
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
    data: z.ZodObject<{
        minRatio: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minRatio: number;
    }, {
        minRatio: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_VOTES">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        proposal: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
        successfulOnly: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
        strategies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            params: z.ZodOptional<z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            params?: any;
        }, {
            name: string;
            params?: any;
        }>, "many">;
        space: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        fromNow: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
    data: z.ZodObject<{
        id: z.ZodEnum<["any", "blue", "business", "government"]>;
    }, "strip", z.ZodTypeAny, {
        id: "any" | "blue" | "business" | "government";
    }, {
        id: "any" | "blue" | "business" | "government";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data: {};
}, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        maxAmount?: number | undefined;
    }, {
        id: string;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
    data: z.ZodObject<{
        app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
    }, "strip", z.ZodTypeAny, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}>)[], z.ZodObject<{
    type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
    data: z.ZodIntersection<z.ZodObject<{
        token0: z.ZodString;
        token1: z.ZodString;
        baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
        countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
        defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
    }, "strip", z.ZodTypeAny, {
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }, {
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
    chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
}, "strip", z.ZodTypeAny, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}>, z.ZodObject<{
    type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
    data: z.ZodObject<{
        verificationLevel: z.ZodEnum<["device", "orb"]>;
    }, "strip", z.ZodTypeAny, {
        verificationLevel: "device" | "orb";
    }, {
        verificationLevel: "device" | "orb";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}>]>, z.ZodObject<{
    type: z.ZodEnum<["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"]>;
    data: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}>]>, z.ZodObject<{
    data: z.ZodOptional<z.ZodObject<{
        customName: z.ZodOptional<z.ZodString>;
        customImage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}>>>, z.ZodObject<{
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodString]>>>;
}, "strip", z.ZodTypeAny, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}>>, z.ZodObject<{
    id: z.ZodNumber;
    roleId: z.ZodNumber;
    createdAt: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Date, string>;
    updatedAt: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Date, string>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    symbol: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    roleId: number;
    id: number;
    createdAt: Date;
    updatedAt: Date;
    name?: string | null | undefined;
    symbol?: string | null | undefined;
}, {
    roleId: number;
    id: number;
    createdAt: string;
    updatedAt: string;
    name?: string | null | undefined;
    symbol?: string | null | undefined;
}>>;
declare const RequirementCreateResponseSchema: z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    isNegated: z.ZodDefault<z.ZodBoolean>;
    visibility: z.ZodDefault<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    visibilityRoleId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    isNegated: boolean;
    visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
    visibilityRoleId?: number | null | undefined;
}, {
    isNegated?: boolean | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    visibilityRoleId?: number | null | undefined;
}>, z.ZodIntersection<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"FREE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FREE";
    data: {};
}, {
    type: "FREE";
    data?: {} | undefined;
}>, ...(z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    data: z.ZodObject<{
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
    }, {
        maxAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
}, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "ALLOWLIST";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        fileId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }, {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST_EMAIL";
    data: {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    };
}, {
    type: "ALLOWLIST_EMAIL";
    data?: {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"CAPTCHA">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "CAPTCHA";
    data: {
        maxAmount?: number | undefined;
    };
}, {
    type: "CAPTCHA";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"COIN">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodLiteral<"CONTRACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        resultIndex: z.ZodOptional<z.ZodNumber>;
        params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
        resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
        expected: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }>;
    address: z.ZodString;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
}, "strip", z.ZodTypeAny, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    data: z.ZodDefault<z.ZodObject<{
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    data: {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    data?: {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_ROLE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        roleId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        roleName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
    data: z.ZodObject<{
        memberSince: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        memberSince: number;
    }, {
        memberSince: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        memberSince: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        attester: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        attester: string;
    }, {
        attester: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        attester: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        attester: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    type: z.ZodLiteral<"EAS_ATTEST">;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        recipient: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        recipient: string;
    }, {
        recipient: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTEST";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        recipient: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        recipient: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTEST";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_DOMAIN">;
    data: z.ZodObject<{
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
    }, {
        domain: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_VERIFIED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_VERIFIED";
    data: {};
}, {
    type: "EMAIL_VERIFIED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
    data: z.ZodUnion<[z.ZodObject<{
        hash: z.ZodString;
        url: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        url?: undefined;
    }, {
        hash: string;
        url?: undefined;
    }>, z.ZodObject<{
        url: z.ZodString;
        hash: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        url: string;
        hash?: undefined;
    }, {
        url: string;
        hash?: undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
    }, {
        id: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_PROFILE";
    data: {};
}, {
    type: "FARCASTER_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_SUBMISSION">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        guildId: z.ZodNumber;
        answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            fieldId: z.ZodString;
            value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        }, "strict", z.ZodTypeAny, {
            value: string | number;
            fieldId: string;
        }, {
            value: string | number;
            fieldId: string;
        }>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
            maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_APPROVAL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_APPROVAL";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "FORM_APPROVAL";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_BALANCE">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
    data: z.ZodObject<{
        galaxyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        galaxyId: string;
    }, {
        galaxyId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_PASS">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_PASS";
    data: {};
}, {
    type: "GITCOIN_PASS";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_STAMP">;
    data: z.ZodDefault<z.ZodObject<{
        stamp: z.ZodOptional<z.ZodString>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        credType: z.ZodOptional<z.ZodString>;
        issuer: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_STAMP";
    data: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    };
}, {
    type: "GITCOIN_STAMP";
    data?: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_SCORE">;
    data: z.ZodObject<{
        id: z.ZodString;
        score: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        score: number;
    }, {
        id: string;
        score: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITHUB_STARRING">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
    data: z.ZodDefault<z.ZodObject<{
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data?: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MEMBER">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ADMIN">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_USER_SINCE">;
    data: z.ZodObject<{
        creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        creationDate: Date;
    }, {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: Date;
    };
}, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MINGUILDS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_SNAPSHOT">;
    data: z.ZodDefault<z.ZodObject<{
        snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            key: string;
        }, {
            value: number;
            key: string;
        }>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        isHidden: z.ZodDefault<z.ZodBoolean>;
        guildPlatformId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    }, {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_SNAPSHOT";
    data: {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    };
}, {
    type: "GUILD_SNAPSHOT";
    data?: {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_PROFILE";
    data: {};
}, {
    type: "LENS_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_REACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_ACTION">;
    data: z.ZodObject<{
        id: z.ZodString;
        action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
        publishedOn: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"PAYMENT">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["POAP", "GITPOAP"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_RANK">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_QUERY">;
    data: z.ZodObject<{
        query: z.ZodArray<z.ZodAny, "many">;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        query: any[];
        maxAmount?: number | undefined;
    }, {
        query: any[];
        maxAmount?: number | undefined;
    }>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_BASIC">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_BASIC";
    data: {
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_BASIC";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
    data: z.ZodObject<{
        space: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        space: string;
    }, {
        space: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
    data: z.ZodObject<{
        space: z.ZodString;
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        space: string;
        since: number;
    }, {
        space: string;
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
    data: z.ZodObject<{
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        since: number;
    }, {
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
    data: z.ZodObject<{
        minRatio: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minRatio: number;
    }, {
        minRatio: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_VOTES">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        proposal: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
        successfulOnly: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
        strategies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            params: z.ZodOptional<z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            params?: any;
        }, {
            name: string;
            params?: any;
        }>, "many">;
        space: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        fromNow: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
    data: z.ZodObject<{
        id: z.ZodEnum<["any", "blue", "business", "government"]>;
    }, "strip", z.ZodTypeAny, {
        id: "any" | "blue" | "business" | "government";
    }, {
        id: "any" | "blue" | "business" | "government";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data: {};
}, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        maxAmount?: number | undefined;
    }, {
        id: string;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
    data: z.ZodObject<{
        app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
    }, "strip", z.ZodTypeAny, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}>)[], z.ZodObject<{
    type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
    data: z.ZodIntersection<z.ZodObject<{
        token0: z.ZodString;
        token1: z.ZodString;
        baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
        countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
        defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
    }, "strip", z.ZodTypeAny, {
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }, {
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
    chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
}, "strip", z.ZodTypeAny, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}>, z.ZodObject<{
    type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
    data: z.ZodObject<{
        verificationLevel: z.ZodEnum<["device", "orb"]>;
    }, "strip", z.ZodTypeAny, {
        verificationLevel: "device" | "orb";
    }, {
        verificationLevel: "device" | "orb";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}>]>, z.ZodObject<{
    type: z.ZodEnum<["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"]>;
    data: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}, {
    type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
    data?: any;
}>]>, z.ZodObject<{
    data: z.ZodOptional<z.ZodObject<{
        customName: z.ZodOptional<z.ZodString>;
        customImage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}>>>, z.ZodObject<{
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodString]>>>;
}, "strip", z.ZodTypeAny, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}, {
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}>>, z.ZodObject<{
    id: z.ZodNumber;
    roleId: z.ZodNumber;
    createdAt: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Date, string>;
    updatedAt: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Date, string>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    symbol: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    roleId: number;
    id: number;
    createdAt: Date;
    updatedAt: Date;
    name?: string | null | undefined;
    symbol?: string | null | undefined;
}, {
    roleId: number;
    id: number;
    createdAt: string;
    updatedAt: string;
    name?: string | null | undefined;
    symbol?: string | null | undefined;
}>>, z.ZodObject<{
    deletedRequirements: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    deletedRequirements: number[];
}, {
    deletedRequirements: number[];
}>>;

declare const RoleCreationPayloadSchema: z.ZodIntersection<z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    imageUrl: z.ZodOptional<z.ZodString>;
    logic: z.ZodOptional<z.ZodEnum<["AND", "OR", "ANY_OF"]>>;
    visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    anyOfNum: z.ZodOptional<z.ZodNumber>;
    hideFromEyes: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
}, {
    name: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
}>, z.ZodObject<{
    requirements: z.ZodArray<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        isNegated: z.ZodDefault<z.ZodBoolean>;
        visibility: z.ZodDefault<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
        visibilityRoleId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        isNegated: boolean;
        visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
        visibilityRoleId?: number | null | undefined;
    }, {
        isNegated?: boolean | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        visibilityRoleId?: number | null | undefined;
    }>, z.ZodObject<{
        chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodString]>>>;
    }, "strip", z.ZodTypeAny, {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }, {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }>>, z.ZodIntersection<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"FREE">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "FREE";
        data: {};
    }, {
        type: "FREE";
        data?: {} | undefined;
    }>, ...(z.ZodObject<{
        type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
        data: z.ZodObject<{
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
        }, {
            maxAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    }, {
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txCount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    }, {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txValue: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    }, {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"ALLOWLIST">;
        data: z.ZodDefault<z.ZodObject<{
            addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
            fileId: z.ZodOptional<z.ZodString>;
            hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }, {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "ALLOWLIST";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    }, {
        type: "ALLOWLIST";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
        data: z.ZodDefault<z.ZodObject<{
            addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            hideAllowlist: z.ZodOptional<z.ZodBoolean>;
            fileId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            addresses: string[];
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        }, {
            addresses?: string[] | undefined;
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "ALLOWLIST_EMAIL";
        data: {
            addresses: string[];
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        };
    }, {
        type: "ALLOWLIST_EMAIL";
        data?: {
            addresses?: string[] | undefined;
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"CAPTCHA">;
        data: z.ZodDefault<z.ZodObject<{
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxAmount?: number | undefined;
        }, {
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "CAPTCHA";
        data: {
            maxAmount?: number | undefined;
        };
    }, {
        type: "CAPTCHA";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"COIN">;
        chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: number | undefined;
        }, {
            minAmount: number;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }, {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }> | z.ZodObject<{
        type: z.ZodLiteral<"CONTRACT">;
        data: z.ZodObject<{
            id: z.ZodString;
            resultIndex: z.ZodOptional<z.ZodNumber>;
            params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
            resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
            expected: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        }, {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        }>;
        address: z.ZodString;
        chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    }, "strip", z.ZodTypeAny, {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    }, {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    }> | z.ZodObject<{
        type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        data: z.ZodDefault<z.ZodObject<{
            timestamps: z.ZodDefault<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }, {
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        data: {
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }, {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        data?: {
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txCount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            timestamps: z.ZodDefault<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            txCount: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    }, {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txValue: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            timestamps: z.ZodDefault<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            txValue: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    }, {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"DISCORD_ROLE">;
        data: z.ZodObject<{
            serverId: z.ZodString;
            roleId: z.ZodString;
            serverName: z.ZodOptional<z.ZodString>;
            roleName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        }, {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    }, {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
        data: z.ZodObject<{
            memberSince: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            memberSince: number;
        }, {
            memberSince: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    }, {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
        data: z.ZodObject<{
            serverId: z.ZodString;
            serverName: z.ZodOptional<z.ZodString>;
            memberSince: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        }, {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    }, {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
        data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            schemaId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            schemaId: string;
        }, {
            schemaId: string;
        }>, z.ZodUnion<[z.ZodObject<{
            key: z.ZodString;
            val: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            val: string;
        }, {
            key: string;
            val: string;
        }>, z.ZodEffects<z.ZodObject<{
            key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
            val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        }, "strip", z.ZodTypeAny, {
            key?: "" | undefined;
            val?: "" | undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>, {
            key: undefined;
            val: undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>]>>, z.ZodObject<{
            attester: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            attester: string;
        }, {
            attester: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            attester: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            attester: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    }, {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    }> | z.ZodObject<{
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
        type: z.ZodLiteral<"EAS_ATTEST">;
        data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            schemaId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            schemaId: string;
        }, {
            schemaId: string;
        }>, z.ZodUnion<[z.ZodObject<{
            key: z.ZodString;
            val: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            val: string;
        }, {
            key: string;
            val: string;
        }>, z.ZodEffects<z.ZodObject<{
            key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
            val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        }, "strip", z.ZodTypeAny, {
            key?: "" | undefined;
            val?: "" | undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>, {
            key: undefined;
            val: undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>]>>, z.ZodObject<{
            recipient: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            recipient: string;
        }, {
            recipient: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "EAS_ATTEST";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            recipient: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            recipient: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    }, {
        type: "EAS_ATTEST";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"EMAIL_DOMAIN">;
        data: z.ZodObject<{
            domain: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            domain: string;
        }, {
            domain: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    }, {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"EMAIL_VERIFIED">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "EMAIL_VERIFIED";
        data: {};
    }, {
        type: "EMAIL_VERIFIED";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
        data: z.ZodUnion<[z.ZodObject<{
            hash: z.ZodString;
            url: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            hash: string;
            url?: undefined;
        }, {
            hash: string;
            url?: undefined;
        }>, z.ZodObject<{
            url: z.ZodString;
            hash: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            url: string;
            hash?: undefined;
        }, {
            url: string;
            hash?: undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    }, {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
        data: z.ZodObject<{
            id: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
        }, {
            id: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    }, {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    }, {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
        data: z.ZodObject<{
            min: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            min: number;
        }, {
            min: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }, {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FARCASTER_PROFILE">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_PROFILE";
        data: {};
    }, {
        type: "FARCASTER_PROFILE";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FORM_SUBMISSION">;
        data: z.ZodObject<{
            id: z.ZodNumber;
            guildId: z.ZodNumber;
            answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                fieldId: z.ZodString;
                value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                value: string | number;
                fieldId: string;
            }, {
                value: string | number;
                fieldId: string;
            }>, z.ZodIntersection<z.ZodObject<{
                fieldId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fieldId: string;
            }, {
                fieldId: string;
            }>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
                maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }>, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }>>, z.ZodIntersection<z.ZodObject<{
                fieldId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fieldId: string;
            }, {
                fieldId: string;
            }>, z.ZodEffects<z.ZodObject<{
                acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }>, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }>>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        }, {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    }, {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FORM_APPROVAL">;
        data: z.ZodDefault<z.ZodObject<{
            addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
            fileId: z.ZodOptional<z.ZodString>;
            hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }, {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "FORM_APPROVAL";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    }, {
        type: "FORM_APPROVAL";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FUEL_BALANCE">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: number | undefined;
        }, {
            minAmount: number;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    }, {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
        data: z.ZodObject<{
            id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
        data: z.ZodObject<{
            galaxyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            galaxyId: string;
        }, {
            galaxyId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    }, {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITCOIN_PASS">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "GITCOIN_PASS";
        data: {};
    }, {
        type: "GITCOIN_PASS";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITCOIN_STAMP">;
        data: z.ZodDefault<z.ZodObject<{
            stamp: z.ZodOptional<z.ZodString>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            credType: z.ZodOptional<z.ZodString>;
            issuer: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        }, {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "GITCOIN_STAMP";
        data: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        };
    }, {
        type: "GITCOIN_STAMP";
        data?: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITCOIN_SCORE">;
        data: z.ZodObject<{
            id: z.ZodString;
            score: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            score: number;
        }, {
            id: string;
            score: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    }, {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITHUB_STARRING">;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    }, {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
        data: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
        data: z.ZodObject<{
            id: z.ZodNumber;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_MEMBER">;
        data: z.ZodObject<{
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
        }, {
            guildId: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    }, {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_ROLE">;
        data: z.ZodObject<{
            guildId: z.ZodNumber;
            roleId: z.ZodNumber;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
        data: z.ZodObject<{
            guildId: z.ZodNumber;
            roleId: z.ZodNumber;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_ADMIN">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
        }, {
            minAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    }, {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_USER_SINCE">;
        data: z.ZodObject<{
            creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            creationDate: Date;
        }, {
            creationDate: (string | number | Date) & (string | number | Date | undefined);
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: Date;
        };
    }, {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: (string | number | Date) & (string | number | Date | undefined);
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_MINGUILDS">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
        }, {
            minAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    }, {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_SNAPSHOT">;
        data: z.ZodDefault<z.ZodObject<{
            snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                key: string;
            }, {
                value: number;
                key: string;
            }>, "many">>;
            fileId: z.ZodOptional<z.ZodString>;
            isHidden: z.ZodDefault<z.ZodBoolean>;
            guildPlatformId: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            snapshot: {
                value: number;
                key: string;
            }[];
            isHidden: boolean;
            fileId?: string | undefined;
            guildPlatformId?: number | undefined;
        }, {
            snapshot?: {
                value: number;
                key: string;
            }[] | undefined;
            fileId?: string | undefined;
            isHidden?: boolean | undefined;
            guildPlatformId?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_SNAPSHOT";
        data: {
            snapshot: {
                value: number;
                key: string;
            }[];
            isHidden: boolean;
            fileId?: string | undefined;
            guildPlatformId?: number | undefined;
        };
    }, {
        type: "GUILD_SNAPSHOT";
        data?: {
            snapshot?: {
                value: number;
                key: string;
            }[] | undefined;
            fileId?: string | undefined;
            isHidden?: boolean | undefined;
            guildPlatformId?: number | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"LENS_PROFILE">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_PROFILE";
        data: {};
    }, {
        type: "LENS_PROFILE";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
        data: z.ZodObject<{
            min: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            min: number;
        }, {
            min: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }, {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    }, {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"LENS_REACT">;
        data: z.ZodObject<{
            id: z.ZodString;
            reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        }, {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    }, {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"LENS_ACTION">;
        data: z.ZodObject<{
            id: z.ZodString;
            action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
            publishedOn: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        }, {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    }, {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"PAYMENT">;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
        chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    }, {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    }> | z.ZodObject<{
        type: z.ZodEnum<["POAP", "GITPOAP"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    }, {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
        data: z.ZodIntersection<z.ZodObject<{
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
        }, {
            guildId: number;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    }, {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POINTS_AMOUNT">;
        data: z.ZodIntersection<z.ZodObject<{
            guildPlatformId: z.ZodNumber;
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            guildPlatformId: number;
        }, {
            guildId: number;
            guildPlatformId: number;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    }, {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POINTS_RANK">;
        data: z.ZodIntersection<z.ZodObject<{
            guildPlatformId: z.ZodNumber;
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            guildPlatformId: number;
        }, {
            guildId: number;
            guildPlatformId: number;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    }, {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POLYGON_ID_QUERY">;
        data: z.ZodObject<{
            query: z.ZodArray<z.ZodAny, "many">;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            query: any[];
            maxAmount?: number | undefined;
        }, {
            query: any[];
            maxAmount?: number | undefined;
        }>;
        chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }, {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POLYGON_ID_BASIC">;
        data: z.ZodDefault<z.ZodObject<{
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxAmount?: number | undefined;
        }, {
            maxAmount?: number | undefined;
        }>>;
        chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POLYGON_ID_BASIC";
        data: {
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }, {
        type: "POLYGON_ID_BASIC";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
        data: z.ZodObject<{
            space: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            space: string;
        }, {
            space: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    }, {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
        data: z.ZodObject<{
            space: z.ZodString;
            since: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            space: string;
            since: number;
        }, {
            space: string;
            since: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    }, {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
        data: z.ZodObject<{
            since: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            since: number;
        }, {
            since: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    }, {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
        data: z.ZodObject<{
            minRatio: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minRatio: number;
        }, {
            minRatio: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    }, {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_VOTES">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            space: z.ZodOptional<z.ZodString>;
            proposal: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        }, {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    }, {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            space: z.ZodOptional<z.ZodString>;
            state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
            successfulOnly: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        }, {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    }, {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
        chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
        data: z.ZodObject<{
            block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
            strategies: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                params: z.ZodOptional<z.ZodAny>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                params?: any;
            }, {
                name: string;
                params?: any;
            }>, "many">;
            space: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        }, {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }, {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    }, {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
        }, {
            minAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    }, {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            fromNow: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            fromNow?: boolean | undefined;
        }, {
            minAmount: number;
            fromNow?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    }, {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
        data: z.ZodObject<{
            id: z.ZodEnum<["any", "blue", "business", "government"]>;
        }, "strip", z.ZodTypeAny, {
            id: "any" | "blue" | "business" | "government";
        }, {
            id: "any" | "blue" | "business" | "government";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    }, {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data: {};
    }, {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
        data: z.ZodObject<{
            id: z.ZodString;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            maxAmount?: number | undefined;
        }, {
            id: string;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    }, {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
        data: z.ZodObject<{
            app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
        }, "strip", z.ZodTypeAny, {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        }, {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    }, {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    }>)[], z.ZodObject<{
        type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
        data: z.ZodIntersection<z.ZodObject<{
            token0: z.ZodString;
            token1: z.ZodString;
            baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
            countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
            defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
        }, "strip", z.ZodTypeAny, {
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        }, {
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
        chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
    }, "strip", z.ZodTypeAny, {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    }, {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
        data: z.ZodObject<{
            verificationLevel: z.ZodEnum<["device", "orb"]>;
        }, "strip", z.ZodTypeAny, {
            verificationLevel: "device" | "orb";
        }, {
            verificationLevel: "device" | "orb";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    }, {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    }>]>, z.ZodObject<{
        type: z.ZodEnum<["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"]>;
        data: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }, {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }>]>, z.ZodObject<{
        data: z.ZodOptional<z.ZodObject<{
            customName: z.ZodOptional<z.ZodString>;
            customImage: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            customName?: string | undefined;
            customImage?: string | undefined;
        }, {
            customName?: string | undefined;
            customImage?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }, {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }>>>, "many">;
    rolePlatforms: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodObject<{
        platformRoleId: z.ZodOptional<z.ZodString>;
        visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
        platformRoleData: z.ZodOptional<z.ZodOptional<z.ZodAny>>;
        dynamicAmount: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            operation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"LINEAR">;
                params: z.ZodDefault<z.ZodObject<{
                    multiplier: z.ZodDefault<z.ZodNumber>;
                    addition: z.ZodDefault<z.ZodNumber>;
                    shouldFloorResult: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                }, {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                }>>;
                input: z.ZodEffects<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"POINTS">;
                    guildId: z.ZodNumber;
                    guildPlatformId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STATIC">;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "STATIC";
                    value: number;
                }, {
                    type: "STATIC";
                    value: number;
                }>]>, z.ZodTuple<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"POINTS">;
                    guildId: z.ZodNumber;
                    guildPlatformId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STATIC">;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "STATIC";
                    value: number;
                }, {
                    type: "STATIC";
                    value: number;
                }>]>], null>]>, [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }], {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]>;
            }, "strip", z.ZodTypeAny, {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            }, {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"SUM">;
                input: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"POINTS">;
                    guildId: z.ZodNumber;
                    guildPlatformId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STATIC">;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "STATIC";
                    value: number;
                }, {
                    type: "STATIC";
                    value: number;
                }>]>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            }, {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            }>]>;
        }, "strip", z.ZodTypeAny, {
            operation: {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        }, {
            operation: {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        }>>>;
    }, "strip", z.ZodTypeAny, {
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    }, {
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        guildPlatform: z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodDiscriminatedUnion<"platformName", [z.ZodObject<{
            platformName: z.ZodLiteral<"DISCORD">;
            platformGuildData: z.ZodDefault<z.ZodObject<{
                inviteChannel: z.ZodOptional<z.ZodString>;
                invite: z.ZodOptional<z.ZodString>;
                joinButton: z.ZodOptional<z.ZodBoolean>;
                needCaptcha: z.ZodOptional<z.ZodBoolean>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            }, {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            platformName: "DISCORD";
            platformGuildData: {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            };
        }, {
            platformName: "DISCORD";
            platformGuildData?: {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            } | undefined;
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"TELEGRAM">;
        }, "strip", z.ZodTypeAny, {
            platformName: "TELEGRAM";
        }, {
            platformName: "TELEGRAM";
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"GITHUB">;
            platformGuildData: z.ZodDefault<z.ZodObject<{
                platformUserId: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                platformUserId?: number | undefined;
            }, {
                platformUserId?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            platformName: "GITHUB";
            platformGuildData: {
                platformUserId?: number | undefined;
            };
        }, {
            platformName: "GITHUB";
            platformGuildData?: {
                platformUserId?: number | undefined;
            } | undefined;
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"GOOGLE">;
            platformGuildData: z.ZodObject<{
                role: z.ZodDefault<z.ZodOptional<z.ZodEnum<["reader", "commenter", "writer"]>>>;
                mimeType: z.ZodString;
                iconLink: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                role: "reader" | "commenter" | "writer";
                mimeType: string;
                iconLink: string;
            }, {
                mimeType: string;
                iconLink: string;
                role?: "reader" | "commenter" | "writer" | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "GOOGLE";
            platformGuildData: {
                role: "reader" | "commenter" | "writer";
                mimeType: string;
                iconLink: string;
            };
        }, {
            platformName: "GOOGLE";
            platformGuildData: {
                mimeType: string;
                iconLink: string;
                role?: "reader" | "commenter" | "writer" | undefined;
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"CONTRACT_CALL">;
            platformGuildData: z.ZodObject<{
                chain: z.ZodEnum<["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"]>;
                contractAddress: z.ZodString;
                function: z.ZodEnum<["function claim(address payToken, address receiver, bytes calldata signature) payable", "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable"]>;
                argsToSign: z.ZodArray<z.ZodString, "many">;
                name: z.ZodOptional<z.ZodString>;
                symbol: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            }, {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "CONTRACT_CALL";
            platformGuildData: {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            };
        }, {
            platformName: "CONTRACT_CALL";
            platformGuildData: {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"UNIQUE_TEXT">;
            platformGuildData: z.ZodObject<{
                texts: z.ZodArray<z.ZodString, "many">;
                name: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            }, {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "UNIQUE_TEXT";
            platformGuildData: {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        }, {
            platformName: "UNIQUE_TEXT";
            platformGuildData: {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"TEXT">;
            platformGuildData: z.ZodObject<{
                text: z.ZodString;
                name: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            }, {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "TEXT";
            platformGuildData: {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        }, {
            platformName: "TEXT";
            platformGuildData: {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"GUILD_PIN">;
            platformGuildData: z.ZodObject<{
                pinChain: z.ZodEnum<["BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL", ...("BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL")[]]>;
                contractAddress: z.ZodUnion<[z.ZodString, z.ZodString]>;
            }, "strip", z.ZodTypeAny, {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            }, {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "GUILD_PIN";
            platformGuildData: {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            };
        }, {
            platformName: "GUILD_PIN";
            platformGuildData: {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"POLYGON_ID">;
        }, "strip", z.ZodTypeAny, {
            platformName: "POLYGON_ID";
        }, {
            platformName: "POLYGON_ID";
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"POINTS">;
            platformGuildData: z.ZodDefault<z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                imageUrl?: string | undefined;
            }, {
                name?: string | undefined;
                imageUrl?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            platformName: "POINTS";
            platformGuildData: {
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        }, {
            platformName: "POINTS";
            platformGuildData?: {
                name?: string | undefined;
                imageUrl?: string | undefined;
            } | undefined;
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"POAP">;
            platformGuildData: z.ZodObject<{
                fancyId: z.ZodString;
                eventId: z.ZodNumber;
                name: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            }, {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "POAP";
            platformGuildData: {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        }, {
            platformName: "POAP";
            platformGuildData: {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"FORM">;
            platformGuildData: z.ZodObject<{
                formId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                formId: number;
            }, {
                formId: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "FORM";
            platformGuildData: {
                formId: number;
            };
        }, {
            platformName: "FORM";
            platformGuildData: {
                formId: number;
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"GATHER_TOWN">;
            platformGuildData: z.ZodObject<{
                name: z.ZodString;
                gatherSpaceId: z.ZodString;
                gatherApiKey: z.ZodString;
                gatherAffiliation: z.ZodString;
                gatherRole: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            }, {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "GATHER_TOWN";
            platformGuildData: {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            };
        }, {
            platformName: "GATHER_TOWN";
            platformGuildData: {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            };
        }>, z.ZodObject<{
            platformName: z.ZodLiteral<"ERC20">;
            platformGuildData: z.ZodObject<{
                poolId: z.ZodNumber;
                chain: z.ZodEnum<["BASE_MAINNET", "BSC", "MANTLE", "OPTIMISM", "POLYGON", "SEPOLIA"]>;
                contractAddress: z.ZodString;
                name: z.ZodString;
                imageUrl: z.ZodString;
                description: z.ZodString;
                tokenAddress: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            }, {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            platformName: "ERC20";
            platformGuildData: {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            };
        }, {
            platformName: "ERC20";
            platformGuildData: {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            };
        }>]>, z.ZodObject<{
            platformGuildId: z.ZodEffects<z.ZodString, string, string>;
        }, "strip", z.ZodTypeAny, {
            platformGuildId: string;
        }, {
            platformGuildId: string;
        }>>, z.ZodObject<{
            roleIds: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            roleIds?: number[] | undefined;
        }, {
            roleIds?: number[] | undefined;
        }>>, z.ZodObject<{
            roleIds: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            roleIds?: undefined;
        }, {
            roleIds?: undefined;
        }>>;
        guildPlatformId: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        guildPlatform: ({
            platformName: "DISCORD";
            platformGuildData: {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TELEGRAM";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GITHUB";
            platformGuildData: {
                platformUserId?: number | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GOOGLE";
            platformGuildData: {
                role: "reader" | "commenter" | "writer";
                mimeType: string;
                iconLink: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "CONTRACT_CALL";
            platformGuildData: {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "UNIQUE_TEXT";
            platformGuildData: {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TEXT";
            platformGuildData: {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GUILD_PIN";
            platformGuildData: {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POLYGON_ID";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POINTS";
            platformGuildData: {
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POAP";
            platformGuildData: {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "FORM";
            platformGuildData: {
                formId: number;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GATHER_TOWN";
            platformGuildData: {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "ERC20";
            platformGuildData: {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        });
        guildPlatformId?: undefined;
    }, {
        guildPlatform: ({
            platformName: "DISCORD";
            platformGuildData?: {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            } | undefined;
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TELEGRAM";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GITHUB";
            platformGuildData?: {
                platformUserId?: number | undefined;
            } | undefined;
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GOOGLE";
            platformGuildData: {
                mimeType: string;
                iconLink: string;
                role?: "reader" | "commenter" | "writer" | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "CONTRACT_CALL";
            platformGuildData: {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "UNIQUE_TEXT";
            platformGuildData: {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TEXT";
            platformGuildData: {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GUILD_PIN";
            platformGuildData: {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POLYGON_ID";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POINTS";
            platformGuildData?: {
                name?: string | undefined;
                imageUrl?: string | undefined;
            } | undefined;
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POAP";
            platformGuildData: {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "FORM";
            platformGuildData: {
                formId: number;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GATHER_TOWN";
            platformGuildData: {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "ERC20";
            platformGuildData: {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        });
        guildPlatformId?: undefined;
    }>, z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildPlatform: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        guildPlatformId: number;
        guildPlatform?: undefined;
    }, {
        guildPlatformId: number;
        guildPlatform?: undefined;
    }>]>>, "many">>;
}, "strip", z.ZodTypeAny, {
    requirements: ({
        isNegated: boolean;
        visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
        visibilityRoleId?: number | null | undefined;
    } & {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } & (({
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    } | {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    } | {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    } | {
        type: "ALLOWLIST";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    } | {
        type: "ALLOWLIST_EMAIL";
        data: {
            addresses: string[];
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        };
    } | {
        type: "CAPTCHA";
        data: {
            maxAmount?: number | undefined;
        };
    } | {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    } | {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        data: {
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    } | {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    } | {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    } | {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    } | {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    } | {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            attester: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            attester: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    } | {
        type: "EAS_ATTEST";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            recipient: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            recipient: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    } | {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    } | {
        type: "EMAIL_VERIFIED";
        data: {};
    } | {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    } | {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    } | {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    } | {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "FARCASTER_PROFILE";
        data: {};
    } | {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    } | {
        type: "FORM_APPROVAL";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    } | {
        type: "FREE";
        data: {};
    } | {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    } | {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    } | {
        type: "GITCOIN_PASS";
        data: {};
    } | {
        type: "GITCOIN_STAMP";
        data: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        };
    } | {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    } | {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    } | {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    } | {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: Date;
        };
    } | {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_SNAPSHOT";
        data: {
            snapshot: {
                value: number;
                key: string;
            }[];
            isHidden: boolean;
            fileId?: string | undefined;
            guildPlatformId?: number | undefined;
        };
    } | {
        type: "LENS_PROFILE";
        data: {};
    } | {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    } | {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    } | {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    } | {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    } | {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    } | {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    } | {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "POLYGON_ID_BASIC";
        data: {
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    } | {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    } | {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    } | {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    } | {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    } | {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    } | {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    } | {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    } | {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    } | {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    } | {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data: {};
    } | {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    } | {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    } | {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    } | {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    } | {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }) & {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }))[];
    rolePlatforms?: ({
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    } & ({
        guildPlatform: ({
            platformName: "DISCORD";
            platformGuildData: {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TELEGRAM";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GITHUB";
            platformGuildData: {
                platformUserId?: number | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GOOGLE";
            platformGuildData: {
                role: "reader" | "commenter" | "writer";
                mimeType: string;
                iconLink: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "CONTRACT_CALL";
            platformGuildData: {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "UNIQUE_TEXT";
            platformGuildData: {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TEXT";
            platformGuildData: {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GUILD_PIN";
            platformGuildData: {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POLYGON_ID";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POINTS";
            platformGuildData: {
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POAP";
            platformGuildData: {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "FORM";
            platformGuildData: {
                formId: number;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GATHER_TOWN";
            platformGuildData: {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "ERC20";
            platformGuildData: {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        });
        guildPlatformId?: undefined;
    } | {
        guildPlatformId: number;
        guildPlatform?: undefined;
    }))[] | undefined;
}, {
    requirements: ({
        isNegated?: boolean | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        visibilityRoleId?: number | null | undefined;
    } & {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } & (({
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    } | {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    } | {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    } | {
        type: "ALLOWLIST";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    } | {
        type: "ALLOWLIST_EMAIL";
        data?: {
            addresses?: string[] | undefined;
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        } | undefined;
    } | {
        type: "CAPTCHA";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
    } | {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    } | {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        data?: {
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        } | undefined;
    } | {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } | {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } | {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    } | {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    } | {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    } | {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    } | {
        type: "EAS_ATTEST";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    } | {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    } | {
        type: "EMAIL_VERIFIED";
        data?: {} | undefined;
    } | {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    } | {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    } | {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    } | {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "FARCASTER_PROFILE";
        data?: {} | undefined;
    } | {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    } | {
        type: "FORM_APPROVAL";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    } | {
        type: "FREE";
        data?: {} | undefined;
    } | {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    } | {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    } | {
        type: "GITCOIN_PASS";
        data?: {} | undefined;
    } | {
        type: "GITCOIN_STAMP";
        data?: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        } | undefined;
    } | {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    } | {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    } | {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    } | {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    } | {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: (string | number | Date) & (string | number | Date | undefined);
        };
    } | {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_SNAPSHOT";
        data?: {
            snapshot?: {
                value: number;
                key: string;
            }[] | undefined;
            fileId?: string | undefined;
            isHidden?: boolean | undefined;
            guildPlatformId?: number | undefined;
        } | undefined;
    } | {
        type: "LENS_PROFILE";
        data?: {} | undefined;
    } | {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    } | {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    } | {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    } | {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    } | {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    } | {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    } | {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "POLYGON_ID_BASIC";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    } | {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    } | {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    } | {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    } | {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    } | {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    } | {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    } | {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    } | {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    } | {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    } | {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data?: {} | undefined;
    } | {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    } | {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    } | {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    } | {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    } | {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }) & {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }))[];
    rolePlatforms?: ({
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    } & ({
        guildPlatform: ({
            platformName: "DISCORD";
            platformGuildData?: {
                inviteChannel?: string | undefined;
                invite?: string | undefined;
                joinButton?: boolean | undefined;
                needCaptcha?: boolean | undefined;
                name?: string | undefined;
            } | undefined;
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TELEGRAM";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GITHUB";
            platformGuildData?: {
                platformUserId?: number | undefined;
            } | undefined;
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GOOGLE";
            platformGuildData: {
                mimeType: string;
                iconLink: string;
                role?: "reader" | "commenter" | "writer" | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "CONTRACT_CALL";
            platformGuildData: {
                function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
                chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
                contractAddress: string;
                argsToSign: string[];
                name?: string | undefined;
                symbol?: string | undefined;
                imageUrl?: string | undefined;
                description?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "UNIQUE_TEXT";
            platformGuildData: {
                texts: string[];
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "TEXT";
            platformGuildData: {
                text: string;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GUILD_PIN";
            platformGuildData: {
                contractAddress: string;
                pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POLYGON_ID";
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POINTS";
            platformGuildData?: {
                name?: string | undefined;
                imageUrl?: string | undefined;
            } | undefined;
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "POAP";
            platformGuildData: {
                fancyId: string;
                eventId: number;
                name?: string | undefined;
                imageUrl?: string | undefined;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "FORM";
            platformGuildData: {
                formId: number;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "GATHER_TOWN";
            platformGuildData: {
                name: string;
                gatherSpaceId: string;
                gatherApiKey: string;
                gatherAffiliation: string;
                gatherRole: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        }) | ({
            platformName: "ERC20";
            platformGuildData: {
                name: string;
                description: string;
                chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
                contractAddress: string;
                imageUrl: string;
                poolId: number;
                tokenAddress: string;
            };
        } & {
            platformGuildId: string;
        } & {
            roleIds?: number[] | undefined;
        } & {
            roleIds?: undefined;
        });
        guildPlatformId?: undefined;
    } | {
        guildPlatformId: number;
        guildPlatform?: undefined;
    }))[] | undefined;
}>>;
declare const RoleCreationForGuildCreationPayloadSchema: z.ZodIntersection<z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    imageUrl: z.ZodOptional<z.ZodString>;
    logic: z.ZodOptional<z.ZodEnum<["AND", "OR", "ANY_OF"]>>;
    visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    anyOfNum: z.ZodOptional<z.ZodNumber>;
    hideFromEyes: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
}, {
    name: string;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
}>, z.ZodObject<{
    requirements: z.ZodArray<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        isNegated: z.ZodDefault<z.ZodBoolean>;
        visibility: z.ZodDefault<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
        visibilityRoleId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        isNegated: boolean;
        visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
        visibilityRoleId?: number | null | undefined;
    }, {
        isNegated?: boolean | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        visibilityRoleId?: number | null | undefined;
    }>, z.ZodObject<{
        chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodString]>>>;
    }, "strip", z.ZodTypeAny, {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }, {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }>>, z.ZodIntersection<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"FREE">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "FREE";
        data: {};
    }, {
        type: "FREE";
        data?: {} | undefined;
    }>, ...(z.ZodObject<{
        type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
        data: z.ZodObject<{
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
        }, {
            maxAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    }, {
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txCount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    }, {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txValue: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    }, {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"ALLOWLIST">;
        data: z.ZodDefault<z.ZodObject<{
            addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
            fileId: z.ZodOptional<z.ZodString>;
            hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }, {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "ALLOWLIST";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    }, {
        type: "ALLOWLIST";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
        data: z.ZodDefault<z.ZodObject<{
            addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            hideAllowlist: z.ZodOptional<z.ZodBoolean>;
            fileId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            addresses: string[];
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        }, {
            addresses?: string[] | undefined;
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "ALLOWLIST_EMAIL";
        data: {
            addresses: string[];
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        };
    }, {
        type: "ALLOWLIST_EMAIL";
        data?: {
            addresses?: string[] | undefined;
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"CAPTCHA">;
        data: z.ZodDefault<z.ZodObject<{
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxAmount?: number | undefined;
        }, {
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "CAPTCHA";
        data: {
            maxAmount?: number | undefined;
        };
    }, {
        type: "CAPTCHA";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"COIN">;
        chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: number | undefined;
        }, {
            minAmount: number;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }, {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }> | z.ZodObject<{
        type: z.ZodLiteral<"CONTRACT">;
        data: z.ZodObject<{
            id: z.ZodString;
            resultIndex: z.ZodOptional<z.ZodNumber>;
            params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
            resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
            expected: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        }, {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        }>;
        address: z.ZodString;
        chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    }, "strip", z.ZodTypeAny, {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    }, {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    }> | z.ZodObject<{
        type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        data: z.ZodDefault<z.ZodObject<{
            timestamps: z.ZodDefault<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }, {
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        data: {
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }, {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        data?: {
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txCount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            timestamps: z.ZodDefault<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            txCount: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    }, {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        data: z.ZodObject<{
            txValue: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            timestamps: z.ZodDefault<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodNumber>;
                maxAmount: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            txValue: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        }, {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    }, {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"DISCORD_ROLE">;
        data: z.ZodObject<{
            serverId: z.ZodString;
            roleId: z.ZodString;
            serverName: z.ZodOptional<z.ZodString>;
            roleName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        }, {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    }, {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
        data: z.ZodObject<{
            memberSince: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            memberSince: number;
        }, {
            memberSince: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    }, {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
        data: z.ZodObject<{
            serverId: z.ZodString;
            serverName: z.ZodOptional<z.ZodString>;
            memberSince: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        }, {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    }, {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
        data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            schemaId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            schemaId: string;
        }, {
            schemaId: string;
        }>, z.ZodUnion<[z.ZodObject<{
            key: z.ZodString;
            val: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            val: string;
        }, {
            key: string;
            val: string;
        }>, z.ZodEffects<z.ZodObject<{
            key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
            val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        }, "strip", z.ZodTypeAny, {
            key?: "" | undefined;
            val?: "" | undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>, {
            key: undefined;
            val: undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>]>>, z.ZodObject<{
            attester: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            attester: string;
        }, {
            attester: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            attester: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            attester: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    }, {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    }> | z.ZodObject<{
        chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
        type: z.ZodLiteral<"EAS_ATTEST">;
        data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            schemaId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            schemaId: string;
        }, {
            schemaId: string;
        }>, z.ZodUnion<[z.ZodObject<{
            key: z.ZodString;
            val: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            val: string;
        }, {
            key: string;
            val: string;
        }>, z.ZodEffects<z.ZodObject<{
            key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
            val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        }, "strip", z.ZodTypeAny, {
            key?: "" | undefined;
            val?: "" | undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>, {
            key: undefined;
            val: undefined;
        }, {
            key?: "" | undefined;
            val?: "" | undefined;
        }>]>>, z.ZodObject<{
            recipient: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            recipient: string;
        }, {
            recipient: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "EAS_ATTEST";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            recipient: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            recipient: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    }, {
        type: "EAS_ATTEST";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"EMAIL_DOMAIN">;
        data: z.ZodObject<{
            domain: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            domain: string;
        }, {
            domain: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    }, {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"EMAIL_VERIFIED">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "EMAIL_VERIFIED";
        data: {};
    }, {
        type: "EMAIL_VERIFIED";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
        data: z.ZodUnion<[z.ZodObject<{
            hash: z.ZodString;
            url: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            hash: string;
            url?: undefined;
        }, {
            hash: string;
            url?: undefined;
        }>, z.ZodObject<{
            url: z.ZodString;
            hash: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            url: string;
            hash?: undefined;
        }, {
            url: string;
            hash?: undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    }, {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
        data: z.ZodObject<{
            id: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
        }, {
            id: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    }, {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    }, {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
        data: z.ZodObject<{
            min: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            min: number;
        }, {
            min: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }, {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FARCASTER_PROFILE">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "FARCASTER_PROFILE";
        data: {};
    }, {
        type: "FARCASTER_PROFILE";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FORM_SUBMISSION">;
        data: z.ZodObject<{
            id: z.ZodNumber;
            guildId: z.ZodNumber;
            answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                fieldId: z.ZodString;
                value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                value: string | number;
                fieldId: string;
            }, {
                value: string | number;
                fieldId: string;
            }>, z.ZodIntersection<z.ZodObject<{
                fieldId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fieldId: string;
            }, {
                fieldId: string;
            }>, z.ZodEffects<z.ZodObject<{
                minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
                maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
            }, "strip", z.ZodTypeAny, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }>, {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }, {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }>>, z.ZodIntersection<z.ZodObject<{
                fieldId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fieldId: string;
            }, {
                fieldId: string;
            }>, z.ZodEffects<z.ZodObject<{
                acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }>, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }, {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }>>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        }, {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    }, {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FORM_APPROVAL">;
        data: z.ZodDefault<z.ZodObject<{
            addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
            fileId: z.ZodOptional<z.ZodString>;
            hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }, {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "FORM_APPROVAL";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    }, {
        type: "FORM_APPROVAL";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FUEL_BALANCE">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: number | undefined;
        }, {
            minAmount: number;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    }, {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
        data: z.ZodObject<{
            id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
        data: z.ZodObject<{
            galaxyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            galaxyId: string;
        }, {
            galaxyId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    }, {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITCOIN_PASS">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "GITCOIN_PASS";
        data: {};
    }, {
        type: "GITCOIN_PASS";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITCOIN_STAMP">;
        data: z.ZodDefault<z.ZodObject<{
            stamp: z.ZodOptional<z.ZodString>;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
            credType: z.ZodOptional<z.ZodString>;
            issuer: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        }, {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "GITCOIN_STAMP";
        data: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        };
    }, {
        type: "GITCOIN_STAMP";
        data?: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITCOIN_SCORE">;
        data: z.ZodObject<{
            id: z.ZodString;
            score: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            score: number;
        }, {
            id: string;
            score: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    }, {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GITHUB_STARRING">;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    }, {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
        data: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
        data: z.ZodObject<{
            id: z.ZodNumber;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_MEMBER">;
        data: z.ZodObject<{
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
        }, {
            guildId: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    }, {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_ROLE">;
        data: z.ZodObject<{
            guildId: z.ZodNumber;
            roleId: z.ZodNumber;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
        data: z.ZodObject<{
            guildId: z.ZodNumber;
            roleId: z.ZodNumber;
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_ADMIN">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
        }, {
            minAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    }, {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_USER_SINCE">;
        data: z.ZodObject<{
            creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            creationDate: Date;
        }, {
            creationDate: (string | number | Date) & (string | number | Date | undefined);
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: Date;
        };
    }, {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: (string | number | Date) & (string | number | Date | undefined);
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_MINGUILDS">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
        }, {
            minAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    }, {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"GUILD_SNAPSHOT">;
        data: z.ZodDefault<z.ZodObject<{
            snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                key: string;
            }, {
                value: number;
                key: string;
            }>, "many">>;
            fileId: z.ZodOptional<z.ZodString>;
            isHidden: z.ZodDefault<z.ZodBoolean>;
            guildPlatformId: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            snapshot: {
                value: number;
                key: string;
            }[];
            isHidden: boolean;
            fileId?: string | undefined;
            guildPlatformId?: number | undefined;
        }, {
            snapshot?: {
                value: number;
                key: string;
            }[] | undefined;
            fileId?: string | undefined;
            isHidden?: boolean | undefined;
            guildPlatformId?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "GUILD_SNAPSHOT";
        data: {
            snapshot: {
                value: number;
                key: string;
            }[];
            isHidden: boolean;
            fileId?: string | undefined;
            guildPlatformId?: number | undefined;
        };
    }, {
        type: "GUILD_SNAPSHOT";
        data?: {
            snapshot?: {
                value: number;
                key: string;
            }[] | undefined;
            fileId?: string | undefined;
            isHidden?: boolean | undefined;
            guildPlatformId?: number | undefined;
        } | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"LENS_PROFILE">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_PROFILE";
        data: {};
    }, {
        type: "LENS_PROFILE";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
        data: z.ZodObject<{
            min: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            min: number;
        }, {
            min: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }, {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    }, {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"LENS_REACT">;
        data: z.ZodObject<{
            id: z.ZodString;
            reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        }, {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    }, {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"LENS_ACTION">;
        data: z.ZodObject<{
            id: z.ZodString;
            action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
            publishedOn: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        }, {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    }, {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"PAYMENT">;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
        chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    }, {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    }> | z.ZodObject<{
        type: z.ZodEnum<["POAP", "GITPOAP"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    }, {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
        data: z.ZodIntersection<z.ZodObject<{
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
        }, {
            guildId: number;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    }, {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POINTS_AMOUNT">;
        data: z.ZodIntersection<z.ZodObject<{
            guildPlatformId: z.ZodNumber;
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            guildPlatformId: number;
        }, {
            guildId: number;
            guildPlatformId: number;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    }, {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POINTS_RANK">;
        data: z.ZodIntersection<z.ZodObject<{
            guildPlatformId: z.ZodNumber;
            guildId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            guildId: number;
            guildPlatformId: number;
        }, {
            guildId: number;
            guildPlatformId: number;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    }, {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POLYGON_ID_QUERY">;
        data: z.ZodObject<{
            query: z.ZodArray<z.ZodAny, "many">;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            query: any[];
            maxAmount?: number | undefined;
        }, {
            query: any[];
            maxAmount?: number | undefined;
        }>;
        chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }, {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"POLYGON_ID_BASIC">;
        data: z.ZodDefault<z.ZodObject<{
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxAmount?: number | undefined;
        }, {
            maxAmount?: number | undefined;
        }>>;
        chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "POLYGON_ID_BASIC";
        data: {
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }, {
        type: "POLYGON_ID_BASIC";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
        data: z.ZodObject<{
            space: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            space: string;
        }, {
            space: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    }, {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
        data: z.ZodObject<{
            space: z.ZodString;
            since: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            space: string;
            since: number;
        }, {
            space: string;
            since: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    }, {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
        data: z.ZodObject<{
            since: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            since: number;
        }, {
            since: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    }, {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
        data: z.ZodObject<{
            minRatio: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minRatio: number;
        }, {
            minRatio: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    }, {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_VOTES">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            space: z.ZodOptional<z.ZodString>;
            proposal: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        }, {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    }, {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            space: z.ZodOptional<z.ZodString>;
            state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
            successfulOnly: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        }, {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    }, {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
        chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
        data: z.ZodObject<{
            block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
            strategies: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                params: z.ZodOptional<z.ZodAny>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                params?: any;
            }, {
                name: string;
                params?: any;
            }>, "many">;
            space: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        }, {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }, {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
        data: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    }, {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
        }, {
            minAmount: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    }, {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
        data: z.ZodObject<{
            minAmount: z.ZodNumber;
            fromNow: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            fromNow?: boolean | undefined;
        }, {
            minAmount: number;
            fromNow?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    }, {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
        data: z.ZodObject<{
            id: z.ZodEnum<["any", "blue", "business", "government"]>;
        }, "strip", z.ZodTypeAny, {
            id: "any" | "blue" | "business" | "government";
        }, {
            id: "any" | "blue" | "business" | "government";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    }, {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
        data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data: {};
    }, {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data?: {} | undefined;
    }> | z.ZodObject<{
        type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
        data: z.ZodObject<{
            id: z.ZodString;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            maxAmount?: number | undefined;
        }, {
            id: string;
            maxAmount?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    }, {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    }> | z.ZodObject<{
        type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
        data: z.ZodObject<{
            app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
        }, "strip", z.ZodTypeAny, {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        }, {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    }, {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    }>)[], z.ZodObject<{
        type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
        data: z.ZodIntersection<z.ZodObject<{
            token0: z.ZodString;
            token1: z.ZodString;
            baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
            countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
            defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
        }, "strip", z.ZodTypeAny, {
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        }, {
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount: number;
            maxAmount?: undefined;
        }, {
            minAmount: number;
            maxAmount?: undefined;
        }>, z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount?: undefined;
        }, {
            maxAmount: number;
            minAmount?: undefined;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodNumber;
            maxAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>, {
            maxAmount: number;
            minAmount: number;
        }, {
            maxAmount: number;
            minAmount: number;
        }>]>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodUndefined;
            maxAmount: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>, {
            minAmount: number;
            maxAmount: undefined;
        }, {
            minAmount?: undefined;
            maxAmount?: undefined;
        }>]>>;
        chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
    }, "strip", z.ZodTypeAny, {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    }, {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
        data: z.ZodObject<{
            verificationLevel: z.ZodEnum<["device", "orb"]>;
        }, "strip", z.ZodTypeAny, {
            verificationLevel: "device" | "orb";
        }, {
            verificationLevel: "device" | "orb";
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    }, {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    }>]>, z.ZodObject<{
        type: z.ZodEnum<["ERC721", "ERC1155", "NOUNS", "ERC20", "MIRROR_COLLECT", "SOUND_ARTIST_BACKED", "SOUND_COLLECTED", "SOUND_ARTIST", "SOUND_TOP_COLLECTOR", "SOUND_NFTS", "DISCO", "UNLOCK", "JUICEBOX", "NOOX", "YUP", "REP3", "PARALLEL_ID", "PARALLEL_SANCTIONS_SAFE", "PARALLEL_TRAIT"]>;
        data: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }, {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }>]>, z.ZodObject<{
        data: z.ZodOptional<z.ZodObject<{
            customName: z.ZodOptional<z.ZodString>;
            customImage: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            customName?: string | undefined;
            customImage?: string | undefined;
        }, {
            customName?: string | undefined;
            customImage?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }, {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }>>>, "many">;
    rolePlatforms: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodObject<{
        platformRoleId: z.ZodOptional<z.ZodString>;
        visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
        platformRoleData: z.ZodOptional<z.ZodOptional<z.ZodAny>>;
        dynamicAmount: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            operation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"LINEAR">;
                params: z.ZodDefault<z.ZodObject<{
                    multiplier: z.ZodDefault<z.ZodNumber>;
                    addition: z.ZodDefault<z.ZodNumber>;
                    shouldFloorResult: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                }, {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                }>>;
                input: z.ZodEffects<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"POINTS">;
                    guildId: z.ZodNumber;
                    guildPlatformId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STATIC">;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "STATIC";
                    value: number;
                }, {
                    type: "STATIC";
                    value: number;
                }>]>, z.ZodTuple<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"POINTS">;
                    guildId: z.ZodNumber;
                    guildPlatformId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STATIC">;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "STATIC";
                    value: number;
                }, {
                    type: "STATIC";
                    value: number;
                }>]>], null>]>, [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }], {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]>;
            }, "strip", z.ZodTypeAny, {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            }, {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"SUM">;
                input: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                    roleId: z.ZodNumber;
                    requirementId: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                }, {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"POINTS">;
                    guildId: z.ZodNumber;
                    guildPlatformId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }, {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STATIC">;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "STATIC";
                    value: number;
                }, {
                    type: "STATIC";
                    value: number;
                }>]>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            }, {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            }>]>;
        }, "strip", z.ZodTypeAny, {
            operation: {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        }, {
            operation: {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        }>>>;
    }, "strip", z.ZodTypeAny, {
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    }, {
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    }>, z.ZodObject<{
        guildPlatformIndex: z.ZodNumber;
        guildPlatformId: z.ZodUndefined;
        guildPlatform: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        guildPlatformIndex: number;
        guildPlatformId?: undefined;
        guildPlatform?: undefined;
    }, {
        guildPlatformIndex: number;
        guildPlatformId?: undefined;
        guildPlatform?: undefined;
    }>>, "many">>;
}, "strip", z.ZodTypeAny, {
    requirements: ({
        isNegated: boolean;
        visibility: "PUBLIC" | "PRIVATE" | "HIDDEN";
        visibilityRoleId?: number | null | undefined;
    } & {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } & (({
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    } | {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    } | {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
        address?: string | null | undefined;
    } | {
        type: "ALLOWLIST";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    } | {
        type: "ALLOWLIST_EMAIL";
        data: {
            addresses: string[];
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        };
    } | {
        type: "CAPTCHA";
        data: {
            maxAmount?: number | undefined;
        };
    } | {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    } | {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        data: {
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    } | {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            timestamps: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address?: string | null | undefined;
    } | {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    } | {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    } | {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    } | {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            attester: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            attester: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    } | {
        type: "EAS_ATTEST";
        data: ({
            schemaId: string;
        } & {
            key: string;
            val: string;
        } & {
            recipient: string;
        }) | ({
            schemaId: string;
        } & {
            key: undefined;
            val: undefined;
        } & {
            recipient: string;
        });
        chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
    } | {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    } | {
        type: "EMAIL_VERIFIED";
        data: {};
    } | {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    } | {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    } | {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    } | {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "FARCASTER_PROFILE";
        data: {};
    } | {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    } | {
        type: "FORM_APPROVAL";
        data: {
            addresses: string[];
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        };
    } | {
        type: "FREE";
        data: {};
    } | {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    } | {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    } | {
        type: "GITCOIN_PASS";
        data: {};
    } | {
        type: "GITCOIN_STAMP";
        data: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        };
    } | {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    } | {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    } | {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    } | {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: Date;
        };
    } | {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_SNAPSHOT";
        data: {
            snapshot: {
                value: number;
                key: string;
            }[];
            isHidden: boolean;
            fileId?: string | undefined;
            guildPlatformId?: number | undefined;
        };
    } | {
        type: "LENS_PROFILE";
        data: {};
    } | {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    } | {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    } | {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    } | {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    } | {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    } | {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
    } | {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "POLYGON_ID_BASIC";
        data: {
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    } | {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    } | {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    } | {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    } | {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    } | {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    } | {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    } | {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    } | {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    } | {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    } | {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data: {};
    } | {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    } | {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency: "token0" | "token1";
            countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount: undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    } | {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    } | {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    } | {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }) & {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }))[];
    rolePlatforms?: ({
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                params: {
                    multiplier: number;
                    addition: number;
                    shouldFloorResult?: boolean | undefined;
                };
                type: "LINEAR";
                input: [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }];
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    value: number;
                    roleId: number;
                    requirementId: number;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    } & {
        guildPlatformIndex: number;
        guildPlatformId?: undefined;
        guildPlatform?: undefined;
    })[] | undefined;
}, {
    requirements: ({
        isNegated?: boolean | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        visibilityRoleId?: number | null | undefined;
    } & {
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } & (({
        type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
        data: {
            maxAmount: number;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    } | {
        type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    } | {
        type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
        };
        chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
        address?: string | null | undefined;
    } | {
        type: "ALLOWLIST";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    } | {
        type: "ALLOWLIST_EMAIL";
        data?: {
            addresses?: string[] | undefined;
            hideAllowlist?: boolean | undefined;
            fileId?: string | undefined;
        } | undefined;
    } | {
        type: "CAPTCHA";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
    } | {
        type: "COIN";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "CONTRACT";
        data: {
            params: (string | number | boolean)[];
            expected: string;
            id: string;
            resultMatch: "=" | ">" | "<" | ">=" | "<=";
            resultIndex?: number | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
        address: string;
    } | {
        type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        data?: {
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        } | undefined;
    } | {
        type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
        data: {
            txCount: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } | {
        type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
        data: {
            txValue: number;
            maxAmount?: number | undefined;
            minAmount?: number | undefined;
            timestamps?: {
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            } | undefined;
        };
        chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
        address?: string | null | undefined;
    } | {
        type: "DISCORD_ROLE";
        data: {
            roleId: string;
            serverId: string;
            serverName?: string | undefined;
            roleName?: string | undefined;
        };
    } | {
        type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
        data: {
            memberSince: number;
        };
    } | {
        type: "DISCORD_MEMBER_SINCE";
        data: {
            serverId: string;
            serverName?: string | undefined;
            memberSince?: number | undefined;
        };
    } | {
        type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            attester: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    } | {
        type: "EAS_ATTEST";
        data: (({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) & ((({
            schemaId: string;
        } & ({
            key: string;
            val: string;
        } | {
            key?: "" | undefined;
            val?: "" | undefined;
        })) & {
            recipient: string;
        }) | undefined);
        chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
    } | {
        type: "EMAIL_DOMAIN";
        data: {
            domain: string;
        };
    } | {
        type: "EMAIL_VERIFIED";
        data?: {} | undefined;
    } | {
        type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
        data: {
            hash: string;
            url?: undefined;
        } | {
            url: string;
            hash?: undefined;
        };
    } | {
        type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
        data: {
            id: number;
        };
    } | {
        type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
        data: {
            id: string;
        };
    } | {
        type: "FARCASTER_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "FARCASTER_PROFILE";
        data?: {} | undefined;
    } | {
        type: "FORM_SUBMISSION";
        data: {
            guildId: number;
            id: number;
            answers?: ({
                value: string | number;
                fieldId: string;
            } | ({
                fieldId: string;
            } & {
                minAmount?: string | number | undefined;
                maxAmount?: string | number | undefined;
            }) | ({
                fieldId: string;
            } & {
                acceptedAnswers?: string[] | undefined;
                rejectedAnswers?: string[] | undefined;
            }))[] | undefined;
        };
    } | {
        type: "FORM_APPROVAL";
        data?: {
            addresses?: string[] | undefined;
            fileId?: string | undefined;
            hideAllowlist?: boolean | undefined;
        } | undefined;
    } | {
        type: "FREE";
        data?: {} | undefined;
    } | {
        type: "FUEL_BALANCE";
        data: {
            minAmount: number;
            maxAmount?: number | undefined;
        };
    } | {
        type: "FUEL_TRANSACTIONS";
        data: {
            id?: "script" | "mint" | "create" | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GALAXY" | "GALAXY_PARTICIPATION";
        data: {
            galaxyId: string;
        };
    } | {
        type: "GITCOIN_PASS";
        data?: {} | undefined;
    } | {
        type: "GITCOIN_STAMP";
        data?: {
            stamp?: string | undefined;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
            credType?: string | undefined;
            issuer?: string | undefined;
        } | undefined;
    } | {
        type: "GITCOIN_SCORE";
        data: {
            id: string;
            score: number;
        };
    } | {
        type: "GITHUB_STARRING";
        data: {
            id: string;
        };
    } | {
        type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
        data?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    } | {
        type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
        data: {
            id: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_MEMBER";
        data: {
            guildId: number;
        };
    } | {
        type: "GUILD_ROLE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ROLE_RELATIVE";
        data: {
            guildId: number;
            roleId: number;
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    } | {
        type: "GUILD_ADMIN";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_USER_SINCE";
        data: {
            creationDate: (string | number | Date) & (string | number | Date | undefined);
        };
    } | {
        type: "GUILD_MINGUILDS";
        data: {
            minAmount: number;
        };
    } | {
        type: "GUILD_SNAPSHOT";
        data?: {
            snapshot?: {
                value: number;
                key: string;
            }[] | undefined;
            fileId?: string | undefined;
            isHidden?: boolean | undefined;
            guildPlatformId?: number | undefined;
        } | undefined;
    } | {
        type: "LENS_PROFILE";
        data?: {} | undefined;
    } | {
        type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
        data: {
            min: number;
        };
    } | {
        type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
        data: {
            id: string;
        };
    } | {
        type: "LENS_REACT";
        data: {
            id: string;
            reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
        };
    } | {
        type: "LENS_ACTION";
        data: {
            id: string;
            action: "MIRROR" | "QUOTE" | "COMMENT";
            publishedOn?: string | undefined;
        };
    } | {
        type: "PAYMENT";
        data: {
            id: string;
        };
        chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
        address: string;
    } | {
        type: "POAP" | "GITPOAP";
        data: {
            id: string;
        };
    } | {
        type: "POINTS_TOTAL_AMOUNT";
        data: ({
            guildId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_AMOUNT";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    } | {
        type: "POINTS_RANK";
        data: ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            guildId: number;
            guildPlatformId: number;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
    } | {
        type: "POLYGON_ID_QUERY";
        data: {
            query: any[];
            maxAmount?: number | undefined;
        };
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "POLYGON_ID_BASIC";
        data?: {
            maxAmount?: number | undefined;
        } | undefined;
        chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    } | {
        type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
        data: {
            space: string;
        };
    } | {
        type: "SNAPSHOT_FOLLOW_SINCE";
        data: {
            space: string;
            since: number;
        };
    } | {
        type: "SNAPSHOT_USER_SINCE";
        data: {
            since: number;
        };
    } | {
        type: "SNAPSHOT_MAJORITY_VOTES";
        data: {
            minRatio: number;
        };
    } | {
        type: "SNAPSHOT_VOTES";
        data: {
            minAmount: number;
            space?: string | undefined;
            proposal?: string | undefined;
        };
    } | {
        type: "SNAPSHOT_PROPOSALS";
        data: {
            minAmount: number;
            space?: string | undefined;
            state?: "active" | "pending" | "closed" | undefined;
            successfulOnly?: boolean | undefined;
        };
    } | {
        type: "SNAPSHOT_STRATEGY";
        data: {
            block: number | "latest";
            strategies: {
                name: string;
                params?: any;
            }[];
            space?: string | undefined;
        };
        chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    } | {
        type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
        data: {
            id: string;
        };
    } | {
        type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
        data: {
            minAmount: number;
        };
    } | {
        type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
        data: {
            minAmount: number;
            fromNow?: boolean | undefined;
        };
    } | {
        type: "TWITTER_ACCOUNT_VERIFIED";
        data: {
            id: "any" | "blue" | "business" | "government";
        };
    } | {
        type: "TWITTER_ACCOUNT_PROTECTED";
        data?: {} | undefined;
    } | {
        type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
        data: {
            id: string;
            maxAmount?: number | undefined;
        };
    } | {
        type: "UNISWAP_V3_POSITIONS";
        data: ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount: number;
            maxAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount?: undefined;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            maxAmount: number;
            minAmount: number;
        }) | ({
            token0: string;
            token1: string;
            baseCurrency?: "token0" | "token1" | undefined;
            countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
            defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
        } & {
            minAmount?: undefined;
            maxAmount?: undefined;
        });
        chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
    } | {
        type: "WEB3INBOX_SUBSCRIBERS";
        data: {
            app: "GUILD" | "WEB3INBOX" | "SHEFI";
        };
    } | {
        type: "WORLD_ID_VERIFICATION";
        data: {
            verificationLevel: "device" | "orb";
        };
    } | {
        type: "ERC20" | "ERC721" | "ERC1155" | "NOUNS" | "MIRROR_COLLECT" | "SOUND_ARTIST_BACKED" | "SOUND_COLLECTED" | "SOUND_ARTIST" | "SOUND_TOP_COLLECTOR" | "SOUND_NFTS" | "DISCO" | "UNLOCK" | "JUICEBOX" | "NOOX" | "YUP" | "REP3" | "PARALLEL_ID" | "PARALLEL_SANCTIONS_SAFE" | "PARALLEL_TRAIT";
        data?: any;
    }) & {
        data?: {
            customName?: string | undefined;
            customImage?: string | undefined;
        } | undefined;
    }))[];
    rolePlatforms?: ({
        platformRoleId?: string | undefined;
        visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
        platformRoleData?: any;
        dynamicAmount?: {
            operation: {
                type: "LINEAR";
                input: {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                } | [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] | ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ({
                    type: "STATIC";
                    value: number;
                } & [{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }]) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                }) | ([{
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                }] & {
                    type: "STATIC";
                    value: number;
                });
                params?: {
                    multiplier?: number | undefined;
                    addition?: number | undefined;
                    shouldFloorResult?: boolean | undefined;
                } | undefined;
            } | {
                type: "SUM";
                input: ({
                    type: "REQUIREMENT_AMOUNT";
                    roleId: number;
                    requirementId: number;
                } | {
                    type: "REQUIREMENT_ACCESS";
                    roleId: number;
                    requirementId: number;
                    value?: number | undefined;
                } | {
                    guildId: number;
                    type: "POINTS";
                    guildPlatformId: number;
                } | {
                    type: "STATIC";
                    value: number;
                })[];
            };
        } | undefined;
    } & {
        guildPlatformIndex: number;
        guildPlatformId?: undefined;
        guildPlatform?: undefined;
    })[] | undefined;
}>>;
declare const RoleUpdatePayloadSchema: z.ZodEffects<z.ZodIntersection<z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    imageUrl: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    logic: z.ZodOptional<z.ZodOptional<z.ZodEnum<["AND", "OR", "ANY_OF"]>>>;
    visibility: z.ZodOptional<z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>>;
    anyOfNum: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    hideFromEyes: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
}, {
    name?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
}>, z.ZodObject<{
    position: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    position?: number | undefined;
}, {
    position?: number | undefined;
}>>, {
    name?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
} & {
    position?: number | undefined;
}, {
    name?: string | undefined;
    description?: string | undefined;
    imageUrl?: string | undefined;
    logic?: "AND" | "OR" | "ANY_OF" | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    anyOfNum?: number | undefined;
    hideFromEyes?: boolean | undefined;
} & {
    position?: number | undefined;
}>;

declare const RoleRewardCreationPayloadSchema: z.ZodIntersection<z.ZodObject<{
    platformRoleId: z.ZodOptional<z.ZodString>;
    visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    platformRoleData: z.ZodOptional<z.ZodOptional<z.ZodAny>>;
    dynamicAmount: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        operation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"LINEAR">;
            params: z.ZodDefault<z.ZodObject<{
                multiplier: z.ZodDefault<z.ZodNumber>;
                addition: z.ZodDefault<z.ZodNumber>;
                shouldFloorResult: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            }, {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            }>>;
            input: z.ZodEffects<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>, z.ZodTuple<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>], null>]>, [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }], {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]>;
        }, "strip", z.ZodTypeAny, {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        }, {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SUM">;
            input: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        }, {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        }>]>;
    }, "strip", z.ZodTypeAny, {
        operation: {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    }, {
        operation: {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    guildPlatform: z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodDiscriminatedUnion<"platformName", [z.ZodObject<{
        platformName: z.ZodLiteral<"DISCORD">;
        platformGuildData: z.ZodDefault<z.ZodObject<{
            inviteChannel: z.ZodOptional<z.ZodString>;
            invite: z.ZodOptional<z.ZodString>;
            joinButton: z.ZodOptional<z.ZodBoolean>;
            needCaptcha: z.ZodOptional<z.ZodBoolean>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        }, {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        platformName: "DISCORD";
        platformGuildData: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        };
    }, {
        platformName: "DISCORD";
        platformGuildData?: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"TELEGRAM">;
    }, "strip", z.ZodTypeAny, {
        platformName: "TELEGRAM";
    }, {
        platformName: "TELEGRAM";
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GITHUB">;
        platformGuildData: z.ZodDefault<z.ZodObject<{
            platformUserId: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            platformUserId?: number | undefined;
        }, {
            platformUserId?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GITHUB";
        platformGuildData: {
            platformUserId?: number | undefined;
        };
    }, {
        platformName: "GITHUB";
        platformGuildData?: {
            platformUserId?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GOOGLE">;
        platformGuildData: z.ZodObject<{
            role: z.ZodDefault<z.ZodOptional<z.ZodEnum<["reader", "commenter", "writer"]>>>;
            mimeType: z.ZodString;
            iconLink: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            role: "reader" | "commenter" | "writer";
            mimeType: string;
            iconLink: string;
        }, {
            mimeType: string;
            iconLink: string;
            role?: "reader" | "commenter" | "writer" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GOOGLE";
        platformGuildData: {
            role: "reader" | "commenter" | "writer";
            mimeType: string;
            iconLink: string;
        };
    }, {
        platformName: "GOOGLE";
        platformGuildData: {
            mimeType: string;
            iconLink: string;
            role?: "reader" | "commenter" | "writer" | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"CONTRACT_CALL">;
        platformGuildData: z.ZodObject<{
            chain: z.ZodEnum<["ETHEREUM", "BASE_MAINNET", "OPTIMISM", "BSC", "CRONOS", "POLYGON", "MANTLE", "ZKSYNC_ERA", "LINEA", "CYBER", "ARBITRUM", "SCROLL", "TAIKO", "BLAST_MAINNET", "X1", "CORE_DAO", "METIS", "NEON_EVM", "POLYGON_ZKEVM", "ZETACHAIN", "MINT", "MODE", "AVALANCHE", "LISK", "SEPOLIA"]>;
            contractAddress: z.ZodString;
            function: z.ZodEnum<["function claim(address payToken, address receiver, bytes calldata signature) payable", "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable"]>;
            argsToSign: z.ZodArray<z.ZodString, "many">;
            name: z.ZodOptional<z.ZodString>;
            symbol: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        }, {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    }, {
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"UNIQUE_TEXT">;
        platformGuildData: z.ZodObject<{
            texts: z.ZodArray<z.ZodString, "many">;
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"TEXT">;
        platformGuildData: z.ZodObject<{
            text: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GUILD_PIN">;
        platformGuildData: z.ZodObject<{
            pinChain: z.ZodEnum<["BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL", ...("BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL")[]]>;
            contractAddress: z.ZodUnion<[z.ZodString, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        }, {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    }, {
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"POLYGON_ID">;
    }, "strip", z.ZodTypeAny, {
        platformName: "POLYGON_ID";
    }, {
        platformName: "POLYGON_ID";
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"POINTS">;
        platformGuildData: z.ZodDefault<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        platformName: "POINTS";
        platformGuildData: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "POINTS";
        platformGuildData?: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"POAP">;
        platformGuildData: z.ZodObject<{
            fancyId: z.ZodString;
            eventId: z.ZodNumber;
            name: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }, {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }, {
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"FORM">;
        platformGuildData: z.ZodObject<{
            formId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            formId: number;
        }, {
            formId: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    }, {
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"GATHER_TOWN">;
        platformGuildData: z.ZodObject<{
            name: z.ZodString;
            gatherSpaceId: z.ZodString;
            gatherApiKey: z.ZodString;
            gatherAffiliation: z.ZodString;
            gatherRole: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        }, {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    }, {
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    }>, z.ZodObject<{
        platformName: z.ZodLiteral<"ERC20">;
        platformGuildData: z.ZodObject<{
            poolId: z.ZodNumber;
            chain: z.ZodEnum<["BASE_MAINNET", "BSC", "MANTLE", "OPTIMISM", "POLYGON", "SEPOLIA"]>;
            contractAddress: z.ZodString;
            name: z.ZodString;
            imageUrl: z.ZodString;
            description: z.ZodString;
            tokenAddress: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        }, {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }, {
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    }>]>, z.ZodObject<{
        platformGuildId: z.ZodEffects<z.ZodString, string, string>;
    }, "strip", z.ZodTypeAny, {
        platformGuildId: string;
    }, {
        platformGuildId: string;
    }>>, z.ZodObject<{
        roleIds: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        roleIds?: number[] | undefined;
    }, {
        roleIds?: number[] | undefined;
    }>>, z.ZodObject<{
        roleIds: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        roleIds?: undefined;
    }, {
        roleIds?: undefined;
    }>>;
    guildPlatformId: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    guildPlatform: ({
        platformName: "DISCORD";
        platformGuildData: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "TELEGRAM";
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GITHUB";
        platformGuildData: {
            platformUserId?: number | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GOOGLE";
        platformGuildData: {
            role: "reader" | "commenter" | "writer";
            mimeType: string;
            iconLink: string;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "POLYGON_ID";
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "POINTS";
        platformGuildData: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    });
    guildPlatformId?: undefined;
}, {
    guildPlatform: ({
        platformName: "DISCORD";
        platformGuildData?: {
            inviteChannel?: string | undefined;
            invite?: string | undefined;
            joinButton?: boolean | undefined;
            needCaptcha?: boolean | undefined;
            name?: string | undefined;
        } | undefined;
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "TELEGRAM";
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GITHUB";
        platformGuildData?: {
            platformUserId?: number | undefined;
        } | undefined;
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GOOGLE";
        platformGuildData: {
            mimeType: string;
            iconLink: string;
            role?: "reader" | "commenter" | "writer" | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "CONTRACT_CALL";
        platformGuildData: {
            function: "function claim(address payToken, address receiver, bytes calldata signature) payable" | "function claim(uint256 amount, address receiver, uint256 userId, uint256 signedAt, bytes calldata signature) payable";
            chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_MAINNET" | "SEPOLIA" | "ZKSYNC_ERA" | "POLYGON_ZKEVM" | "NEON_EVM" | "LINEA" | "MANTLE" | "SCROLL" | "BLAST_MAINNET" | "ZETACHAIN" | "CORE_DAO" | "X1" | "CYBER" | "TAIKO" | "MINT" | "MODE" | "LISK";
            contractAddress: string;
            argsToSign: string[];
            name?: string | undefined;
            symbol?: string | undefined;
            imageUrl?: string | undefined;
            description?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "UNIQUE_TEXT";
        platformGuildData: {
            texts: string[];
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "TEXT";
        platformGuildData: {
            text: string;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GUILD_PIN";
        platformGuildData: {
            contractAddress: string;
            pinChain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | "FUEL";
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "POLYGON_ID";
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "POINTS";
        platformGuildData?: {
            name?: string | undefined;
            imageUrl?: string | undefined;
        } | undefined;
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "POAP";
        platformGuildData: {
            fancyId: string;
            eventId: number;
            name?: string | undefined;
            imageUrl?: string | undefined;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "FORM";
        platformGuildData: {
            formId: number;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "GATHER_TOWN";
        platformGuildData: {
            name: string;
            gatherSpaceId: string;
            gatherApiKey: string;
            gatherAffiliation: string;
            gatherRole: string;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    }) | ({
        platformName: "ERC20";
        platformGuildData: {
            name: string;
            description: string;
            chain: "BSC" | "POLYGON" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "MANTLE";
            contractAddress: string;
            imageUrl: string;
            poolId: number;
            tokenAddress: string;
        };
    } & {
        platformGuildId: string;
    } & {
        roleIds?: number[] | undefined;
    } & {
        roleIds?: undefined;
    });
    guildPlatformId?: undefined;
}>, z.ZodObject<{
    guildPlatformId: z.ZodNumber;
    guildPlatform: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    guildPlatformId: number;
    guildPlatform?: undefined;
}, {
    guildPlatformId: number;
    guildPlatform?: undefined;
}>]>>;
declare const RoleRewardCreationForGuildCreationPayloadSchema: z.ZodIntersection<z.ZodObject<{
    platformRoleId: z.ZodOptional<z.ZodString>;
    visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    platformRoleData: z.ZodOptional<z.ZodOptional<z.ZodAny>>;
    dynamicAmount: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        operation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"LINEAR">;
            params: z.ZodDefault<z.ZodObject<{
                multiplier: z.ZodDefault<z.ZodNumber>;
                addition: z.ZodDefault<z.ZodNumber>;
                shouldFloorResult: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            }, {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            }>>;
            input: z.ZodEffects<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>, z.ZodTuple<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>], null>]>, [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }], {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]>;
        }, "strip", z.ZodTypeAny, {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        }, {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SUM">;
            input: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        }, {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        }>]>;
    }, "strip", z.ZodTypeAny, {
        operation: {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    }, {
        operation: {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}>, z.ZodObject<{
    guildPlatformIndex: z.ZodNumber;
    guildPlatformId: z.ZodUndefined;
    guildPlatform: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    guildPlatformIndex: number;
    guildPlatformId?: undefined;
    guildPlatform?: undefined;
}, {
    guildPlatformIndex: number;
    guildPlatformId?: undefined;
    guildPlatform?: undefined;
}>>;
declare const RoleRewardUpdatePayloadSchema: z.ZodEffects<z.ZodObject<{
    platformRoleId: z.ZodOptional<z.ZodString>;
    visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE", "HIDDEN"]>>;
    platformRoleData: z.ZodOptional<z.ZodOptional<z.ZodAny>>;
    dynamicAmount: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        operation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"LINEAR">;
            params: z.ZodDefault<z.ZodObject<{
                multiplier: z.ZodDefault<z.ZodNumber>;
                addition: z.ZodDefault<z.ZodNumber>;
                shouldFloorResult: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            }, {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            }>>;
            input: z.ZodEffects<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>, z.ZodTuple<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>], null>]>, [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }], {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]>;
        }, "strip", z.ZodTypeAny, {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        }, {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SUM">;
            input: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_AMOUNT">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"REQUIREMENT_ACCESS">;
                roleId: z.ZodNumber;
                requirementId: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            }, {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"POINTS">;
                guildId: z.ZodNumber;
                guildPlatformId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }, {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STATIC">;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "STATIC";
                value: number;
            }, {
                type: "STATIC";
                value: number;
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        }, {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        }>]>;
    }, "strip", z.ZodTypeAny, {
        operation: {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    }, {
        operation: {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}>, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            params: {
                multiplier: number;
                addition: number;
                shouldFloorResult?: boolean | undefined;
            };
            type: "LINEAR";
            input: [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }];
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                value: number;
                roleId: number;
                requirementId: number;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}, {
    platformRoleId?: string | undefined;
    visibility?: "PUBLIC" | "PRIVATE" | "HIDDEN" | undefined;
    platformRoleData?: any;
    dynamicAmount?: {
        operation: {
            type: "LINEAR";
            input: {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            } | [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] | ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ({
                type: "STATIC";
                value: number;
            } & [{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }]) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            }) | ([{
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            }] & {
                type: "STATIC";
                value: number;
            });
            params?: {
                multiplier?: number | undefined;
                addition?: number | undefined;
                shouldFloorResult?: boolean | undefined;
            } | undefined;
        } | {
            type: "SUM";
            input: ({
                type: "REQUIREMENT_AMOUNT";
                roleId: number;
                requirementId: number;
            } | {
                type: "REQUIREMENT_ACCESS";
                roleId: number;
                requirementId: number;
                value?: number | undefined;
            } | {
                guildId: number;
                type: "POINTS";
                guildPlatformId: number;
            } | {
                type: "STATIC";
                value: number;
            })[];
        };
    } | undefined;
}>;
declare const RolePlatformClaimPayloadSchema: z.ZodObject<{
    args: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    args: string[];
}, {
    args: string[];
}>;

declare const UserAddressCreationPayloadSchema: z.ZodIntersection<z.ZodObject<{
    address: z.ZodUnion<[z.ZodString, z.ZodString]>;
    isPrimary: z.ZodDefault<z.ZodBoolean>;
    isDelegated: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    address: string;
    isPrimary: boolean;
    isDelegated: boolean;
}, {
    address: string;
    isPrimary?: boolean | undefined;
    isDelegated?: boolean | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    signature: z.ZodString;
    nonce: z.ZodString;
    timestamp: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    signature: string;
    timestamp: number;
}, {
    nonce: string;
    signature: string;
    timestamp: number;
}>, z.ZodObject<{
    signature: z.ZodUndefined;
    nonce: z.ZodUndefined;
    timestamp: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    signature?: undefined;
    nonce?: undefined;
    timestamp?: undefined;
}, {
    signature?: undefined;
    nonce?: undefined;
    timestamp?: undefined;
}>]>>;
declare const UserAddressUpdatePayloadSchema: z.ZodObject<{
    isPrimary: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    isPrimary: boolean;
}, {
    isPrimary: boolean;
}>;

declare const LinkParamsSchema: z.ZodUnion<[z.ZodObject<{
    userId: z.ZodNumber;
    signature: z.ZodString;
    nonce: z.ZodString;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    userId: number;
    signature: string;
}, {
    nonce: string;
    userId: number;
    signature: string;
}>, z.ZodObject<{
    isDelegated: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    isDelegated: boolean;
}, {
    isDelegated: boolean;
}>, z.ZodObject<{
    userId: z.ZodUndefined;
    signature: z.ZodUndefined;
    nonce: z.ZodUndefined;
    isDelegated: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    userId?: undefined;
    signature?: undefined;
    nonce?: undefined;
    isDelegated?: undefined;
}, {
    userId?: undefined;
    signature?: undefined;
    nonce?: undefined;
    isDelegated?: undefined;
}>]>;
declare const VerifyKeyPayloadSchema: z.ZodIntersection<z.ZodObject<{
    pubKey: z.ZodString;
    verificationParams: z.ZodOptional<z.ZodObject<{
        reCaptcha: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        reCaptcha: string;
    }, {
        reCaptcha: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    pubKey: string;
    verificationParams?: {
        reCaptcha: string;
    } | undefined;
}, {
    pubKey: string;
    verificationParams?: {
        reCaptcha: string;
    } | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    userId: z.ZodNumber;
    signature: z.ZodString;
    nonce: z.ZodString;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    userId: number;
    signature: string;
}, {
    nonce: string;
    userId: number;
    signature: string;
}>, z.ZodObject<{
    isDelegated: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    isDelegated: boolean;
}, {
    isDelegated: boolean;
}>, z.ZodObject<{
    userId: z.ZodUndefined;
    signature: z.ZodUndefined;
    nonce: z.ZodUndefined;
    isDelegated: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    userId?: undefined;
    signature?: undefined;
    nonce?: undefined;
    isDelegated?: undefined;
}, {
    userId?: undefined;
    signature?: undefined;
    nonce?: undefined;
    isDelegated?: undefined;
}>]>>;

declare const __schemas_AuthenticationParamsSchema: typeof AuthenticationParamsSchema;
declare const __schemas_AuthenticationSchema: typeof AuthenticationSchema;
declare const __schemas_ContractCallGuildRewardSchema: typeof ContractCallGuildRewardSchema;
declare const __schemas_ContributionCollectionSchema: typeof ContributionCollectionSchema;
declare const __schemas_ContributionCreationSchema: typeof ContributionCreationSchema;
declare const __schemas_ContributionSchema: typeof ContributionSchema;
declare const __schemas_ContributionUpdateSchema: typeof ContributionUpdateSchema;
type __schemas_DynamicAmount = DynamicAmount;
type __schemas_DynamicAmountOperations = DynamicAmountOperations;
declare const __schemas_DynamicAmountSchema: typeof DynamicAmountSchema;
type __schemas_DynamicAmountToCreate = DynamicAmountToCreate;
declare const __schemas_ExperienceSchema: typeof ExperienceSchema;
declare const __schemas_FieldCreationPayloadSchema: typeof FieldCreationPayloadSchema;
declare const __schemas_FieldSchema: typeof FieldSchema;
declare const __schemas_FormCreationPayloadSchema: typeof FormCreationPayloadSchema;
declare const __schemas_FormSchema: typeof FormSchema;
declare const __schemas_GuildAdminCreationPayloadSchema: typeof GuildAdminCreationPayloadSchema;
declare const __schemas_GuildAdminUpdatePayloadSchema: typeof GuildAdminUpdatePayloadSchema;
declare const __schemas_GuildContactCreationPayloadSchema: typeof GuildContactCreationPayloadSchema;
declare const __schemas_GuildContactUpdatePayloadSchema: typeof GuildContactUpdatePayloadSchema;
declare const __schemas_GuildCreationPayloadSchema: typeof GuildCreationPayloadSchema;
declare const __schemas_GuildGetManyQueryParamsSchema: typeof GuildGetManyQueryParamsSchema;
declare const __schemas_GuildRewardCreationSchema: typeof GuildRewardCreationSchema;
declare const __schemas_GuildRewardSchema: typeof GuildRewardSchema;
declare const __schemas_GuildRewardUpdateSchema: typeof GuildRewardUpdateSchema;
declare const __schemas_GuildSearchQueryParamsSchema: typeof GuildSearchQueryParamsSchema;
declare const __schemas_GuildUpdatePayloadSchema: typeof GuildUpdatePayloadSchema;
type __schemas_InputSource = InputSource;
declare const __schemas_IssueGuildPinPayloadSchema: typeof IssueGuildPinPayloadSchema;
declare const __schemas_JoinActionPayloadSchema: typeof JoinActionPayloadSchema;
declare const __schemas_LinkParamsSchema: typeof LinkParamsSchema;
declare const __schemas_PlatformUserCreationSchema: typeof PlatformUserCreationSchema;
declare const __schemas_ProfileCreationSchema: typeof ProfileCreationSchema;
declare const __schemas_ProfileSchema: typeof ProfileSchema;
declare const __schemas_ProfileUpdateSchema: typeof ProfileUpdateSchema;
declare const __schemas_ProfileUsernameSchema: typeof ProfileUsernameSchema;
declare const __schemas_RequirementCreateResponseSchema: typeof RequirementCreateResponseSchema;
declare const __schemas_RequirementCreationPayloadSchema: typeof RequirementCreationPayloadSchema;
declare const __schemas_RequirementSchema: typeof RequirementSchema;
declare const __schemas_RequirementTypeAndDataSchema: typeof RequirementTypeAndDataSchema;
declare const __schemas_RequirementUpdatePayloadSchema: typeof RequirementUpdatePayloadSchema;
declare const __schemas_RoleCreationForGuildCreationPayloadSchema: typeof RoleCreationForGuildCreationPayloadSchema;
declare const __schemas_RoleCreationPayloadSchema: typeof RoleCreationPayloadSchema;
declare const __schemas_RolePlatformClaimPayloadSchema: typeof RolePlatformClaimPayloadSchema;
declare const __schemas_RoleRewardCreationForGuildCreationPayloadSchema: typeof RoleRewardCreationForGuildCreationPayloadSchema;
declare const __schemas_RoleRewardCreationPayloadSchema: typeof RoleRewardCreationPayloadSchema;
declare const __schemas_RoleRewardUpdatePayloadSchema: typeof RoleRewardUpdatePayloadSchema;
declare const __schemas_RoleUpdatePayloadSchema: typeof RoleUpdatePayloadSchema;
declare const __schemas_StatusUpdateActionPayloadSchema: typeof StatusUpdateActionPayloadSchema;
declare const __schemas_SubmissionAnswerSchema: typeof SubmissionAnswerSchema;
declare const __schemas_SubmissionCreationAnswerSchema: typeof SubmissionCreationAnswerSchema;
declare const __schemas_UserAddressCreationPayloadSchema: typeof UserAddressCreationPayloadSchema;
declare const __schemas_UserAddressUpdatePayloadSchema: typeof UserAddressUpdatePayloadSchema;
declare const __schemas_UserSubmissionCreationSchema: typeof UserSubmissionCreationSchema;
declare const __schemas_UserSubmissionSchema: typeof UserSubmissionSchema;
declare const __schemas_UserSubmissionsSchema: typeof UserSubmissionsSchema;
declare const __schemas_VerifyKeyPayloadSchema: typeof VerifyKeyPayloadSchema;
declare namespace __schemas {
  export { __schemas_AuthenticationParamsSchema as AuthenticationParamsSchema, __schemas_AuthenticationSchema as AuthenticationSchema, __schemas_ContractCallGuildRewardSchema as ContractCallGuildRewardSchema, __schemas_ContributionCollectionSchema as ContributionCollectionSchema, __schemas_ContributionCreationSchema as ContributionCreationSchema, __schemas_ContributionSchema as ContributionSchema, __schemas_ContributionUpdateSchema as ContributionUpdateSchema, type __schemas_DynamicAmount as DynamicAmount, type __schemas_DynamicAmountOperations as DynamicAmountOperations, __schemas_DynamicAmountSchema as DynamicAmountSchema, type __schemas_DynamicAmountToCreate as DynamicAmountToCreate, __schemas_ExperienceSchema as ExperienceSchema, __schemas_FieldCreationPayloadSchema as FieldCreationPayloadSchema, __schemas_FieldSchema as FieldSchema, __schemas_FormCreationPayloadSchema as FormCreationPayloadSchema, __schemas_FormSchema as FormSchema, __schemas_GuildAdminCreationPayloadSchema as GuildAdminCreationPayloadSchema, __schemas_GuildAdminUpdatePayloadSchema as GuildAdminUpdatePayloadSchema, __schemas_GuildContactCreationPayloadSchema as GuildContactCreationPayloadSchema, __schemas_GuildContactUpdatePayloadSchema as GuildContactUpdatePayloadSchema, __schemas_GuildCreationPayloadSchema as GuildCreationPayloadSchema, __schemas_GuildGetManyQueryParamsSchema as GuildGetManyQueryParamsSchema, __schemas_GuildRewardCreationSchema as GuildRewardCreationSchema, __schemas_GuildRewardSchema as GuildRewardSchema, __schemas_GuildRewardUpdateSchema as GuildRewardUpdateSchema, __schemas_GuildSearchQueryParamsSchema as GuildSearchQueryParamsSchema, __schemas_GuildUpdatePayloadSchema as GuildUpdatePayloadSchema, type __schemas_InputSource as InputSource, __schemas_IssueGuildPinPayloadSchema as IssueGuildPinPayloadSchema, __schemas_JoinActionPayloadSchema as JoinActionPayloadSchema, __schemas_LinkParamsSchema as LinkParamsSchema, __schemas_PlatformUserCreationSchema as PlatformUserCreationSchema, __schemas_ProfileCreationSchema as ProfileCreationSchema, __schemas_ProfileSchema as ProfileSchema, __schemas_ProfileUpdateSchema as ProfileUpdateSchema, __schemas_ProfileUsernameSchema as ProfileUsernameSchema, __schemas_RequirementCreateResponseSchema as RequirementCreateResponseSchema, __schemas_RequirementCreationPayloadSchema as RequirementCreationPayloadSchema, __schemas_RequirementSchema as RequirementSchema, __schemas_RequirementTypeAndDataSchema as RequirementTypeAndDataSchema, __schemas_RequirementUpdatePayloadSchema as RequirementUpdatePayloadSchema, __schemas_RoleCreationForGuildCreationPayloadSchema as RoleCreationForGuildCreationPayloadSchema, __schemas_RoleCreationPayloadSchema as RoleCreationPayloadSchema, __schemas_RolePlatformClaimPayloadSchema as RolePlatformClaimPayloadSchema, __schemas_RoleRewardCreationForGuildCreationPayloadSchema as RoleRewardCreationForGuildCreationPayloadSchema, __schemas_RoleRewardCreationPayloadSchema as RoleRewardCreationPayloadSchema, __schemas_RoleRewardUpdatePayloadSchema as RoleRewardUpdatePayloadSchema, __schemas_RoleUpdatePayloadSchema as RoleUpdatePayloadSchema, __schemas_StatusUpdateActionPayloadSchema as StatusUpdateActionPayloadSchema, __schemas_SubmissionAnswerSchema as SubmissionAnswerSchema, __schemas_SubmissionCreationAnswerSchema as SubmissionCreationAnswerSchema, __schemas_UserAddressCreationPayloadSchema as UserAddressCreationPayloadSchema, __schemas_UserAddressUpdatePayloadSchema as UserAddressUpdatePayloadSchema, __schemas_UserSubmissionCreationSchema as UserSubmissionCreationSchema, __schemas_UserSubmissionSchema as UserSubmissionSchema, __schemas_UserSubmissionsSchema as UserSubmissionsSchema, __schemas_VerifyKeyPayloadSchema as VerifyKeyPayloadSchema };
}

declare const DONE_FIELD = "done";
declare const FAILED_FIELD = "failed";
declare const FAILED_QUEUE_FIELD = "failedQueue";
declare const FAILED_ERROR_MSG_FIELD = "failedErrorMsg";
declare const CREATED_AT_FIELD = "createdAtTimestamp";
declare const IS_DELAY_FIELD = "delay";
declare const DELAY_TIMESTAMP_FIELD = "delayReadyTimestamp";
declare const DELAY_REASON_FIELD = "delayReason";

type CreateAccessJobOptions = {
    userId: number;
    roleIds: number[];
    guildId: number;
    priority: number;
    recheckAccess: boolean;
    updateMemberships: boolean;
    manageRewards: boolean;
    forceRewardActions: boolean;
    onlyForThisPlatform?: string;
    correlationId: string;
    shareSocials?: boolean;
    saveClaimData?: boolean;
    rootAuditLogId?: number;
};
type AccessFlowParams = {
    id: string;
    flowName: "access";
    correlationId: string;
    priority: number;
    userId: number;
    guildId: number;
    roleIds: number[];
};
type AccessFlowResult = {
    nextQueue?: AccessFlowJob["queueName"];
};
type AccessPreparationParams = AccessFlowParams & {
    recheckAccess: boolean;
    saveClaimData: boolean;
};
type AccessCheckChildParams = {
    childName: "requirement" | "gate2" | "covalent" | "galxe" | "farcaster" | "eas" | "guild";
    userId: number;
    guildId: number;
    roleId: number;
    requirementId: number;
};
type AccessPreparationResult = AccessFlowResult & ({
    nextQueue: "access-check";
    "children:access-check:params": AccessCheckChildParams[];
} | {
    nextQueue: "update-membership";
    "children:access-check:params"?: never;
});
type AccessCheckParams = BaseJobParams & {
    userId: number;
    guildId: number;
    roleId: number;
    requirementId: number;
    gateRiverJobId?: number;
};
type RequirementError = {
    requirementId: number;
    msg: string;
    errorType: string;
    errorSubType?: string;
};
type AccessCheckResult = AccessFlowResult & {
    [DONE_FIELD]: true;
    requirementId: number;
    access: boolean;
    amount?: number;
    requirementError?: RequirementError;
    userLevelErrors?: RequirementError[];
};
type AccessLogicParams = AccessFlowParams & {
    "children:access-check:jobs": string[];
    updateMemberships: boolean;
    manageRewards: boolean;
    shareSocials?: boolean;
    rootAuditLogId?: number;
};
type RoleAccess$1 = {
    roleId: number;
    access: boolean;
};
type AccessLogicResult = AccessFlowResult & {
    updateMembershipResult: {
        newMembershipRoleIds: number[];
        lostMembershipRoleIds: number[];
        membershipRoleIds: number[];
        notMemberRoleIds: number[];
        roleIdAuditLogIdMap: Record<string, number>;
    };
    roleAccesses: RoleAccess$1[];
};
type UpdateMembershipParams = AccessFlowParams & {
    roleAccesses: RoleAccess$1[];
    manageRewards: boolean;
    shareSocials?: boolean;
    rootAuditLogId?: number;
};
type UpdateMembershipResult = AccessFlowResult & {
    updateMembershipResult: {
        newMembershipRoleIds: number[];
        lostMembershipRoleIds: number[];
        membershipRoleIds: number[];
        notMemberRoleIds: number[];
        roleIdAuditLogIdMap: Record<string, number>;
    };
};
type PlatformRole = {
    platformRoleId: string;
    platformRoleData?: AnyObject;
};
type ManageRewardBase = {
    action: "ADD" | "REMOVE" | "MODIFY";
    platformId: number;
    platformUserId: string;
    platformUserData?: AnyObject;
    platformGuildId: string;
    platformGuildData?: AnyObject;
    platformOwnerData?: AnyObject;
    parentAuditLogIds?: {
        rolePlatformId: number;
        parentAuditLogId: number;
    }[];
    platformRoles?: PlatformRole[];
    platformRolesToAdd?: PlatformRole[];
    platformRolesToRemove?: PlatformRole[];
};
type DataForRewardAuditLog = {
    userId: number;
    guildId: number;
    rolePlatforms: {
        roleId: number;
        rolePlatformId: number;
    }[];
};
type ManageRewardChildParams = Partial<BaseChildParam> & {
    childName: string;
    platformGuildId: string;
    manageRewardAction: ManageRewardBase;
    dataForAuditLog: DataForRewardAuditLog;
};
type ManageRewardParams = BaseJobParams & {
    platformGuildId: string;
    manageRewardAction: ManageRewardBase;
    dataForAuditLog: DataForRewardAuditLog;
};
type ManageRewardResult = BaseJobResult & {
    [DONE_FIELD]: true;
    success: boolean;
    errorMsg?: string;
};
type PrepareManageRewardParams = AccessFlowParams & UpdateMembershipResult & {
    forceRewardActions: boolean;
    onlyForThisPlatform?: string;
    rootAuditLogId?: number;
};
type PrepareManageRewardResult = AccessFlowResult & {
    nextQueue?: never;
    "children:manage-reward:params": ManageRewardChildParams[];
};
type AccessResultResult = AccessFlowResult & {
    nextQueue?: never;
    [DONE_FIELD]: true;
};
type AccessPreparationJob = {
    queueName: "access-preparation";
    children: [];
    params: AccessPreparationParams;
    result: AccessPreparationResult;
};
type AccessCheckJob$1 = {
    queueName: "access-check";
    children: [
        {
            queueName: "requirement";
        },
        {
            queueName: "gate2";
        },
        {
            queueName: "covalent";
        },
        {
            queueName: "galxe";
        },
        {
            queueName: "farcaster";
        },
        {
            queueName: "eas";
        },
        {
            queueName: "guild";
        }
    ];
    params: AccessCheckParams;
    result: AccessCheckResult;
};
type AccessLogicJob = {
    queueName: "access-logic";
    children: [];
    params: AccessLogicParams;
    result: AccessLogicResult;
};
type UpdateMembershipJob = {
    queueName: "update-membership";
    children: [];
    params: UpdateMembershipParams;
    result: UpdateMembershipResult;
};
type PrepareManageRewardJob = {
    queueName: "prepare-manage-reward";
    children: [];
    params: PrepareManageRewardParams;
    result: PrepareManageRewardResult;
};
type ManageRewardJob = {
    queueName: "manage-reward";
    children: [
        {
            queueName: "discord";
        },
        {
            queueName: "telegram";
        },
        {
            queueName: "github";
        },
        {
            queueName: "google";
        },
        {
            queueName: "nft";
        }
    ];
    params: ManageRewardParams;
    result: ManageRewardResult;
};
type AccessResultJob = {
    queueName: "access-result";
    children: [];
    params: BaseJobParams;
    result: AccessResultResult;
};
type AccessFlowJob = AccessPreparationJob | AccessCheckJob$1 | AccessLogicJob | UpdateMembershipJob | PrepareManageRewardJob | ManageRewardJob | AccessResultJob;
type AccessLookupAttributes = "userId" | "roleIds" | "guildId";
type AccessCheckChild = AccessCheckParams & AccessCheckResult & BaseJobParams & ManagedJobFields;
type ManageRewardChild = ManageRewardParams & ManageRewardResult & BaseJobParams & ManagedJobFields;
type AccessJobContent = CreateAccessJobOptions & BaseJobParams & ManagedJobFields & AccessFlowResult & Omit<AccessPreparationResult, "nextQueue"> & Omit<AccessLogicResult, "nextQueue"> & Omit<UpdateMembershipResult, "nextQueue"> & Omit<PrepareManageRewardResult, "nextQueue"> & Omit<ManageRewardResult, "nextQueue"> & Omit<AccessResultResult, "nextQueue"> & {
    "children:access-check:jobs": AccessCheckChild[];
    "children:access-check:results": AccessCheckChild[];
    "children:manage-reward:jobs": ManageRewardChild[];
    "children:manage-reward:results": ManageRewardChild[];
};

type Notification = {
    type: string;
    title: string;
    body: string;
    url?: string;
};
type MessagingLookupAttributes = "guildId";
type MessagingJobOptions = {
    protocol: "XMTP" | "WEB3INBOX";
    priority: number;
    messageId: number;
    guildId: number;
    senderUserId: number;
    notification: Notification | string;
    recipients: string[];
    readyTimestamp?: Date;
};
type MessagingJobResult = BaseJobResult & {
    done: true;
};
type MessagingJob = {
    queueName: "send-message";
    children: [];
    params: BaseJobParams & MessagingJobOptions;
    result: MessagingJobResult;
};
type MessagingContent = MessagingJobOptions & BaseJobParams & ManagedJobFields & MessagingJob["result"];

type PointsSnapshotLookupAttributes = "guildId";
type PointsSnapshotJobOptions = {
    priority: number;
    guildId: number;
    guildPlatformId: number;
    snapshotId: number;
    shouldStatusUpdate: boolean;
};
type PointsSnapshotJobResult = BaseJobResult & {
    done: true;
};
type PointsSnapshotJob = {
    queueName: "take-points-snapshot";
    children: [];
    params: BaseJobParams & PointsSnapshotJobOptions;
    result: PointsSnapshotJobResult;
};
type PointsSnapshotContent = PointsSnapshotJobOptions & BaseJobParams & ManagedJobFields & PointsSnapshotJob["result"];

type StatusUpdatify<T> = Omit<T, "userId"> & {
    userIds: number[];
};
type CreateStatusUpdateJobOptions = StatusUpdatify<CreateAccessJobOptions>;
type StatusUpdateFlowParams = Omit<AccessFlowParams, "userId" | "flowName"> & {
    flowName: "status-update";
};
type StatusUpdateFlowResult = {
    nextQueue?: StatusUpdateFlowJob["queueName"];
};
type StatusUpdatePreparationParams = StatusUpdatify<AccessPreparationParams>;
type BulkAccessCheckChildParams = StatusUpdatify<AccessCheckChildParams>;
type StatusUpdatePreparationResult = StatusUpdateFlowResult & ({
    nextQueue: "bulk-access-check";
    "children:bulk-access-check:params": BulkAccessCheckChildParams[];
    "children:access-check:params": AccessCheckChildParams[];
    existingAccesses: {
        requirementId: number;
        users: {
            userId: number;
            access: boolean;
        }[];
    }[];
} | {
    nextQueue: "bulk-update-membership";
    "children:bulk-access-check:params"?: never;
    "children:access-check:params"?: never;
    existingAccesses?: never;
});
type BulkAccessCheckParams = StatusUpdatify<AccessCheckParams> & BaseJobParams;
type BulkAccessCheckResult = StatusUpdateFlowResult & {
    [DONE_FIELD]: true;
    requirementId: number;
    requirementError?: RequirementError;
    users: {
        userId: number;
        access: boolean;
        amount?: number;
        userLevelErrors?: RequirementError[];
    }[];
};
type BulkAccessLogicParams = StatusUpdateFlowParams & {
    "children:access-check:jobs": string[];
    "children:bulk-access-check:jobs": string[];
    existingAccesses: StatusUpdatePreparationResult["existingAccesses"];
    updateMemberships: boolean;
};
type RoleAccess = {
    roleId: number;
    access: boolean;
};
type UserRoleAccess = {
    userId: number;
    roleAccesses: RoleAccess[];
};
type BulkAccessLogicResult = StatusUpdateFlowResult & {
    userRoleAccesses: UserRoleAccess[];
    nextQueue: "bulk-update-membership" | "status-update-result";
};
type BulkUpdateMembershipParams = StatusUpdateFlowParams & {
    userRoleAccesses: UserRoleAccess[];
    manageRewards: boolean;
};
type BulkUpdateMembershipResult = StatusUpdateFlowResult & {
    bulkUpdateMembershipResult: {
        userId: number;
        newMembershipRoleIds: number[];
        lostMembershipRoleIds: number[];
        membershipRoleIds: number[];
        notMemberRoleIds: number[];
    }[];
};
type BulkPrepareManageRewardParams = StatusUpdateFlowParams & BulkUpdateMembershipResult & {
    forceRewardActions: boolean;
    onlyForThisPlatform?: string;
};
type BulkPrepareManageRewardResult = StatusUpdateFlowResult & {
    nextQueue?: never;
    "children:manage-reward:params": ManageRewardChildParams[];
};
type StatusUpdateResultResult = AccessResultResult;
type StatusUpdatePreparationJob = {
    queueName: "status-update-preparation";
    children: [];
    params: StatusUpdatePreparationParams;
    result: StatusUpdatePreparationResult;
};
type BulkAccessCheckJob = {
    queueName: "bulk-access-check";
    children: [{
        queueName: "requirement";
    }];
    params: BulkAccessCheckParams;
    result: BulkAccessCheckResult;
};
type BulkAccessLogicJob = {
    queueName: "bulk-access-logic";
    children: [];
    params: BulkAccessLogicParams;
    result: BulkAccessLogicResult;
};
type BulkUpdateMembershipJob = {
    queueName: "bulk-update-membership";
    children: [];
    params: BulkUpdateMembershipParams;
    result: BulkUpdateMembershipResult;
};
type BulkPrepareManageRewardJob = {
    queueName: "bulk-prepare-manage-reward";
    children: [];
    params: BulkPrepareManageRewardParams;
    result: BulkPrepareManageRewardResult;
};
type StatusUpdateResultJob = {
    queueName: "status-update-result";
    children: [];
    params: BaseJobParams;
    result: AccessResultResult;
};
type StatusUpdateFlowJob = StatusUpdatePreparationJob | BulkAccessCheckJob | BulkAccessLogicJob | BulkUpdateMembershipJob | BulkPrepareManageRewardJob | ManageRewardJob | StatusUpdateResultJob;
type StatusUpdateLookupAttributes = "roleIds" | "guildId";
type StatusUpdateJobContent = CreateStatusUpdateJobOptions & BaseJobParams & ManagedJobFields & StatusUpdateFlowResult & Omit<StatusUpdatePreparationResult, "nextQueue"> & Omit<BulkAccessCheckResult, "nextQueue"> & Omit<BulkAccessLogicResult, "nextQueue"> & Omit<BulkUpdateMembershipResult, "nextQueue"> & Omit<BulkPrepareManageRewardResult, "nextQueue"> & Omit<ManageRewardResult, "nextQueue"> & Omit<StatusUpdateResultResult, "nextQueue"> & {
    "children:access-check:results": (AccessCheckParams & AccessCheckResult & BaseJobParams & ManagedJobFields)[];
    "children:bulk-access-check:results": (BulkAccessCheckResult & BaseJobParams & ManagedJobFields)[];
    "children:manage-reward:results": (ManageRewardParams & ManageRewardResult & BaseJobParams & ManagedJobFields)[];
};

type FlowTypes = {
    access: {
        job: AccessFlowJob;
        content: AccessJobContent;
        createJobOptions: CreateAccessJobOptions;
        lookupAttributes: AccessLookupAttributes;
    };
    "status-update": {
        job: StatusUpdateFlowJob;
        content: StatusUpdateJobContent;
        createJobOptions: CreateStatusUpdateJobOptions;
        lookupAttributes: StatusUpdateLookupAttributes;
    };
    messaging: {
        job: MessagingJob;
        content: MessagingContent;
        createJobOptions: MessagingJobOptions;
        lookupAttributes: MessagingLookupAttributes;
    };
    "points-snapshot": {
        job: PointsSnapshotJob;
        content: PointsSnapshotContent;
        createJobOptions: PointsSnapshotJobOptions;
        lookupAttributes: PointsSnapshotLookupAttributes;
    };
};
type FlowNames = keyof FlowTypes;

type AnyObject = {
    [key: string]: any;
};
type BaseJobParams = {
    id: string;
    flowName: FlowNames;
    priority: number;
    correlationId: string;
    delay?: boolean;
    retries?: number;
};
type BaseJobResult = {
    nextQueue?: string;
};
type ManagedJobFields = {
    "completed-queue"?: string;
    [CREATED_AT_FIELD]: number;
    [FAILED_FIELD]?: boolean;
    [FAILED_ERROR_MSG_FIELD]?: string;
    [FAILED_QUEUE_FIELD]?: string;
    [IS_DELAY_FIELD]?: boolean;
    [DELAY_TIMESTAMP_FIELD]?: number;
    [DELAY_REASON_FIELD]?: string;
};
type BaseChildParam = AnyObject & {
    childName: string;
    priority: number;
};

type SchemasImport = typeof __schemas;
type SchemaNames = keyof SchemasImport;
type TypeNames = SchemaNames extends `${infer TypeName}Schema` ? TypeName : SchemaNames;
type Schemas = {
    [Key in TypeNames]: z.input<SchemasImport[`${Key}Schema`]>;
};
declare const reqTypes: z.ZodIntersection<z.ZodObject<{
    data: z.ZodOptional<z.ZodObject<{
        customName: z.ZodOptional<z.ZodString>;
        customImage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }, {
        customName?: string | undefined;
        customImage?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}, {
    data?: {
        customName?: string | undefined;
        customImage?: string | undefined;
    } | undefined;
}>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"FREE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FREE";
    data: {};
}, {
    type: "FREE";
    data?: {} | undefined;
}>, ...(z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_FIRST_TX", "ALCHEMY_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    data: z.ZodObject<{
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
    }, {
        maxAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
}, {
    type: "ALCHEMY_FIRST_TX" | "ALCHEMY_FIRST_TX_RELATIVE";
    data: {
        maxAmount: number;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_CONTRACT_DEPLOY", "ALCHEMY_CONTRACT_DEPLOY_RELATIVE", "ALCHEMY_TX_COUNT", "ALCHEMY_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>, z.ZodEnum<["BASE_GOERLI"]>]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_CONTRACT_DEPLOY" | "ALCHEMY_CONTRACT_DEPLOY_RELATIVE" | "ALCHEMY_TX_COUNT" | "ALCHEMY_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "BASE_GOERLI" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["ALCHEMY_TX_VALUE", "ALCHEMY_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "POLYGON", "ARBITRUM", "OPTIMISM", "GOERLI", "POLYGON_MUMBAI"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI";
    address?: string | null | undefined;
}, {
    type: "ALCHEMY_TX_VALUE" | "ALCHEMY_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain?: "ETHEREUM" | "POLYGON" | "ARBITRUM" | "GOERLI" | "OPTIMISM" | "POLYGON_MUMBAI" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "ALLOWLIST";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"ALLOWLIST_EMAIL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
        fileId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }, {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ALLOWLIST_EMAIL";
    data: {
        addresses: string[];
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    };
}, {
    type: "ALLOWLIST_EMAIL";
    data?: {
        addresses?: string[] | undefined;
        hideAllowlist?: boolean | undefined;
        fileId?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"CAPTCHA">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "CAPTCHA";
    data: {
        maxAmount?: number | undefined;
    };
}, {
    type: "CAPTCHA";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"COIN">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COIN";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodLiteral<"CONTRACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        resultIndex: z.ZodOptional<z.ZodNumber>;
        params: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber]>, z.ZodBoolean]>, "many">;
        resultMatch: z.ZodEnum<["=", ">", "<", ">=", "<="]>;
        expected: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }, {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    }>;
    address: z.ZodString;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
}, "strip", z.ZodTypeAny, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}, {
    type: "CONTRACT";
    data: {
        params: (string | number | boolean)[];
        expected: string;
        id: string;
        resultMatch: "=" | ">" | "<" | ">=" | "<=";
        resultIndex?: number | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_FIRST_TX", "COVALENT_FIRST_TX_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    data: z.ZodDefault<z.ZodObject<{
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    }, {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    data: {
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "COVALENT_FIRST_TX" | "COVALENT_FIRST_TX_RELATIVE";
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    data?: {
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_CONTRACT_DEPLOY", "COVALENT_CONTRACT_DEPLOY_RELATIVE", "COVALENT_TX_COUNT", "COVALENT_TX_COUNT_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txCount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_CONTRACT_DEPLOY" | "COVALENT_CONTRACT_DEPLOY_RELATIVE" | "COVALENT_TX_COUNT" | "COVALENT_TX_COUNT_RELATIVE";
    data: {
        txCount: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["COVALENT_TX_VALUE", "COVALENT_TX_VALUE_RELATIVE"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "SCROLL_ALPHA", "POLYGON", "BASE_MAINNET", "BASE_GOERLI", "ZORA", "AVALANCHE", "ZKSYNC_ERA", "POLYGON_ZKEVM", "CRONOS", "NEON_EVM", "PGN", "OPTIMISM", "LINEA", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "ARBITRUM", "METIS", "TAIKO_KATLA", "BSC", "BASE_SEPOLIA", "OASIS_SAPPHIRE", "BLAST_MAINNET", "ZETACHAIN", "TAIKO", "FANTOM", "SEI", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
    address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    data: z.ZodObject<{
        txValue: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        timestamps: z.ZodDefault<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodNumber>;
            maxAmount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    }, {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        timestamps: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        };
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
    };
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
    address?: string | null | undefined;
}, {
    type: "COVALENT_TX_VALUE" | "COVALENT_TX_VALUE_RELATIVE";
    data: {
        txValue: number;
        maxAmount?: number | undefined;
        minAmount?: number | undefined;
        timestamps?: {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        } | undefined;
    };
    chain?: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "OPTIMISM" | "METIS" | "CRONOS" | "BASE_GOERLI" | "BASE_MAINNET" | "SCROLL_ALPHA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ZETACHAIN" | "TAIKO" | "SEI" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
    address?: string | null | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_ROLE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        roleId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        roleName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }, {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}, {
    type: "DISCORD_ROLE";
    data: {
        roleId: string;
        serverId: string;
        serverName?: string | undefined;
        roleName?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["DISCORD_JOIN", "DISCORD_JOIN_FROM_NOW"]>;
    data: z.ZodObject<{
        memberSince: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        memberSince: number;
    }, {
        memberSince: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}, {
    type: "DISCORD_JOIN" | "DISCORD_JOIN_FROM_NOW";
    data: {
        memberSince: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"DISCORD_MEMBER_SINCE">;
    data: z.ZodObject<{
        serverId: z.ZodString;
        serverName: z.ZodOptional<z.ZodString>;
        memberSince: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }, {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}, {
    type: "DISCORD_MEMBER_SINCE";
    data: {
        serverId: string;
        serverName?: string | undefined;
        memberSince?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["EAS_ATTESTED_BY", "COINBASE_EAS_ATTESTED_BY"]>;
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        attester: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        attester: string;
    }, {
        attester: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        attester: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        attester: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTESTED_BY" | "COINBASE_EAS_ATTESTED_BY";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        attester: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    chain: z.ZodDefault<z.ZodEnum<["ETHEREUM", "OPTIMISM", "ARBITRUM", "SEPOLIA", "BASE_GOERLI", "BASE_MAINNET", "BASE_SEPOLIA", "LINEA"]>>;
    type: z.ZodLiteral<"EAS_ATTEST">;
    data: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        schemaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        schemaId: string;
    }, {
        schemaId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        val: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        val: string;
    }, {
        key: string;
        val: string;
    }>, z.ZodEffects<z.ZodObject<{
        key: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
        val: z.ZodUnion<[z.ZodUndefined, z.ZodLiteral<"">]>;
    }, "strip", z.ZodTypeAny, {
        key?: "" | undefined;
        val?: "" | undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>, {
        key: undefined;
        val: undefined;
    }, {
        key?: "" | undefined;
        val?: "" | undefined;
    }>]>>, z.ZodObject<{
        recipient: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        recipient: string;
    }, {
        recipient: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "EAS_ATTEST";
    data: ({
        schemaId: string;
    } & {
        key: string;
        val: string;
    } & {
        recipient: string;
    }) | ({
        schemaId: string;
    } & {
        key: undefined;
        val: undefined;
    } & {
        recipient: string;
    });
    chain: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA";
}, {
    type: "EAS_ATTEST";
    data: (({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) & ((({
        schemaId: string;
    } & ({
        key: string;
        val: string;
    } | {
        key?: "" | undefined;
        val?: "" | undefined;
    })) & {
        recipient: string;
    }) | undefined);
    chain?: "ETHEREUM" | "ARBITRUM" | "OPTIMISM" | "BASE_GOERLI" | "BASE_MAINNET" | "SEPOLIA" | "LINEA" | "BASE_SEPOLIA" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_DOMAIN">;
    data: z.ZodObject<{
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
    }, {
        domain: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}, {
    type: "EMAIL_DOMAIN";
    data: {
        domain: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"EMAIL_VERIFIED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "EMAIL_VERIFIED";
    data: {};
}, {
    type: "EMAIL_VERIFIED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_LIKE", "FARCASTER_RECAST"]>;
    data: z.ZodUnion<[z.ZodObject<{
        hash: z.ZodString;
        url: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        url?: undefined;
    }, {
        hash: string;
        url?: undefined;
    }>, z.ZodObject<{
        url: z.ZodString;
        hash: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        url: string;
        hash?: undefined;
    }, {
        url: string;
        hash?: undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}, {
    type: "FARCASTER_LIKE" | "FARCASTER_RECAST";
    data: {
        hash: string;
        url?: undefined;
    } | {
        url: string;
        hash?: undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW", "FARCASTER_FOLLOWED_BY"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
    }, {
        id: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}, {
    type: "FARCASTER_FOLLOW" | "FARCASTER_FOLLOWED_BY";
    data: {
        id: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["FARCASTER_FOLLOW_CHANNEL", "FARCASTER_USERNAME", "FARCASTER_BIO"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}, {
    type: "FARCASTER_FOLLOW_CHANNEL" | "FARCASTER_USERNAME" | "FARCASTER_BIO";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_TOTAL_FOLLOWERS">;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "FARCASTER_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FARCASTER_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "FARCASTER_PROFILE";
    data: {};
}, {
    type: "FARCASTER_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_SUBMISSION">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        guildId: z.ZodNumber;
        answers: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            fieldId: z.ZodString;
            value: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        }, "strict", z.ZodTypeAny, {
            value: string | number;
            fieldId: string;
        }, {
            value: string | number;
            fieldId: string;
        }>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            minAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
            maxAmount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodPipeline<z.ZodString, z.ZodNumber>]>>;
        }, "strip", z.ZodTypeAny, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>, {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }, {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }>>, z.ZodIntersection<z.ZodObject<{
            fieldId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fieldId: string;
        }, {
            fieldId: string;
        }>, z.ZodEffects<z.ZodObject<{
            acceptedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rejectedAnswers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }, {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }>>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }, {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: number | undefined;
            maxAmount?: number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}, {
    type: "FORM_SUBMISSION";
    data: {
        guildId: number;
        id: number;
        answers?: ({
            value: string | number;
            fieldId: string;
        } | ({
            fieldId: string;
        } & {
            minAmount?: string | number | undefined;
            maxAmount?: string | number | undefined;
        }) | ({
            fieldId: string;
        } & {
            acceptedAnswers?: string[] | undefined;
            rejectedAnswers?: string[] | undefined;
        }))[] | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FORM_APPROVAL">;
    data: z.ZodDefault<z.ZodObject<{
        addresses: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        hideAllowlist: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }, {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "FORM_APPROVAL";
    data: {
        addresses: string[];
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    };
}, {
    type: "FORM_APPROVAL";
    data?: {
        addresses?: string[] | undefined;
        fileId?: string | undefined;
        hideAllowlist?: boolean | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_BALANCE">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: number | undefined;
    }, {
        minAmount: number;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_BALANCE";
    data: {
        minAmount: number;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"FUEL_TRANSACTIONS">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodEnum<["script", "mint", "create"]>>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "FUEL_TRANSACTIONS";
    data: {
        id?: "script" | "mint" | "create" | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GALAXY", "GALAXY_PARTICIPATION"]>;
    data: z.ZodObject<{
        galaxyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        galaxyId: string;
    }, {
        galaxyId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}, {
    type: "GALAXY" | "GALAXY_PARTICIPATION";
    data: {
        galaxyId: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_PASS">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_PASS";
    data: {};
}, {
    type: "GITCOIN_PASS";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_STAMP">;
    data: z.ZodDefault<z.ZodObject<{
        stamp: z.ZodOptional<z.ZodString>;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
        credType: z.ZodOptional<z.ZodString>;
        issuer: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }, {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_STAMP";
    data: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    };
}, {
    type: "GITCOIN_STAMP";
    data?: {
        stamp?: string | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        credType?: string | undefined;
        issuer?: string | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITCOIN_SCORE">;
    data: z.ZodObject<{
        id: z.ZodString;
        score: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        score: number;
    }, {
        id: string;
        score: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}, {
    type: "GITCOIN_SCORE";
    data: {
        id: string;
        score: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GITHUB_STARRING">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}, {
    type: "GITHUB_STARRING";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_ACCOUNT_AGE", "GITHUB_ACCOUNT_AGE_RELATIVE"]>;
    data: z.ZodDefault<z.ZodObject<{
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_ACCOUNT_AGE" | "GITHUB_ACCOUNT_AGE_RELATIVE";
    data?: {
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["GITHUB_COMMIT_COUNT", "GITHUB_COMMIT_COUNT_RELATIVE"]>;
    data: z.ZodObject<{
        id: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GITHUB_COMMIT_COUNT" | "GITHUB_COMMIT_COUNT_RELATIVE";
    data: {
        id: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MEMBER">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}, {
    type: "GUILD_MEMBER";
    data: {
        guildId: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ROLE_RELATIVE">;
    data: z.ZodObject<{
        guildId: z.ZodNumber;
        roleId: z.ZodNumber;
        minAmount: z.ZodOptional<z.ZodNumber>;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }, {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}, {
    type: "GUILD_ROLE_RELATIVE";
    data: {
        guildId: number;
        roleId: number;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_ADMIN">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_ADMIN";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_USER_SINCE">;
    data: z.ZodObject<{
        creationDate: z.ZodPipeline<z.ZodUnion<[z.ZodUnion<[z.ZodDate, z.ZodNumber]>, z.ZodString]>, z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        creationDate: Date;
    }, {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: Date;
    };
}, {
    type: "GUILD_USER_SINCE";
    data: {
        creationDate: (string | number | Date) & (string | number | Date | undefined);
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_MINGUILDS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}, {
    type: "GUILD_MINGUILDS";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"GUILD_SNAPSHOT">;
    data: z.ZodDefault<z.ZodObject<{
        snapshot: z.ZodDefault<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            key: string;
        }, {
            value: number;
            key: string;
        }>, "many">>;
        fileId: z.ZodOptional<z.ZodString>;
        isHidden: z.ZodDefault<z.ZodBoolean>;
        guildPlatformId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    }, {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "GUILD_SNAPSHOT";
    data: {
        snapshot: {
            value: number;
            key: string;
        }[];
        isHidden: boolean;
        fileId?: string | undefined;
        guildPlatformId?: number | undefined;
    };
}, {
    type: "GUILD_SNAPSHOT";
    data?: {
        snapshot?: {
            value: number;
            key: string;
        }[] | undefined;
        fileId?: string | undefined;
        isHidden?: boolean | undefined;
        guildPlatformId?: number | undefined;
    } | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_PROFILE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_PROFILE";
    data: {};
}, {
    type: "LENS_PROFILE";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_TOTAL_POSTS", "LENS_TOTAL_FOLLOWERS"]>;
    data: z.ZodObject<{
        min: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min: number;
    }, {
        min: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}, {
    type: "LENS_TOTAL_POSTS" | "LENS_TOTAL_FOLLOWERS";
    data: {
        min: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["LENS_FOLLOWED_BY", "LENS_FOLLOW", "LENS_COLLECT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}, {
    type: "LENS_FOLLOWED_BY" | "LENS_FOLLOW" | "LENS_COLLECT";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_REACT">;
    data: z.ZodObject<{
        id: z.ZodString;
        reaction: z.ZodEnum<["ANY", "UPVOTE", "DOWNVOTE"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }, {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}, {
    type: "LENS_REACT";
    data: {
        id: string;
        reaction: "ANY" | "UPVOTE" | "DOWNVOTE";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"LENS_ACTION">;
    data: z.ZodObject<{
        id: z.ZodString;
        action: z.ZodEnum<["MIRROR", "QUOTE", "COMMENT"]>;
        publishedOn: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }, {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}, {
    type: "LENS_ACTION";
    data: {
        id: string;
        action: "MIRROR" | "QUOTE" | "COMMENT";
        publishedOn?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"PAYMENT">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    chain: z.ZodEnum<["ETHEREUM", "POLYGON", "OPTIMISM", "SEPOLIA"]>;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}, {
    type: "PAYMENT";
    data: {
        id: string;
    };
    chain: "ETHEREUM" | "POLYGON" | "OPTIMISM" | "SEPOLIA";
    address: string;
}> | z.ZodObject<{
    type: z.ZodEnum<["POAP", "GITPOAP"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}, {
    type: "POAP" | "GITPOAP";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_TOTAL_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
    }, {
        guildId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_TOTAL_AMOUNT";
    data: ({
        guildId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_AMOUNT">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_AMOUNT";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POINTS_RANK">;
    data: z.ZodIntersection<z.ZodObject<{
        guildPlatformId: z.ZodNumber;
        guildId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        guildId: number;
        guildPlatformId: number;
    }, {
        guildId: number;
        guildPlatformId: number;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
}, {
    type: "POINTS_RANK";
    data: ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        guildId: number;
        guildPlatformId: number;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_QUERY">;
    data: z.ZodObject<{
        query: z.ZodArray<z.ZodAny, "many">;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        query: any[];
        maxAmount?: number | undefined;
    }, {
        query: any[];
        maxAmount?: number | undefined;
    }>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_QUERY";
    data: {
        query: any[];
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodLiteral<"POLYGON_ID_BASIC">;
    data: z.ZodDefault<z.ZodObject<{
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        maxAmount?: number | undefined;
    }, {
        maxAmount?: number | undefined;
    }>>;
    chain: z.ZodOptional<z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>>;
}, "strip", z.ZodTypeAny, {
    type: "POLYGON_ID_BASIC";
    data: {
        maxAmount?: number | undefined;
    };
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}, {
    type: "POLYGON_ID_BASIC";
    data?: {
        maxAmount?: number | undefined;
    } | undefined;
    chain?: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM" | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["SNAPSHOT_FOLLOW", "SNAPSHOT_SPACE_ADMIN", "SNAPSHOT_SPACE_AUTHOR"]>;
    data: z.ZodObject<{
        space: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        space: string;
    }, {
        space: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}, {
    type: "SNAPSHOT_FOLLOW" | "SNAPSHOT_SPACE_ADMIN" | "SNAPSHOT_SPACE_AUTHOR";
    data: {
        space: string;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_FOLLOW_SINCE">;
    data: z.ZodObject<{
        space: z.ZodString;
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        space: string;
        since: number;
    }, {
        space: string;
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}, {
    type: "SNAPSHOT_FOLLOW_SINCE";
    data: {
        space: string;
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_USER_SINCE">;
    data: z.ZodObject<{
        since: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        since: number;
    }, {
        since: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}, {
    type: "SNAPSHOT_USER_SINCE";
    data: {
        since: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_MAJORITY_VOTES">;
    data: z.ZodObject<{
        minRatio: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minRatio: number;
    }, {
        minRatio: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}, {
    type: "SNAPSHOT_MAJORITY_VOTES";
    data: {
        minRatio: number;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_VOTES">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        proposal: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}, {
    type: "SNAPSHOT_VOTES";
    data: {
        minAmount: number;
        space?: string | undefined;
        proposal?: string | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_PROPOSALS">;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        space: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodEnum<["active", "pending", "closed"]>>;
        successfulOnly: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }, {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}, {
    type: "SNAPSHOT_PROPOSALS";
    data: {
        minAmount: number;
        space?: string | undefined;
        state?: "active" | "pending" | "closed" | undefined;
        successfulOnly?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"SNAPSHOT_STRATEGY">;
    chain: z.ZodEnum<["BERA_TESTNET", "ETHEREUM", "BSC", "POLYGON", "AVALANCHE", "FANTOM", "ARBITRUM", "NOVA", "CELO", "HARMONY", "GOERLI", "OPTIMISM", "MOONRIVER", "MOONBEAM", "GNOSIS", "METIS", "CRONOS", "BOBA", "BOBA_AVAX", "PALM", "BASE_GOERLI", "BASE_MAINNET", "EXOSAMA", "EVMOS", "POLYGON_MUMBAI", "ZETACHAIN_ATHENS", "SCROLL_ALPHA", "SEPOLIA", "ZKSYNC_ERA", "ZORA", "POLYGON_ZKEVM", "NEON_EVM", "PGN", "LINEA", "LUKSO", "MANTLE", "SCROLL", "SCROLL_SEPOLIA", "RONIN", "SHIMMER", "KAVA", "BITFINITY_TESTNET", "X1_TESTNET", "ONTOLOGY", "BERA_TESTNET", "MANTA", "TAIKO_KATLA", "OASIS_SAPPHIRE", "BLAST_SEPOLIA", "BASE_SEPOLIA", "BLAST_MAINNET", "ASTAR_ZKEVM", "ZETACHAIN", "CORE_DAO", "LISK_SEPOLIA", "FORM_TESTNET", "METIS_SEPOLIA", "OP_BNB", "X1", "CYBER", "TAIKO", "KLAYTN", "MINT", "WORLD_CHAIN", "SEI", "FILECOIN", "ROOTSTOCK", "MODE", "LISK", "CRONOS_ZKEVM"]>;
    data: z.ZodObject<{
        block: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<"latest">]>;
        strategies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            params: z.ZodOptional<z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            params?: any;
        }, {
            name: string;
            params?: any;
        }>, "many">;
        space: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }, {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}, {
    type: "SNAPSHOT_STRATEGY";
    data: {
        block: number | "latest";
        strategies: {
            name: string;
            params?: any;
        }[];
        space?: string | undefined;
    };
    chain: "BERA_TESTNET" | "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "FANTOM" | "ARBITRUM" | "NOVA" | "CELO" | "HARMONY" | "GOERLI" | "OPTIMISM" | "MOONRIVER" | "MOONBEAM" | "GNOSIS" | "METIS" | "CRONOS" | "BOBA" | "BOBA_AVAX" | "PALM" | "BASE_GOERLI" | "BASE_MAINNET" | "EXOSAMA" | "EVMOS" | "POLYGON_MUMBAI" | "ZETACHAIN_ATHENS" | "SCROLL_ALPHA" | "SEPOLIA" | "ZKSYNC_ERA" | "ZORA" | "POLYGON_ZKEVM" | "NEON_EVM" | "PGN" | "LINEA" | "LUKSO" | "MANTLE" | "SCROLL" | "SCROLL_SEPOLIA" | "RONIN" | "SHIMMER" | "KAVA" | "BITFINITY_TESTNET" | "X1_TESTNET" | "ONTOLOGY" | "MANTA" | "TAIKO_KATLA" | "OASIS_SAPPHIRE" | "BLAST_SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET" | "ASTAR_ZKEVM" | "ZETACHAIN" | "CORE_DAO" | "LISK_SEPOLIA" | "FORM_TESTNET" | "METIS_SEPOLIA" | "OP_BNB" | "X1" | "CYBER" | "TAIKO" | "KLAYTN" | "MINT" | "WORLD_CHAIN" | "SEI" | "FILECOIN" | "ROOTSTOCK" | "MODE" | "LISK" | "CRONOS_ZKEVM";
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW", "TWITTER_FOLLOWED_BY", "TWITTER_NAME", "TWITTER_BIO", "TWITTER_LIKE", "TWITTER_RETWEET", "TWITTER_LIST_MEMBER", "TWITTER_LIST_FOLLOW"]>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}, {
    type: "TWITTER_FOLLOW" | "TWITTER_FOLLOWED_BY" | "TWITTER_NAME" | "TWITTER_BIO" | "TWITTER_LIKE" | "TWITTER_RETWEET" | "TWITTER_LIST_MEMBER" | "TWITTER_LIST_FOLLOW";
    data: {
        id: string;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOWER_COUNT", "TWITTER_FOLLOWING_COUNT", "TWITTER_TWEET_COUNT", "TWITTER_LIKE_COUNT"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
    }, {
        minAmount: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}, {
    type: "TWITTER_FOLLOWER_COUNT" | "TWITTER_FOLLOWING_COUNT" | "TWITTER_TWEET_COUNT" | "TWITTER_LIKE_COUNT";
    data: {
        minAmount: number;
    };
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_ACCOUNT_AGE_RELATIVE", "TWITTER_ACCOUNT_AGE"]>;
    data: z.ZodObject<{
        minAmount: z.ZodNumber;
        fromNow: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }, {
        minAmount: number;
        fromNow?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}, {
    type: "TWITTER_ACCOUNT_AGE_RELATIVE" | "TWITTER_ACCOUNT_AGE";
    data: {
        minAmount: number;
        fromNow?: boolean | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_VERIFIED">;
    data: z.ZodObject<{
        id: z.ZodEnum<["any", "blue", "business", "government"]>;
    }, "strip", z.ZodTypeAny, {
        id: "any" | "blue" | "business" | "government";
    }, {
        id: "any" | "blue" | "business" | "government";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}, {
    type: "TWITTER_ACCOUNT_VERIFIED";
    data: {
        id: "any" | "blue" | "business" | "government";
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"TWITTER_ACCOUNT_PROTECTED">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data: {};
}, {
    type: "TWITTER_ACCOUNT_PROTECTED";
    data?: {} | undefined;
}> | z.ZodObject<{
    type: z.ZodEnum<["TWITTER_FOLLOW_V2", "TWITTER_LIKE_V2", "TWITTER_RETWEET_V2", "LINK_VISIT"]>;
    data: z.ZodObject<{
        id: z.ZodString;
        maxAmount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        maxAmount?: number | undefined;
    }, {
        id: string;
        maxAmount?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}, {
    type: "TWITTER_FOLLOW_V2" | "TWITTER_LIKE_V2" | "TWITTER_RETWEET_V2" | "LINK_VISIT";
    data: {
        id: string;
        maxAmount?: number | undefined;
    };
}> | z.ZodObject<{
    type: z.ZodLiteral<"WEB3INBOX_SUBSCRIBERS">;
    data: z.ZodObject<{
        app: z.ZodEnum<["GUILD", "WEB3INBOX", "SHEFI"]>;
    }, "strip", z.ZodTypeAny, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }, {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}, {
    type: "WEB3INBOX_SUBSCRIBERS";
    data: {
        app: "GUILD" | "WEB3INBOX" | "SHEFI";
    };
}>)[], z.ZodObject<{
    type: z.ZodLiteral<"UNISWAP_V3_POSITIONS">;
    data: z.ZodIntersection<z.ZodObject<{
        token0: z.ZodString;
        token1: z.ZodString;
        baseCurrency: z.ZodDefault<z.ZodEnum<["token0", "token1"]>>;
        countedPositions: z.ZodDefault<z.ZodEnum<["ALL", "IN_RANGE", "FULL_RANGE"]>>;
        defaultFee: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<100>, z.ZodLiteral<500>, z.ZodLiteral<3000>, z.ZodLiteral<10000>]>>>;
    }, "strip", z.ZodTypeAny, {
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }, {
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    }>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount: number;
        maxAmount?: undefined;
    }, {
        minAmount: number;
        maxAmount?: undefined;
    }>, z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount?: undefined;
    }, {
        maxAmount: number;
        minAmount?: undefined;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodNumber;
        maxAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>, {
        maxAmount: number;
        minAmount: number;
    }, {
        maxAmount: number;
        minAmount: number;
    }>]>, z.ZodEffects<z.ZodObject<{
        minAmount: z.ZodUndefined;
        maxAmount: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>, {
        minAmount: number;
        maxAmount: undefined;
    }, {
        minAmount?: undefined;
        maxAmount?: undefined;
    }>]>>;
    chain: z.ZodEnum<["ETHEREUM", "ARBITRUM", "OPTIMISM", "POLYGON", "BASE_MAINNET", "BSC", "AVALANCHE", "CELO", "BLAST_MAINNET", "SEPOLIA", "BASE_SEPOLIA"]>;
}, "strip", z.ZodTypeAny, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency: "token0" | "token1";
        countedPositions: "ALL" | "IN_RANGE" | "FULL_RANGE";
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount: undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}, {
    type: "UNISWAP_V3_POSITIONS";
    data: ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount: number;
        maxAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount?: undefined;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        maxAmount: number;
        minAmount: number;
    }) | ({
        token0: string;
        token1: string;
        baseCurrency?: "token0" | "token1" | undefined;
        countedPositions?: "ALL" | "IN_RANGE" | "FULL_RANGE" | undefined;
        defaultFee?: 100 | 500 | 3000 | 10000 | null | undefined;
    } & {
        minAmount?: undefined;
        maxAmount?: undefined;
    });
    chain: "ETHEREUM" | "BSC" | "POLYGON" | "AVALANCHE" | "ARBITRUM" | "CELO" | "OPTIMISM" | "BASE_MAINNET" | "SEPOLIA" | "BASE_SEPOLIA" | "BLAST_MAINNET";
}>, z.ZodObject<{
    type: z.ZodLiteral<"WORLD_ID_VERIFICATION">;
    data: z.ZodObject<{
        verificationLevel: z.ZodEnum<["device", "orb"]>;
    }, "strip", z.ZodTypeAny, {
        verificationLevel: "device" | "orb";
    }, {
        verificationLevel: "device" | "orb";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}, {
    type: "WORLD_ID_VERIFICATION";
    data: {
        verificationLevel: "device" | "orb";
    };
}>]>>;
type RequirementUpdatePayload = Omit<Schemas["RequirementUpdatePayload"], "data"> & {
    data?: z.input<typeof reqTypes>["data"] | Record<string, any>;
};
type GetGuildMembersResponse = {
    roleId: number;
    members: string[];
}[];
type GetGuildMemberAccessResponse = {
    roleId: number;
    access: boolean;
}[];
type Chain = (typeof Chain$1)[number];
type Visibility = (typeof Visibility$1)[number];
type Logic = (typeof Logic$1)[number];
type SocialLinks = Partial<Record<(typeof SocialLinks$1)[number], string>>;
type Requirement = z.output<typeof RequirementSchema> & {
    visibility: Visibility;
    id: number;
};
type RoleReward = {
    id: number;
    guildPlatformId: number;
    platformRoleId: string;
    visibility: Visibility;
    platformRoleData?: Record<string, string>;
    createdAt: Date;
    updatedAt: Date;
};
type Role = {
    id: number;
    name: string;
    description: string;
    imageUrl: string;
    logic: Logic;
    memberCount: number;
    visibility: Visibility;
    hideFromEyes: boolean;
    position: number;
    anyOfNum: number;
    createdAt: Date;
    updatedAt: Date;
};
type Guild = {
    id: number;
    name: string;
    urlName: string;
    createdAt: Date;
    updatedAt: Date;
    description: string;
    imageUrl: string;
    showMembers: boolean;
    hideFromExplorer: boolean;
    socialLinks: SocialLinks;
    onboardingComplete: boolean;
    memberCount: number;
    theme: {
        mode: "DARK" | "LIGHT";
        color: string;
        backgroundImage: string;
        backgroundCss: string;
        updatedAt: Date;
    };
};
type PlatformGuildData = {
    inviteChannel?: string;
    invite?: string;
    joinButton?: boolean;
    needCaptcha?: boolean;
    role?: "reader" | "commenter" | "writer";
    mimeType?: string;
    iconLink?: string;
    platformUserId?: string;
    chain?: Chain;
    contractAddress?: string;
    function?: string;
    argsToSign?: string[];
    name?: string;
    symbol?: string;
    imageUrl?: string;
    description?: string;
    texts?: string[];
    text?: string;
    eventId?: number;
    fancyId?: string;
    formId?: number;
    gatherApiKey?: string;
    gatherSpaceId?: string;
    gatherRole?: string;
    gatherAffiliation?: string;
    poolId?: number;
    tokenAddress?: string;
};
type PlatformInfo = {
    name: string;
    invite: string;
};
type GuildReward = {
    id: number;
    platformId: number;
    platformGuildId: string;
    platformGuildData: PlatformGuildData;
    platformGuildName?: string;
    invite?: string;
};
type PinAction = (typeof GuildPinAction)[number];
type IssueGuildPinResponse = {
    userAddress: string;
    guildAction: number;
    userId: number;
    guildId: number;
    guildName: string;
    createdAt: Date;
    timestamp: number;
    cid: string;
    signature: string;
};
type GuildAdmin = {
    guildId: number;
    userId: number;
    isOwner: boolean;
    createdAt: Date;
};
type GuildContactType = (typeof ContactType)[number];
type GuildContact = {
    id: number;
    type: GuildContactType;
    guildId: number;
    contact: string;
};
type GuildCreationResponse = Guild & {
    contacts: GuildContact[];
    admins: Array<{
        id: number;
        address: string;
        isOwner: boolean;
    }>;
    featureFlags: string[];
    roles: Array<Role & {
        rolePlatforms: RoleReward[];
        requirements: Requirement[];
    }>;
    guildPlatforms: GuildReward[];
};
type RoleCreationResponse = Role & {
    requirements: Requirement[];
    rolePlatforms?: RoleReward[];
    createdGuildPlatforms?: GuildReward[];
};
type AvailableTextsResponse = {
    count: number;
};
type RolePlatformClaimResponse = {
    uniqueValue: string;
};
type User = {
    id: number;
    createdAt: Date;
    captchaVerifiedSince?: Date;
};
type UserAddress = {
    address: string;
    userId: number;
    identityId?: number;
    isPrimary: boolean;
    isDelegated: boolean;
    createdAt: Date;
    walletType: "EVM" | "FUEL";
};
type UserSharedSocial = {
    userId: number;
    guildId: number;
    isShared?: boolean | null;
};
type PlatformUser = {
    userId: number;
    identityId: number;
    platformId: number;
    platformUserId: string;
    platformUserData: any;
    createdAt: Date;
};
type UserProfile = User & {
    addresses: UserAddress[];
    publicKey: string;
    isSuperAdmin?: boolean;
    sharedSocials: UserSharedSocial[];
    platformUsers: Array<PlatformUser & {
        platformName: string;
    }>;
    guildProfile: Schemas["Profile"];
};
type PublicUserProfile = {
    id: number;
    publicKey: string;
    captchaVerifiedSince?: Date;
};
type PlatformName = (typeof PlatformName$1)[number];
type MembershipResult = {
    guildId: number;
    roleIds: number[];
    isAdmin: boolean;
    isOwner: boolean;
    joinedAt: Date;
};
type VisibilityFilterable<IdField extends string = "id", VisibilityField extends string = "visibility"> = {
    [K in VisibilityField]: Visibility;
} & {
    [K in IdField]: number;
};
type GuildPrepareInput = {
    id: number;
    admins: Array<{
        id: number;
    }>;
    guildPlatforms: {
        id: number;
    }[];
    roles: (VisibilityFilterable & {
        requirements: VisibilityFilterable[];
        rolePlatforms: (VisibilityFilterable & {
            guildPlatformId: number;
        })[];
    })[];
};
type FilteredGuild<G extends GuildPrepareInput> = Omit<G, "roles"> & {
    hiddenRoles: boolean;
    roles: (G["roles"][number] & {
        hiddenRequirements: boolean;
        hiddenRewards: boolean;
    })[];
};
type GuildByPlatformResponse = FilteredGuild<GuildCreationResponse>;
type PlatformRoleResponse = {
    roleName: string;
    platformRoleId: string;
    platformRoleData: any;
};
type UserGuildAccessesByPlatformResponse = {
    guildName: string;
    platformGuildId: string;
    roles: PlatformRoleResponse[];
};
type JoinJob = AccessJobContent;
type AccessCheckJob = CreateAccessJobOptions & BaseJobParams & ManagedJobFields & AccessFlowResult & Omit<AccessPreparationResult, "nextQueue"> & Omit<AccessLogicResult, "nextQueue"> & Omit<AccessResultResult, "nextQueue"> & {
    "children:access-check:jobs": (AccessCheckParams & AccessCheckResult & BaseJobParams & ManagedJobFields)[];
};
type StatusUpdateJob = StatusUpdateJobContent;
type LeaderboardItem = {
    userId: number;
    roleIds: number[];
    totalPoints: number;
    oldestRoleDate: Date;
    address?: string;
    rank?: number;
    secondaryAddresses?: string[];
};
type Leaderboard = LeaderboardItem[];
type GetLeaderboardResponse = {
    leaderboard: Leaderboard;
    aroundUser?: Leaderboard;
    isRevalidating: boolean;
};
type UserPointsItem = {
    guildId: number;
    guildPlatformId: number;
    totalPoints: number;
    rank: number;
    roleIds: number[];
};
type UserPointsResponse = UserPointsItem[];
type SyncCycle = {
    id: number;
    status: "CREATED" | "STARTED" | "PAUSED" | "FINISHED";
    createdAt: Date;
    updatedAt: Date;
    startedAt: Date | null;
    finishedAt: Date | null;
};
type SyncJob = {
    id: number;
    cycleId: number;
    status: "CREATED" | "STARTED" | "FINISHED" | "SKIPPED";
    position: number | null;
    priorityInfo: {
        vip: boolean;
        syncable: boolean;
        guildMemberCount: number;
        requirementTypes: string[];
        notSyncableReason: string;
    };
    roleId: number;
    roleName: string;
    guildId: number;
    guildName: string;
    guildUrlName: string;
    jobIds: string[];
    result: any;
    createdAt: Date;
    updatedAt: Date;
    startedAt: Date | null;
    finishedAt: Date | null;
};
type SyncStatus = "ready" | "running" | "stopping" | "stopped";
type PeriodicSyncSummary = {
    syncStatus: SyncStatus;
    syncQueueUpdaterStatus: SyncStatus;
    syncerErrorMsg?: string;
    jobs?: SyncJob[];
};
type BaseGateable = {
    isGuilded: boolean;
    guildId?: number;
};
type DiscordGateable = BaseGateable & {
    img: string;
    name: string;
    owner: boolean;
    id: string;
};
type GitHubGateable = BaseGateable & {
    avatarUrl: string;
    description?: string;
    platformGuildId: string;
    repositoryName: string;
    url: string;
};
type GoogleGateable = BaseGateable & {
    name: string;
    mimeType: string;
    webViewLink: string;
    iconLink: string;
    platformGuildId: string;
};
type Gateables = DiscordGateable[] | GitHubGateable[] | GoogleGateable[];
type FarcasterProfile = {
    fid: number;
    username?: string;
    avatar?: string;
    createdAt: Date;
    userId: number;
};

type types_AccessCheckJob = AccessCheckJob;
type types_AvailableTextsResponse = AvailableTextsResponse;
type types_BaseGateable = BaseGateable;
type types_Chain = Chain;
type types_DiscordGateable = DiscordGateable;
type types_DynamicAmount = DynamicAmount;
type types_DynamicAmountOperations = DynamicAmountOperations;
type types_DynamicAmountToCreate = DynamicAmountToCreate;
type types_FarcasterProfile = FarcasterProfile;
type types_Gateables = Gateables;
type types_GetGuildMemberAccessResponse = GetGuildMemberAccessResponse;
type types_GetGuildMembersResponse = GetGuildMembersResponse;
type types_GetLeaderboardResponse = GetLeaderboardResponse;
type types_GitHubGateable = GitHubGateable;
type types_GoogleGateable = GoogleGateable;
type types_Guild = Guild;
type types_GuildAdmin = GuildAdmin;
type types_GuildByPlatformResponse = GuildByPlatformResponse;
type types_GuildContact = GuildContact;
type types_GuildContactType = GuildContactType;
type types_GuildCreationResponse = GuildCreationResponse;
type types_GuildReward = GuildReward;
type types_InputSource = InputSource;
type types_IssueGuildPinResponse = IssueGuildPinResponse;
type types_JoinJob = JoinJob;
type types_Leaderboard = Leaderboard;
type types_LeaderboardItem = LeaderboardItem;
type types_Logic = Logic;
type types_MembershipResult = MembershipResult;
type types_PeriodicSyncSummary = PeriodicSyncSummary;
type types_PinAction = PinAction;
type types_PlatformGuildData = PlatformGuildData;
type types_PlatformInfo = PlatformInfo;
type types_PlatformName = PlatformName;
type types_PlatformUser = PlatformUser;
type types_PublicUserProfile = PublicUserProfile;
type types_Requirement = Requirement;
type types_RequirementUpdatePayload = RequirementUpdatePayload;
type types_Role = Role;
type types_RoleCreationResponse = RoleCreationResponse;
type types_RolePlatformClaimResponse = RolePlatformClaimResponse;
type types_RoleReward = RoleReward;
type types_Schemas = Schemas;
type types_SocialLinks = SocialLinks;
type types_StatusUpdateJob = StatusUpdateJob;
type types_SyncCycle = SyncCycle;
type types_SyncJob = SyncJob;
type types_SyncStatus = SyncStatus;
type types_User = User;
type types_UserAddress = UserAddress;
type types_UserGuildAccessesByPlatformResponse = UserGuildAccessesByPlatformResponse;
type types_UserPointsItem = UserPointsItem;
type types_UserPointsResponse = UserPointsResponse;
type types_UserProfile = UserProfile;
type types_UserSharedSocial = UserSharedSocial;
type types_Visibility = Visibility;
declare namespace types {
  export type { types_AccessCheckJob as AccessCheckJob, types_AvailableTextsResponse as AvailableTextsResponse, types_BaseGateable as BaseGateable, types_Chain as Chain, types_DiscordGateable as DiscordGateable, types_DynamicAmount as DynamicAmount, types_DynamicAmountOperations as DynamicAmountOperations, types_DynamicAmountToCreate as DynamicAmountToCreate, types_FarcasterProfile as FarcasterProfile, types_Gateables as Gateables, types_GetGuildMemberAccessResponse as GetGuildMemberAccessResponse, types_GetGuildMembersResponse as GetGuildMembersResponse, types_GetLeaderboardResponse as GetLeaderboardResponse, types_GitHubGateable as GitHubGateable, types_GoogleGateable as GoogleGateable, types_Guild as Guild, types_GuildAdmin as GuildAdmin, types_GuildByPlatformResponse as GuildByPlatformResponse, types_GuildContact as GuildContact, types_GuildContactType as GuildContactType, types_GuildCreationResponse as GuildCreationResponse, types_GuildReward as GuildReward, types_InputSource as InputSource, types_IssueGuildPinResponse as IssueGuildPinResponse, types_JoinJob as JoinJob, types_Leaderboard as Leaderboard, types_LeaderboardItem as LeaderboardItem, types_Logic as Logic, types_MembershipResult as MembershipResult, types_PeriodicSyncSummary as PeriodicSyncSummary, types_PinAction as PinAction, types_PlatformGuildData as PlatformGuildData, types_PlatformInfo as PlatformInfo, types_PlatformName as PlatformName, types_PlatformUser as PlatformUser, types_PublicUserProfile as PublicUserProfile, types_Requirement as Requirement, types_RequirementUpdatePayload as RequirementUpdatePayload, types_Role as Role, types_RoleCreationResponse as RoleCreationResponse, types_RolePlatformClaimResponse as RolePlatformClaimResponse, types_RoleReward as RoleReward, types_Schemas as Schemas, types_SocialLinks as SocialLinks, types_StatusUpdateJob as StatusUpdateJob, types_SyncCycle as SyncCycle, types_SyncJob as SyncJob, types_SyncStatus as SyncStatus, types_User as User, types_UserAddress as UserAddress, types_UserGuildAccessesByPlatformResponse as UserGuildAccessesByPlatformResponse, types_UserPointsItem as UserPointsItem, types_UserPointsResponse as UserPointsResponse, types_UserProfile as UserProfile, types_UserSharedSocial as UserSharedSocial, types_Visibility as Visibility };
}

export { type AccessCheckJob, type AvailableTextsResponse, type BaseGateable, type Chain, type DiscordGateable, type DynamicAmount, type DynamicAmountOperations, type DynamicAmountToCreate, type FarcasterProfile, type Gateables, type GetGuildMemberAccessResponse, type GetGuildMembersResponse, type GetLeaderboardResponse, type GitHubGateable, type GoogleGateable, type Guild, type GuildAdmin, type GuildByPlatformResponse, type GuildContact, type GuildContactType, type GuildCreationResponse, type GuildReward, type InputSource, type IssueGuildPinResponse, type JoinJob, type Leaderboard, type LeaderboardItem, type Logic, type MembershipResult, type PeriodicSyncSummary, type PinAction, type PlatformGuildData, type PlatformInfo, type PlatformName, type PlatformUser, type PublicUserProfile, type Requirement, type RequirementUpdatePayload, type Role, type RoleCreationResponse, type RolePlatformClaimResponse, type RoleReward, type Schemas, type SocialLinks, type StatusUpdateJob, type SyncCycle, type SyncJob, type SyncStatus, type User, type UserAddress, type UserGuildAccessesByPlatformResponse, type UserPointsItem, type UserPointsResponse, type UserProfile, type UserSharedSocial, type Visibility, consts, __schemas as schemas, types };
